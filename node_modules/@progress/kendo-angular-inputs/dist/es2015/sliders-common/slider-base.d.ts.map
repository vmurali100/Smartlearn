{"version":3,"file":"slider-base.d.ts","sources":["slider-base.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { EventEmitter, Injector, Renderer2, NgZone, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\nimport { LabelTemplateDirective } from './label-template.directive';\n/**\n * @hidden\n */\nexport declare abstract class SliderBase {\n    protected localizationService: LocalizationService;\n    protected injector: Injector;\n    protected renderer: Renderer2;\n    protected ngZone: NgZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected hostElement: ElementRef;\n    /**\n     * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title\n     * for each tick is its Slider value. If you use a callback function, the function accepts an argument\n     * that holds the value of the component and returns a string with the new title.\n     */\n    title: (value: number) => string;\n    /**\n     * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).\n     *\n     * The available options are:\n     * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n     * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n     * * `both`&mdash; (Default) The tick marks are located on both sides of the track.\n     * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.\n     */\n    tickPlacement: string;\n    /**\n     * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical\n     * ([see example]({% slug orientation_slider %})).\n     */\n    vertical: boolean;\n    /**\n     * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n    min: number;\n    /**\n     * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * The attribute accepts both integers and floating-point numbers.\n     */\n    max: number;\n    /**\n     * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n     * Accepts positive values only. Can be an integer or a floating-point number.\n     */\n    smallStep: number;\n    /**\n     * Specifies that every n<sup>th</sup> tick will be large and will have a label\n     * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).\n     * Accepts positive integer values only.\n     */\n    largeStep: number;\n    /**\n     * Sets the width between each two ticks along the track ([see example]({% slug ticks_slider %}#toc-width)). The value\n     * has to be set in pixels. If no `fixedTickWidth` is provided, the Slider automatically adjusts the tick width to\n     * accommodate the elements within the size of the component.\n     */\n    fixedTickWidth: number;\n    /**\n     * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).\n     */\n    disabled: boolean;\n    /**\n     * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).\n     */\n    readonly: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.\n     */\n    tabindex: number;\n    /**\n     * Fires each time the user focuses the component.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the component is blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the user selects a new value.\n     */\n    valueChange: EventEmitter<any>;\n    direction: string;\n    readonly horizontalClass: boolean;\n    readonly verticalClass: boolean;\n    sliderClass: boolean;\n    widgetClass: boolean;\n    stateDefaultClass: boolean;\n    readonly disabledClass: boolean;\n    wrapper: ElementRef;\n    track: ElementRef;\n    sliderSelection: ElementRef;\n    ticksContainer: ElementRef;\n    ticks: any;\n    labelTemplate: LabelTemplateDirective;\n    protected subscriptions: Subscription;\n    protected isFocused: boolean;\n    protected isDragged: boolean;\n    protected control: NgControl;\n    constructor(localizationService: LocalizationService, injector: Injector, renderer: Renderer2, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    abstract sizeComponent(animate?: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly isDisabled: boolean;\n    /**\n     * @hidden\n     */\n    ifEnabled: Function;\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    protected readonly reverse: boolean;\n    protected readonly keyBinding: Object;\n    protected resetStyles(elements: HTMLElement[]): void;\n}\n"]}