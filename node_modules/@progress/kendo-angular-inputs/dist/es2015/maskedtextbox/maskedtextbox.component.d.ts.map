{"version":3,"file":"maskedtextbox.component.d.ts","sources":["maskedtextbox.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, OnChanges, Renderer2, SimpleChanges, NgZone, Injector, ChangeDetectorRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { MaskingService } from './masking.service';\n/**\n * Represents the [Kendo UI MaskedTextBox component for Angular]({% slug overview_maskedtextbox %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *      <kendo-maskedtextbox\n *          [mask]=\"mask\"\n *          [value]=\"value\">\n *      </kendo-maskedtextbox>\n *     `\n * })\n *\n * class AppComponent {\n *  public value: string = \"9580128055807792\";\n *  public mask: string = \"0000-0000-0000-0000\";\n * }\n * ```\n */\nexport declare class MaskedTextBoxComponent implements ControlValueAccessor, OnChanges, Validator {\n    private service;\n    private renderer;\n    private hostElement;\n    private ngZone;\n    private injector;\n    private changeDetector;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Determines whether the MaskedTextBox is disabled ([see example]({% slug disabled_maskedtextbox %})).\n     */\n    disabled: boolean;\n    /**\n     * Determines whether the MaskedTextBox is in its read-only state ([see example]({% slug readonly_maskedtextbox %})).\n     */\n    readonly: boolean;\n    /**\n     * Sets the title of the `input` element.\n     */\n    title: string;\n    direction: string;\n    hostClasses: boolean;\n    readonly hostDisabledClass: boolean;\n    /**\n     * Represents the current mask ([see example]({% slug value_maskedtextbox %})).\n     * If no mask is set, the component behaves as a standard `type=\"text\"` input.\n     *\n     * > If the mask allows for spaces, set the [`promptPlaceholder`]({% slug api_inputs_maskedtextboxcomponent %}#toc-promptplaceholder)\n     * to a character that is not accepted by the mask.\n     */\n    mask: string;\n    /**\n     * Provides a value for the MaskedTextBox.\n     */\n    value: string;\n    /**\n     * Exposes the RegExp-based mask validation array ([see example]({% slug masks_maskedtextbox %})).\n     */\n    rules: {\n        [key: string]: RegExp;\n    };\n    /**\n     * Represents a prompt character for the masked value.\n     * @default `_`\n     */\n    prompt: string;\n    /**\n     * Indicates a character which represents an empty position in the raw value.\n     * @default ' '\n     */\n    promptPlaceholder: string;\n    /**\n     * Indicates whether to include literals in the raw value  ([see example]({% slug value_maskedtextbox %})).\n     * @default false\n     */\n    includeLiterals: boolean;\n    /**\n     * Specifies if the mask should be shown on focus for empty value.\n     */\n    maskOnFocus: boolean;\n    /**\n     * Determines whether the built-in mask validator is enforced when a form is validated\n     * ([see example]({% slug validation_maskedtextbox %})).\n     * @default true\n     */\n    maskValidation: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Fires each time the user focuses the `input` element.\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-maskedtextbox (focus)=\"handleFocus()\"></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log(\"Component is focused\");\n     *   }\n     * }\n     * ```\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the `input` element gets blurred.\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-maskedtextbox (blur)=\"handleBlur()\"></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log(\"Component is blurred\");\n     *   }\n     * }\n     * ```\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the value changes.\n     */\n    valueChange: EventEmitter<string>;\n    /**\n     * Represents the `ElementRef` of the visible `input` element.\n     */\n    input: ElementRef;\n    protected isFocused: boolean;\n    private maskedValue;\n    private focusClick;\n    private defaultRules;\n    private _rules;\n    private isPasted;\n    private selection;\n    private control;\n    constructor(service: MaskingService, renderer: Renderer2, hostElement: ElementRef, ngZone: NgZone, injector: Injector, changeDetector: ChangeDetectorRef, rtl: boolean);\n    ngOnInit(): void;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the MaskedTextBox is empty.\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    handleFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleClick: () => void;\n    /**\n     * @hidden\n     */\n    handleBlur: () => void;\n    /**\n     * @hidden\n     */\n    handleDragDrop(): boolean;\n    /**\n     * Focuses the MaskedTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"maskedinput.focus()\">Focus the input</button>\n     *  <kendo-maskedtextbox #maskedinput></kendo-maskedtextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the MaskedTextBox.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    pasteHandler(e: any): void;\n    /**\n     * @hidden\n     */\n    inputHandler(e: any): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     * Writes a new value to the element.\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     * Sets the function that will be called when a `change` event is triggered.\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     * @hidden\n     * Sets the function that will be called when a `touch` event is triggered.\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    validate(_: AbstractControl): any;\n    /**\n     * @hidden\n     */\n    updateValue(maskedValue: string): void;\n    protected onChange: (_: any) => void;\n    protected onTouched: () => void;\n    private updateInput;\n    private extractChanges;\n    private updateService;\n    private setSelection;\n    private readonly emptyMask;\n    private setFocusSelection;\n    private focused;\n    private normalizeValue;\n}\n"]}