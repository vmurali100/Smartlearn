{"version":3,"file":"rangeslider.component.d.ts","sources":["rangeslider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, Renderer2, ElementRef, OnChanges, OnDestroy, NgZone, Injector, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { SliderBase } from '../sliders-common/slider-base';\nimport { RangeSliderValue } from './rangeslider-value.type';\n/**\n * Represents the [Kendo UI RangeSlider component for Angular]({% slug overview_rangeslider %}).\n */\nexport declare class RangeSliderComponent extends SliderBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {\n    protected localization: LocalizationService;\n    protected injector: Injector;\n    protected renderer: Renderer2;\n    protected ngZone: NgZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected hostElement: ElementRef;\n    /**\n     * Sets the range value of the RangeSlider.\n     * The component can use either NgModel or the `value` binding but not both of them at the same time.\n     */\n    value: RangeSliderValue;\n    draghandleStart: ElementRef;\n    draghandleEnd: ElementRef;\n    /**\n     * @hidden\n     */\n    startHandleId: string;\n    /**\n     * @hidden\n     */\n    endHandleId: string;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    private draggedHandle;\n    private handleZIndex;\n    private lastHandlePosition;\n    private activeHandle;\n    private focusChangedProgrammatically;\n    constructor(localization: LocalizationService, injector: Injector, renderer: Renderer2, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);\n    /**\n     * Focuses the RangeSlider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *     <div>\n     *         <button class=\"k-button\" (click)=\"slider.focus()\">Focus</button>\n     *     </div>\n     *     <kendo-rangeslider #slider></kendo-rangeslider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the RangeSlider.\n     */\n    blur(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    textFor(key: string): string;\n    /**\n     * @hidden\n     */\n    readonly valueText: string;\n    /**\n     * @hidden\n     */\n    onWrapClick: (args: any) => void;\n    /**\n     * @hidden\n     */\n    handleDragPress(args: any): void;\n    /**\n     * @hidden\n     */\n    onHandleDrag(args: any): void;\n    /**\n     * @hidden\n     */\n    onKeyDown: (e: any) => void;\n    /**\n     * @hidden\n     */\n    onHandleRelease(args: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: [number, number]): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    changeValue(value: [number, number]): void;\n    /**\n     * @hidden\n     */\n    sizeComponent(): void;\n    /**\n     * @hidden\n     */\n    readonly isDisabled: boolean;\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    protected focused: boolean;\n    private dragging;\n    private ngChange;\n    private ngTouched;\n    private getProps;\n    private attachElementEventHandlers;\n    private handleBlur;\n}\n"]}