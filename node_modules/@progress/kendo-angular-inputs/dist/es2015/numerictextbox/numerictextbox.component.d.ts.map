{"version":3,"file":"numerictextbox.component.d.ts","sources":["numerictextbox.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, NgZone, ChangeDetectorRef, Injector } from '@angular/core';\nimport { ControlValueAccessor, AbstractControl, NgControl, Validator } from '@angular/forms';\nimport { IntlService, NumberFormatOptions } from '@progress/kendo-angular-intl';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ArrowDirection } from './arrow-direction';\nimport { Subscription } from 'rxjs';\n/**\n * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).\n */\nexport declare class NumericTextBoxComponent implements ControlValueAccessor, OnChanges, OnDestroy, Validator {\n    private intl;\n    private renderer;\n    private localizationService;\n    private injector;\n    private ngZone;\n    private changeDetector;\n    private hostElement;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).\n     */\n    disabled: boolean;\n    /**\n     * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).\n     */\n    readonly: boolean;\n    /**\n     * Sets the title of the `input` element of the NumericTextBox.\n     */\n    title: string;\n    /**\n     * Specifies whether the value will be auto-corrected based on the minimum and maximum values\n     * ([see example]({% slug precision_numerictextbox %})).\n     */\n    autoCorrect: boolean;\n    /**\n     * Specifies the number format which is used when the NumericTextBox is not focused\n     * ([see example]({% slug formats_numerictextbox %})).\n     * If `format` is set to `null` or `undefined`, the default format will be used.\n     */\n    format: string | NumberFormatOptions | null | undefined;\n    /**\n     * Specifies the greatest value that is valid\n     * ([see example]({% slug precision_numerictextbox %}#toc-value-ranges)).\n     */\n    max: number;\n    /**\n     * Specifies the smallest value that is valid\n     * ([see example]({% slug precision_numerictextbox %}#toc-value-ranges)).\n     */\n    min: number;\n    /**\n     * Specifies the number of decimals that the user can enter when the input is focused\n     * ([see example]({% slug precision_numerictextbox %})).\n     */\n    decimals: number;\n    /**\n     * Specifies the input placeholder.\n     */\n    placeholder: string;\n    /**\n     * Specifies the value that is used to increment or decrement the component value\n     * ([see example]({% slug predefinedsteps_numerictextbox %})).\n     */\n    step: number;\n    /**\n     * Specifies whether the **Up** and **Down** spin buttons will be rendered\n     * ([see example]({% slug spinbuttons_numerictextbox %})).\n     */\n    spinners: boolean;\n    /**\n     * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.\n     *\n     * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`\n     * to `false`, the built-in Angular validators will be executed.\n     */\n    rangeValidation: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.\n     */\n    selectOnFocus: boolean;\n    /**\n     * Specifies the value of the NumericTextBox\n     * ([see example]({% slug formats_numerictextbox %})).\n     */\n    value: number;\n    /**\n     * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    numericInput: ElementRef;\n    numericWrap: ElementRef;\n    direction: string;\n    /**\n     * @hidden\n     */\n    ArrowDirection: any;\n    /**\n     * @hidden\n     */\n    arrowDirection: ArrowDirection;\n    readonly widgetClasses: boolean;\n    protected subscriptions: Subscription;\n    protected inputValue: string;\n    protected spinTimeout: number;\n    protected isFocused: boolean;\n    protected minValidateFn: any;\n    protected maxValidateFn: any;\n    protected numericRegex: RegExp;\n    protected _format: string | NumberFormatOptions;\n    protected previousSelection: any;\n    protected pressedKey: any;\n    protected control: NgControl;\n    protected isPasted: boolean;\n    protected mouseDown: boolean;\n    private ngChange;\n    private ngTouched;\n    private ngValidatorChange;\n    constructor(intl: IntlService, renderer: Renderer2, localizationService: LocalizationService, injector: Injector, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    increasePress: (e: any) => void;\n    /**\n     * @hidden\n     */\n    decreasePress: (e: any) => void;\n    /**\n     * @hidden\n     */\n    releaseArrow: () => void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any;\n    };\n    /**\n     * @hidden\n     */\n    registerOnValidatorChange(fn: Function): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: number): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Focuses the NumericTextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"numerictextbox.focus()\">Focus NumericTextBox</button>\n     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the NumericTextBox.\n     */\n    blur(): void;\n    /**\n     * Notifies the `NumericTextBoxComponent` that the input value should be changed.\n     * Can be used to update the input after setting the component properties directly.\n     */\n    notifyValueChange(): void;\n    /**\n     * @hidden\n     */\n    handlePaste: () => void;\n    /**\n     * @hidden\n     */\n    handleInput: () => void;\n    /**\n     * @hidden\n     */\n    handleDragEnter: () => void;\n    /**\n     * @hidden\n     */\n    handleMouseDown: () => void;\n    /**\n     * @hidden\n     */\n    handleFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleBlur: () => void;\n    /**\n     * @hidden\n     */\n    handleKeyDown: (e: any) => void;\n    /**\n     * @hidden\n     */\n    handleWheel: (e: any) => void;\n    /**\n     * @hidden\n     */\n    readonly incrementTitle: string;\n    /**\n     * @hidden\n     */\n    readonly decrementTitle: string;\n    private readonly decimalSeparator;\n    private elementValue;\n    private focused;\n    private readonly hasDecimals;\n    private readonly isDisabled;\n    private arrowPress;\n    private updateValue;\n    private replaceNumpadDotValue;\n    private isValid;\n    private spin;\n    private addStep;\n    private setSelection;\n    private limitValue;\n    private limitInputValue;\n    private tryPadValue;\n    private isInRange;\n    private restrictModelValue;\n    private restrictDecimals;\n    private formatInputValue;\n    private formatValue;\n    private setInputValue;\n    private verifySettings;\n    private verifyValue;\n    private parseOptions;\n    private intlChange;\n    private hasTrailingZeros;\n    private selectAll;\n    private selectCaret;\n    private numberOfLeadingZeroes;\n    private adjustSignificantChars;\n}\n"]}