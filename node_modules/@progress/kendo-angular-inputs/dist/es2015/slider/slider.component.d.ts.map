{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, Renderer2, ElementRef, OnChanges, OnDestroy, NgZone, Injector, SimpleChanges, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { SliderBase } from '../sliders-common/slider-base';\n/**\n * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).\n */\nexport declare class SliderComponent extends SliderBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {\n    protected localization: LocalizationService;\n    protected injector: Injector;\n    protected renderer: Renderer2;\n    protected ngZone: NgZone;\n    protected changeDetector: ChangeDetectorRef;\n    protected hostElement: ElementRef;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Changes the `title` attribute of the drag handle so that it can be localized.\n     */\n    dragHandleTitle: string;\n    /**\n     * Sets the title of the **Increase** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).\n     */\n    incrementTitle: string;\n    /**\n     * Determines if the animation will be played on value change.\n     * Regardless of this setting, no animation will be played during the initial rendering.\n     */\n    animate: boolean;\n    /**\n     * Sets the title of the **Decrease** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).\n     */\n    decrementTitle: string;\n    /**\n     * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).\n     * When `showButtons` is set to `false`, the buttons are not displayed.\n     */\n    showButtons: boolean;\n    /**\n     * The current value of the Slider when it is initially displayed.\n     * The component can use either NgModel or the `value` binding but not both of them at the same time.\n     */\n    value: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    draghandle: ElementRef;\n    decreaseButton: ElementRef;\n    increaseButton: ElementRef;\n    constructor(localization: LocalizationService, injector: Injector, renderer: Renderer2, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);\n    /**\n     * @hidden\n     */\n    handleFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleBlur: () => void;\n    /**\n     * Focuses the Slider.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"slider.focus()\">Focus</button>\n     *  <kendo-slider #slider></kendo-slider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the Slider.\n     */\n    blur(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    readonly incrementMessage: string;\n    /**\n     * @hidden\n     */\n    readonly decrementMessage: string;\n    /**\n     * @hidden\n     */\n    readonly dragHandleMessage: string;\n    /**\n     * @hidden\n     */\n    onWrapClick: (args: any) => void;\n    /**\n     * @hidden\n     */\n    handleDragPress(args: any): void;\n    /**\n     * @hidden\n     */\n    onHandleDrag(args: any): void;\n    /**\n     * @hidden\n     */\n    onKeyDown: (e: any) => void;\n    /**\n     * @hidden\n     */\n    onHandleRelease(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: number): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    changeValue(value: number): void;\n    /**\n     * @hidden\n     */\n    sizeComponent(animate: boolean): void;\n    protected focused: boolean;\n    private dragging;\n    private setValueChangeInterval;\n    private ngChange;\n    private ngTouched;\n    private decreaseValue;\n    private increaseValue;\n    private getProps;\n}\n"]}