{"version":3,"file":"color-gradient.component.d.ts","sources":["color-gradient.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, Renderer2, NgZone, EventEmitter, SimpleChanges, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { OutputFormat, KendoDragEvent, HSVA } from './models';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.\n * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\nexport declare class ColorGradientComponent implements OnChanges, OnDestroy, ControlValueAccessor {\n    private host;\n    private ngZone;\n    private renderer;\n    private cdr;\n    hostClasses: boolean;\n    readonly disabledClass: boolean;\n    readonly hostTabindex: number;\n    /**\n     * @hidden\n     */\n    readonly gradientId: string;\n    /**\n     * @hidden\n     */\n    id: string;\n    /**\n     * @hidden\n     */\n    direction: string;\n    /**\n     * Defines whether the alpha slider will be displayed.\n     */\n    opacity: boolean;\n    /**\n     * Sets the disabled state of the ColorGradient.\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the ColorGradient.\n     */\n    readonly: boolean;\n    /**\n     * Specifies whether the ColorGradient should display a 'Clear color' button.\n     */\n    clearButton: boolean;\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    value: string;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * Fires each time the user selects a new color.\n     */\n    valueChange: EventEmitter<string>;\n    /**\n     * @hidden\n     */\n    backgroundColor: string;\n    /**\n     * @hidden\n     *\n     * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.\n     * The values are initially set in `ngOnInit` or in `ngOnChanges` and are\n     * updated on moving the drag handle or the sliders.\n     */\n    hsva: HSVA;\n    /**\n     * Indicates whether the ColorGradient or any of its content is focused.\n     */\n    readonly isFocused: boolean;\n    /**\n     * @hidden\n     */\n    readonly alphaSliderValue: number;\n    /**\n     * Specifies the output format of the ColorGradientComponent.\n     * The input value may be in a different format. However, it will be parsed into the output `format`\n     * after the component processes it.\n     *\n     * The supported values are:\n     * * (Default) `rgba`\n     * * `hex`\n     */\n    format: OutputFormat;\n    private _value;\n    private _tabindex;\n    private listeners;\n    private dynamicRTLSubscription;\n    private alphaSlider;\n    private gradientWrapper;\n    private dragHandle;\n    private readonly gradientRect;\n    constructor(host: ElementRef, ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef, localizationService: LocalizationService);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the component.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     */\n    reset(): void;\n    /**\n     * @hidden\n     */\n    handleDragPress(args: KendoDragEvent): void;\n    /**\n     * @hidden\n     */\n    onHandleDrag(args: any): void;\n    /**\n     * @hidden\n     */\n    onHandleRelease(): void;\n    /**\n     * @hidden\n     */\n    changePosition(position: KendoDragEvent): void;\n    /**\n     * @hidden\n     */\n    handleHueSliderChange(hue: number): void;\n    /**\n     * @hidden\n     */\n    handleAlphaSliderChange(alpha: number): void;\n    /**\n     * @hidden\n     */\n    handleInputsValueChange(color: string): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private notifyNgChanged;\n    private notifyNgTouched;\n    private moveDragHandle;\n    private updateUI;\n    private handleValueChange;\n    private setDragHandleElementPosition;\n    private setAlphaSliderBackground;\n    private addEventListeners;\n}\n"]}