{"version":3,"file":"colorpicker.component.d.ts","sources":["colorpicker.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { PopupSettings, PreventableEvent, PaletteSettings, OutputFormat, ActiveColorClickEvent, ColorPickerView, GradientSettings } from './models';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).\n * Designed to replace the `<input type=\"color\">` HTML5 tag which is not widely supported in browsers.\n */\nexport declare class ColorPickerComponent implements OnDestroy, ControlValueAccessor {\n    private popupService;\n    /**\n     * @hidden\n     */\n    hostClasses: boolean;\n    /**\n     * @hidden\n     */\n    direction: string;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets what view the ColorPicker will render in the popup.\n     */\n    view: ColorPickerView;\n    /**\n     * Sets the read-only state of the ColorPicker.\n     */\n    readonly: boolean;\n    /**\n     * Sets the disabled state of the ColorPicker.\n     */\n    disabled: boolean;\n    /**\n     * Specifies the output format of the ColorPicker.\n     * The input value may be in a different format. However, it will be parsed into the output `format`\n     * after the component processes it.\n     *\n     * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.\n     *\n     * The supported values are:\n     * * `rgba` (default)\n     * * `hex`\n     * * [`name`](https://www.w3.org/wiki/CSS/Properties/color/keywords)\n     */\n    format: OutputFormat;\n    /**\n     * Specifies the value of the initially selected color.\n     */\n    value: string;\n    /**\n     * Configures the popup of the ColorPicker.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Configures the palette that is displayed in the ColorPicker popup.\n     */\n    paletteSettings: PaletteSettings;\n    /**\n     * Configures the gradient that is displayed in the ColorPicker popup.\n     */\n    gradientSettings: GradientSettings;\n    /**\n     * Defines the name of an [existing icon in the Kendo UI theme]({% slug icons %}).\n     * Provide only the name of the icon without the `k-icon` or the `k-i-` prefixes.\n     * For example, `edit-tools` will be parsed to `k-icon k-i-edit-tools`.\n     */\n    icon: string;\n    /**\n     * A CSS class name which displays an icon in the ColorPicker button.\n     * `iconClass` is compatible with the `ngClass` syntax.\n     *\n     * Takes precedence over `icon` if both are defined.\n     */\n    iconClass: string | Array<string> | {\n        [key: string]: boolean;\n    };\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * Fires each time the value is changed.\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time ColorPicker is focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the ColorPicker is blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the left side of the ColorPicker wrapper is clicked.\n     * The event is triggered regardless of whether a ColorPicker icon is set or not.\n     *\n     * The [`ActiveColorClickEvent`]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.\n     */\n    activeColorClick: EventEmitter<ActiveColorClickEvent>;\n    /**\n     * Indicates whether the ColorPicker wrapper is focused.\n     */\n    isFocused: boolean;\n    /**\n     * Indicates whether the ColorPicker popup is open.\n     */\n    readonly isOpen: boolean;\n    /**\n     * @hidden\n     */\n    readonly iconStyles: string | string[] | {\n        [key: string]: boolean;\n    };\n    /**\n     * Provides a reference to a container element inside the component markup.\n     * The container element references the location of the appended popup&mdash;\n     * for example, inside the component markup.\n     */\n    container: ViewContainerRef;\n    private wrapper;\n    private popupTemplate;\n    private palette;\n    private popupRef;\n    private _value;\n    private _tabindex;\n    private _popupSettings;\n    private _paletteSettings;\n    private _gradientSettings;\n    private dynamicRTLSubscription;\n    constructor(popupService: PopupService, localizationService: LocalizationService);\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperClick(): void;\n    /**\n     * @hidden\n     */\n    handleActiveColorClick(): void;\n    /**\n     * Focuses the wrapper of the ColorPicker.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperFocus(): void;\n    /**\n     * Blurs the ColorPicker.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    handleWrapperBlur(): void;\n    /**\n     * Clears the color value of the ColorPicker.\n     */\n    reset(): void;\n    /**\n     * Toggles the popup of the ColorPicker.\n     * Does not trigger the `open` and `close` events of the component.\n     *\n     * @param open An optional parameter. Specifies whether the popup will be opened or closed.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * @hidden\n     */\n    handleValueChange(color: string, closePopup: boolean): void;\n    /**\n     * @hidden\n     */\n    handlePopupBlur(event: FocusEvent): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    handleWrapperKeyDown(event: any): void;\n    /**\n     * @hidden\n     */\n    handlePopupKeyDown(keyCode: number): void;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private toggleWithEvents;\n    private openPopup;\n    private closePopup;\n    private notifyNgTouched;\n    private notifyNgChanged;\n}\n"]}