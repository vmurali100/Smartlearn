{"version":3,"file":"formfield.component.d.ts","sources":["formfield.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, ElementRef, Renderer2, QueryList } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ShowOptions } from './models/show-options';\nimport { ErrorComponent } from './error.component';\nimport { HintComponent } from './hint.component';\nimport { Orientation } from './models/orientation';\n/**\n * Specifies a container for form-bound controls (Kendo controls or native HTML controls).\n * Applies styling and behavior rules.\n */\nexport declare class FormFieldComponent implements AfterViewInit {\n    private renderer;\n    private localizationService;\n    hostClass: boolean;\n    /**\n     * @hidden\n     */\n    direction: string;\n    readonly errorClass: boolean;\n    readonly disabledClass: boolean;\n    formControls: QueryList<NgControl>;\n    controlElementRefs: QueryList<ElementRef>;\n    kendoInput: any;\n    errorChildren: QueryList<ErrorComponent>;\n    hintChildren: QueryList<HintComponent>;\n    /**\n     *\n     * Specifies when the Hint messages will be shown.\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is\n     * `valid` or `untouched` and `pristine`.\n     * * `always`&mdash;Allows full control over the visibility of the hints.\n     *\n     */\n    showHints: ShowOptions;\n    /**\n     * Specifies the layout orientation of the form field.\n     *\n     * * The possible values are:\n     *\n     * * (Default) `vertical`\n     * * `horizontal`\n     */\n    orientation: Orientation;\n    /**\n     * Specifies when the Error messages will be shown.\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is\n     * `invalid` and `touched` or `dirty`.\n     * * `always`&mdash;Allows full control over the visibility of the errors.\n     *\n     */\n    showErrors: ShowOptions;\n    /**\n     * @hidden\n     */\n    readonly horizontal: boolean;\n    /**\n     * @hidden\n     */\n    readonly hasHints: boolean;\n    /**\n     * @hidden\n     */\n    readonly hasErrors: boolean;\n    private control;\n    private subscriptions;\n    private rtl;\n    constructor(renderer: Renderer2, localizationService: LocalizationService);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    private disabledKendoInput;\n    private disabledControl;\n    private disabledElement;\n    private validateFormControl;\n    private isControlGroup;\n    private isRadioControl;\n    private updateDescription;\n    private findControlElements;\n    private generateDescriptionIds;\n    private showHintsInitial;\n    private showErrorsInitial;\n    private setDescription;\n}\n"]}