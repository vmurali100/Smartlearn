{"version":3,"file":"switch.component.d.ts","sources":["switch.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, Renderer2, EventEmitter, OnInit, OnDestroy, ChangeDetectorRef, NgZone, Injector } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { Subscription } from \"rxjs\";\n/**\n * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).\n */\nexport declare class SwitchComponent implements ControlValueAccessor, OnInit, OnDestroy {\n    private renderer;\n    private hostElement;\n    private localizationService;\n    private injector;\n    private changeDetector;\n    private ngZone;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Changes the **On** label so that it can be localized ([see example]({% slug labels_switch %})).\n     */\n    onLabel: string;\n    /**\n     * Changes the **Off** label so that it can be localized ([see example]({% slug labels_switch %})).\n     */\n    offLabel: string;\n    /**\n     * Sets the current value of the Switch when it is initially displayed.\n     */\n    checked: boolean;\n    /**\n     * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).\n     */\n    disabled: boolean;\n    /**\n     * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).\n     */\n    readonly: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Fires each time the user focuses the `input` element.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the `input` element gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the user selects a new value.\n     */\n    valueChange: EventEmitter<any>;\n    wrapper: any;\n    direction: string;\n    readonly ieClass: boolean;\n    readonly ariaDisabled: boolean;\n    readonly ariaReadonly: boolean;\n    readonly hostClasses: boolean;\n    readonly switchOnClass: boolean;\n    readonly switchOffClass: boolean;\n    readonly disabledClass: boolean;\n    protected localizationChangeSubscription: Subscription;\n    protected isFocused: boolean;\n    protected control: NgControl;\n    constructor(renderer: Renderer2, hostElement: ElementRef, localizationService: LocalizationService, injector: Injector, changeDetector: ChangeDetectorRef, ngZone: NgZone);\n    /**\n     * @hidden\n     */\n    readonly onLabelMessage: string;\n    /**\n     * @hidden\n     */\n    readonly offLabelMessage: string;\n    protected ngChange: Function;\n    protected ngTouched: Function;\n    protected readonly isEnabled: boolean;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the Switch.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"switch.focus()\">Focus</button>\n     *  <kendo-switch #switch></kendo-switch>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the Switch.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    handleFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleBlur: () => void;\n    /**\n     * @hidden\n     */\n    writeValue(value: boolean): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    keyDownHandler(e: any): void;\n    /**\n     * @hidden\n     */\n    clickHandler(): void;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private changeValue;\n    private focused;\n}\n"]}