{"version":3,"file":"textbox.component.d.ts","sources":["textbox.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Subscription } from 'rxjs';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { ElementRef, EventEmitter, NgZone, ChangeDetectorRef, Injector, Renderer2, SimpleChanges } from '@angular/core';\nimport { IconShowOptions } from './models/icon-show-options';\nimport { TextBoxSuffixTemplateDirective } from './textbox-suffix.directive';\nimport { TextBoxPrefixTemplateDirective } from './textbox-prefix.directive';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nexport declare class TextBoxComponent implements ControlValueAccessor {\n    private localizationService;\n    private ngZone;\n    private changeDetector;\n    protected renderer: Renderer2;\n    private injector;\n    private hostElement;\n    /**\n     * Sets the `title` attribute of the `input` element of the TextBox.\n     */\n    title: string;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Specifies the `tabindex` of the TextBox.\n     */\n    tabindex: number;\n    /**\n     * Provides a value for the TextBox.\n     */\n    value: string;\n    /**\n     * Determines whether the whole value will be selected when the TextBox is clicked. Defaults to `true`.\n     */\n    selectOnFocus: boolean;\n    /**\n     * Specifies when the Success icon will be shown ([see example]({% slug validation_textbox %})).\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;The Success icon will be displayed when the component state is neither\n     * `invalid` nor `touched` or `dirty`.\n     * * `boolean`&mdash;The Success icon is displayed, if the condition given by the developer is met.\n     *\n     */\n    showSuccessIcon: IconShowOptions;\n    /**\n     * Specifies when the Error icon will be shown ([see example]({% slug validation_textbox %})).\n     *\n     * The possible values are:\n     *\n     * * (Default) `initial`&mdash;The Error icon will be displayed when the component state is\n     * `invalid` and `touched` or `dirty`.\n     * * `boolean`&mdash;The Error icon is displayed, if the condition given by the developer is met.\n     *\n     */\n    showErrorIcon: IconShowOptions;\n    /**\n     * Specifies whether a Clear button will be rendered.\n     */\n    clearButton: boolean;\n    /**\n     * Sets a custom icon that will be rendered instead of the default one for a valid user input.\n     */\n    successIcon: string;\n    /**\n     * Sets a custom icon that will be rendered instead of the default one for invalid user input.\n     */\n    errorIcon: string;\n    /**\n     * Sets a custom icon that will be rendered instead of the default one.\n     */\n    clearButtonIcon: string;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * The hint, which is displayed when the component is empty.\n     */\n    placeholder: string;\n    /**\n     * Fires each time the value is changed&mdash;\n     * when the component is blurred or the value is cleared through the **Clear** button\n     * ([see example]({% slug overview_textbox %}#toc-events)).\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time the user focuses the `input` element.\n     */\n    inputFocus: EventEmitter<any>;\n    /**\n     * Fires each time the `input` element gets blurred.\n     */\n    inputBlur: EventEmitter<any>;\n    /**\n     * Fires each time the user focuses the TextBox component.\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textbox (focus)=\"handleFocus()\"></kendo-textbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log('Component is isFocused');\n     *   }\n     * }\n     * ```\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the TextBox component gets blurred.\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-textbox (blur)=\"handleBlur()\"></kendo-textbox>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log('Component is blurred');\n     *   }\n     * }\n     * ```\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Represents the visible `input` element of the TextBox.\n     */\n    input: ElementRef;\n    /**\n     * @hidden\n     */\n    suffixTemplate: TextBoxSuffixTemplateDirective;\n    /**\n     * @hidden\n     */\n    prefixTemplate: TextBoxPrefixTemplateDirective;\n    readonly disabledClass: boolean;\n    hostClass: boolean;\n    isFocused: boolean;\n    direction: string;\n    /**\n     * @hidden\n     */\n    showClearButton: boolean;\n    protected control: NgControl;\n    protected subscriptions: Subscription;\n    private clearButtonClicked;\n    private _isFocused;\n    private focusChangedProgrammatically;\n    constructor(localizationService: LocalizationService, ngZone: NgZone, changeDetector: ChangeDetectorRef, renderer: Renderer2, injector: Injector, hostElement: ElementRef);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the TextBox.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"input.focus()\">Focus the input</button>\n     *  <kendo-textbox #input></kendo-textbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the TextBox.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    handleInputFocus: () => void;\n    /**\n     * @hidden\n     */\n    handleInputBlur: () => void;\n    /**\n     * @hidden\n     */\n    handleInput: (ev: any) => void;\n    /**\n     * @hidden\n     */\n    clearTitle(): string;\n    /**\n     * @hidden\n     */\n    checkClearButton(): void;\n    /**\n     * @hidden\n     */\n    clearValue(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: string): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    showErrorsInitial(): boolean;\n    /**\n     * @hidden\n     */\n    private showSuccessInitial;\n    /**\n     * @hidden\n     */\n    readonly successIconClasses: string;\n    /**\n     * @hidden\n     */\n    readonly errorIconClasses: string;\n    /**\n     * @hidden\n     */\n    readonly clearButtonClasses: string;\n    /**\n     * @hidden\n     */\n    readonly hasErrors: boolean;\n    /**\n     * @hidden\n     */\n    readonly isSuccessful: boolean;\n    private ngChange;\n    private ngTouched;\n    private readonly isDisabled;\n    private setSelection;\n    private selectAll;\n    private updateValue;\n    private handleBlur;\n}\n"]}