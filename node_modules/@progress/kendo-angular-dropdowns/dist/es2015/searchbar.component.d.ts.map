{"version":3,"file":"searchbar.component.d.ts","sources":["searchbar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Renderer2, EventEmitter, ElementRef, OnChanges, OnInit, OnDestroy } from '@angular/core';\nimport { Direction } from './direction';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * @hidden\n */\nexport declare class SearchBarComponent implements OnChanges, OnInit, OnDestroy {\n    private localization;\n    direction: Direction;\n    id: string;\n    listId: string;\n    tagListId: string;\n    activeDescendant: string;\n    noDataLabel: string;\n    disabled: boolean;\n    readonly: boolean;\n    tabIndex: number;\n    popupOpen: boolean;\n    role: string;\n    userInput: string;\n    suggestedText: string;\n    valueChange: EventEmitter<any>;\n    onBlur: EventEmitter<any>;\n    onFocus: EventEmitter<any>;\n    onClick: EventEmitter<any>;\n    onNavigate: EventEmitter<any>;\n    input: ElementRef;\n    searchBarClass: boolean;\n    readonly value: string;\n    placeholder: string;\n    private _userInput;\n    private _previousValue;\n    private _placeholder;\n    private renderer;\n    private localizationChangeSubscription;\n    constructor(localization: LocalizationService, renderer: Renderer2);\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngOnDestroy(): void;\n    private writeInputValue;\n    private setInputSelection;\n    handleInput(event: any): void;\n    handleFocus(event: any): void;\n    handleBlur(event: any): void;\n    handleKeydown(event: any): void;\n    focus(): void;\n    blur(): void;\n    setInputSize(): void;\n}\n"]}