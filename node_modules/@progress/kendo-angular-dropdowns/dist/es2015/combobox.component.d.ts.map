{"version":3,"file":"combobox.component.d.ts","sources":["combobox.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, TemplateRef, EventEmitter, ViewContainerRef, OnDestroy, OnChanges, SimpleChange, ChangeDetectorRef, NgZone, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { SearchBarComponent } from './searchbar.component';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { GroupTemplateDirective } from './templates/group-template.directive';\nimport { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';\nimport { PopupSettings } from './popup-settings';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { SelectionService } from './selection.service';\nimport { NavigationService } from './navigation.service';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { Observable } from 'rxjs';\nimport { PreventableEvent } from './common/preventable-event';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { FilterableDropDownComponentBase } from './filterable-base.component';\nimport { ItemDisabledFn } from './common/item-disabled';\nimport { DataService } from './data.service';\nimport { ListComponent } from './list.component';\nimport { VirtualizationSettings } from './virtualization-settings';\nimport { PageChangeEvent } from './common/page-change-event';\n/**\n * @hidden\n */\nexport declare const COMBOBOX_VALUE_ACCESSOR: any;\n/**\n * Represents the [Kendo UI ComboBox component for Angular]({% slug overview_combobox %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-combobox [data]=\"listItems\">\n *  </kendo-combobox>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nexport declare class ComboBoxComponent implements ControlValueAccessor, OnDestroy, OnChanges, FilterableDropDownComponentBase {\n    private localization;\n    private popupService;\n    private selectionService;\n    private navigationService;\n    private disabledItemsService;\n    private dataService;\n    private _zone;\n    private cdr;\n    private renderer;\n    private hostElement;\n    private touchEnabled;\n    readonly width: any;\n    readonly height: any;\n    text: any;\n    /**\n     * @hidden\n     */\n    togglePopup(open: boolean): void;\n    readonly activeDescendant: string;\n    readonly noDataLabel: string;\n    readonly clearTitle: string;\n    readonly appendTo: ViewContainerRef;\n    dataItem: any;\n    selected: any[];\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Specifies whether the ComboBox allows user-defined values that are not present in the dataset\n     * ([more information and examples]({% slug custom_values_combobox %})).\n     * Defaults to `false`.\n     */\n    allowCustom: boolean;\n    /**\n     * Sets the data of the ComboBox.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    data: any;\n    /**\n     * Sets the value of the ComboBox.\n     * It can either be of the primitive (string, numbers) or of the complex (objects) type.\n     * To define the type, use the `valuePrimitive` option.\n     *\n     * > All selected values which are not present in the dataset are considered custom values.\n     * > When the `Enter` key is pressed or the component loses focus, custom values get dismissed unless `allowCustom` is set to `true`.\n     */\n    value: any;\n    /**\n     * Sets the data item field that represents the item text.\n     * If the data contains only primitive values, do not define it.\n     */\n    textField: string;\n    /**\n     * Sets the data item field that represents the item value.\n     * If the data contains only primitive values, do not define it.\n     */\n    valueField: string;\n    /**\n     * Specifies the type of the selected value.\n     * If set to `true`, the selected value has to be of the primitive type\n     * ([more information and example]({% slug valuebinding_combobox %}#toc-primitive-values-from-object-fields)).\n     */\n    valuePrimitive: boolean;\n    /**\n     * A user-defined callback which returns normalized custom values.\n     * Typically used when the data items are different from type `string`.\n     * @param { Any } value - The custom value defined by the user.\n     * @returns { Any }\n     *\n     * @example\n     * ```ts\n     * import { map } from 'rxjs/operators';\n     *\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *   <kendo-combobox\n     *       [allowCustom]=\"true\"\n     *       [data]=\"listItems\"\n     *       [textField]=\"'text'\"\n     *       [valueField]=\"'value'\"\n     *       [valueNormalizer]=\"valueNormalizer\"\n     *       (valueChange)=\"onValueChange($event)\"\n     *   >\n     *   </kendo-combobox>\n     * `\n     * })\n     *\n     * class AppComponent {\n     *   public listItems: Array<{ text: string, value: number }> = [\n     *       { text: \"Small\", value: 1 },\n     *       { text: \"Medium\", value: 2 },\n     *       { text: \"Large\", value: 3 }\n     *   ];\n     *\n     *   public onValueChange(value) {\n     *       console.log(\"valueChange : \", value);\n     *   }\n     *\n     *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n     *      return { ProductID: null, ProductName: text };\n     *   }));\n     *\n     * }\n     * ```\n     */\n    valueNormalizer: (text: Observable<string>) => Observable<any>;\n    /**\n     * The hint that is displayed when the component is empty.\n     *\n     */\n    placeholder: string;\n    /**\n     * Configures the popup of the ComboBox.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n     * - `height: Number`&mdash;Sets the height of the popup container.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n     *\n     * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n     * > To set the height of the popup container, use `popupSettings.height`.\n     */\n    listHeight: number;\n    /**\n     * @hidden\n     */\n    iconClass: string;\n    /**\n     * Sets and gets the loading state of the ComboBox.\n     */\n    loading: boolean;\n    /**\n     * Enables the auto-completion of the text based on the first data item.\n     */\n    suggest: boolean;\n    /**\n     * If set to `true`, renders a button on hovering over the component.\n     * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n     */\n    clearButton: boolean;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Defines a Boolean function that is executed for each data item in the component\n     * ([see examples]({% slug disableditems_combobox %})). Determines whether the item will be disabled.\n     */\n    itemDisabled: ItemDisabledFn;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Enables the [filtering]({% slug filtering_combobox %}) functionality.\n     * If set to `true`, the component emits the `filterChange` event.\n     */\n    filterable: boolean;\n    /**\n     * Enables the [virtualization]({% slug virtualization_combobox %}) functionality.\n     */\n    virtual: boolean | VirtualizationSettings;\n    /**\n     * Fires each time the value is changed&mdash;\n     * when the component is blurred or the value is cleared through the **Clear** button\n     * ([see example]({% slug overview_combobox %}#toc-events)).\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time an item selection is changed\n     * ([see example]({% slug overview_combobox %}#toc-events)).\n     */\n    selectionChange: EventEmitter<any>;\n    /**\n     * Fires each time the user types in the input field.\n     * You can filter the source based on the passed filtration value\n     * ([see example]({% slug overview_combobox %}#toc-events)).\n     */\n    filterChange: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the user focuses the ComboBox.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the ComboBox gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    template: ItemTemplateDirective;\n    headerTemplate: HeaderTemplateDirective;\n    footerTemplate: FooterTemplateDirective;\n    noDataTemplate: NoDataTemplateDirective;\n    groupTemplate: GroupTemplateDirective;\n    fixedGroupTemplate: FixedGroupTemplateDirective;\n    container: ViewContainerRef;\n    popupTemplate: TemplateRef<any>;\n    searchbar: SearchBarComponent;\n    optionsList: ListComponent;\n    private wrapper;\n    widgetClasses: boolean;\n    readonly clearable: boolean;\n    readonly dir: any;\n    private _isFocused;\n    isFocused: boolean;\n    listBoxId: string;\n    optionPrefix: string;\n    popupWidth: string;\n    popupMinWidth: string;\n    popupRef: PopupRef;\n    noDataText: string;\n    protected onChangeCallback: Function;\n    protected onTouchedCallback: Function;\n    private valueSubscription;\n    private selectionSubscription;\n    private messagesTimeout;\n    private _filtering;\n    private _text;\n    private filterText;\n    private _open;\n    private _value;\n    private _previousDataItem;\n    private suggestedText;\n    private backspacePressed;\n    private _popupSettings;\n    private _virtualSettings;\n    private popupMouseDownHandler;\n    private customValueSubject;\n    private valueSubject;\n    private clearValueSubject;\n    private selectionSubject;\n    private direction;\n    private subs;\n    constructor(localization: LocalizationService, popupService: PopupService, selectionService: SelectionService, navigationService: NavigationService, disabledItemsService: DisabledItemsService, dataService: DataService, _zone: NgZone, cdr: ChangeDetectorRef, renderer: Renderer2, hostElement: ElementRef, touchEnabled: boolean);\n    ngOnInit(): void;\n    private createValueStream;\n    private attachStreams;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    /**\n     * Focuses the ComboBox.\n     */\n    focus(): void;\n    /**\n     * Blurs the ComboBox.\n     */\n    blur(): void;\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup,\n     * the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * Resets the value of the ComboBox.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    reset(): void;\n    /**\n     * @hidden\n     *\n     * Used by the TextBoxContainer to determine if the floating label\n     * should be rendered in the input when the component is not focused.\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    clearValue(event: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly buttonClasses: any;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    protected verifySettings(newValue: any): void;\n    protected setState(): void;\n    private updateState;\n    private clearState;\n    private resetSelection;\n    private firstFocusableIndex;\n    private findIndexPredicate;\n    protected prop(field: string, usePrimitive: boolean): any;\n    protected findDataItem({ primitive, valueField, value }: {\n        primitive: boolean;\n        valueField: string;\n        value: any;\n    }): {\n        dataItem: any;\n        index: number;\n    };\n    protected search(text: any, startFrom?: number): void;\n    /**\n     * @hidden\n     */\n    getSuggestion(): string;\n    protected navigate(index: number): void;\n    /**\n     * @hidden\n     */\n    handleNavigate(event: any): void;\n    protected handleEnter(): void;\n    /**\n     * @hidden\n     */\n    handleBlur(): void;\n    /**\n     * @hidden\n     */\n    handleEscape(): void;\n    /**\n     * @hidden\n     */\n    handleNavigationOpen(): void;\n    /**\n     * @hidden\n     */\n    searchBarChange(text: string): void;\n    /**\n     * @hidden\n     */\n    handleFocus(): void;\n    /**\n     * @hidden\n     */\n    pageChange(event: PageChangeEvent): void;\n    protected change(candidate: any, isCustom?: boolean): void;\n    protected emitSelectionChange(dataItem: any): void;\n    protected emitValueChange(): void;\n    /**\n     * @hidden\n     */\n    selectClick(): void;\n    readonly listContainerClasses: Object;\n    private readonly focusedItemText;\n    /**\n     * Focuses the first match when there's text in the input field, but no focused item.\n     */\n    private restoreItemFocus;\n    private useSuggestion;\n    private destroyPopup;\n    private createPopup;\n    private _toggle;\n    private triggerPopupEvents;\n    private clearFilter;\n    private setMessages;\n    private createSelectionStream;\n}\n"]}