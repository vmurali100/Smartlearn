{"version":3,"file":"dropdownlist.component.d.ts","sources":["dropdownlist.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Renderer2, ElementRef, EventEmitter, ViewContainerRef, OnDestroy, OnChanges, SimpleChange, NgZone, TemplateRef, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { PopupSettings } from './popup-settings';\nimport { SelectionService } from './selection.service';\nimport { NavigationService } from './navigation.service';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { GroupTemplateDirective } from './templates/group-template.directive';\nimport { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';\nimport { ValueTemplateDirective } from './templates/value-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { Direction } from './direction';\nimport { PreventableEvent } from './common/preventable-event';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { ItemDisabledFn } from './common/item-disabled';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { DataService } from './data.service';\nimport { FilterableDropDownComponentBase } from './filterable-base.component';\nimport { ListComponent } from './list.component';\nimport { VirtualizationSettings } from './virtualization-settings';\nimport { PageChangeEvent } from './common/page-change-event';\n/**\n * @hidden\n */\nexport declare const DROPDOWNLIST_VALUE_ACCESSOR: any;\n/**\n * Represents the [Kendo UI DropDownList component for Angular]({% slug overview_ddl %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownlist [data]=\"listItems\">\n *  </kendo-dropdownlist>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nexport declare class DropDownListComponent implements ControlValueAccessor, OnDestroy, OnChanges, OnInit, FilterableDropDownComponentBase {\n    private localization;\n    private popupService;\n    private selectionService;\n    private navigationService;\n    private disabledItemsService;\n    private dataService;\n    private _zone;\n    private renderer;\n    private hostElement;\n    private cdr;\n    touchEnabled: boolean;\n    readonly width: any;\n    readonly height: any;\n    readonly widgetTabIndex: number;\n    readonly ariaExpanded: boolean;\n    readonly ariaOwns: string;\n    readonly ariaActivedescendant: string;\n    readonly noDataLabel: string;\n    readonly appendTo: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * @hidden\n     */\n    iconClass: string;\n    /**\n     * Sets and gets the loading state of the DropDownList.\n     */\n    loading: boolean;\n    /**\n     * Sets the data of the DropDownList.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    data: any;\n    /**\n     * Sets the value of the DropDownList.\n     * It can either be of the primitive (string, numbers) or of the complex (objects) type.\n     * To define the type, use the `valuePrimitive` option.\n     *\n     * > All selected values which are not present in the source are ignored.\n     */\n    value: any;\n    /**\n     * Sets the data item field that represents the item text.\n     * If the data contains only primitive values, do not define it.\n     */\n    textField: string;\n    /**\n     * Sets the data item field that represents the item value.\n     * If the data contains only primitive values, do not define it.\n     */\n    valueField: string;\n    /**\n     * Configures the popup of the DropDownList.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n     * - `height: Number`&mdash;Sets the height of the popup container.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets the height of the options list. By default, `listHeight` is 200px.\n     *\n     * > The `listHeight` property affects only the list of options and not the whole popup container.\n     * > To set the height of the popup container, use `popupSettings.height`.\n     */\n    listHeight: number;\n    /**\n     * Sets the text of the default empty item. The type of the defined value has to match the data type.\n     */\n    defaultItem: any;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Defines a Boolean function that is executed for each data item in the component\n     * ([see examples]({% slug disableditems_ddl %})). Determines whether the item will be disabled.\n     */\n    itemDisabled: ItemDisabledFn;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.\n     */\n    filterable: boolean;\n    /**\n     * Enables the [virtualization]({% slug virtualization_ddl %}) functionality.\n     */\n    virtual: boolean | VirtualizationSettings;\n    /**\n     * Enables a case-insensitive search. When filtration is disabled, use this option.\n     */\n    ignoreCase: boolean;\n    /**\n     * Sets the delay before an item search is performed. When filtration is disabled, use this option.\n     */\n    delay: number;\n    /**\n     * Specifies the type of the selected value\n     * ([more information and example]({% slug valuebinding_ddl %}#toc-primitive-values-from-object-fields)).\n     * If set to `true`, the selected value has to be of a primitive value.\n     */\n    valuePrimitive: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Fires each time the value is changed ([see example]({% slug overview_ddl %}#toc-events)).\n     */\n    valueChange: EventEmitter<any>;\n    /**\n     * Fires each time the user types in the input field\n     * ([see example]({% slug overview_ddl %}#toc-events)).\n     * You can filter the source based on the passed filtration value.\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n    filterChange: EventEmitter<any>;\n    /**\n     * Fires each time the item selection is changed\n     * ([see example]({% slug overview_ddl %}#toc-events)).\n     */\n    selectionChange: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open\n     * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close\n     * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the user focuses the DropDownList.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the DropDownList gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    itemTemplate: ItemTemplateDirective;\n    groupTemplate: GroupTemplateDirective;\n    fixedGroupTemplate: FixedGroupTemplateDirective;\n    valueTemplate: ValueTemplateDirective;\n    headerTemplate: HeaderTemplateDirective;\n    footerTemplate: FooterTemplateDirective;\n    noDataTemplate: NoDataTemplateDirective;\n    container: ViewContainerRef;\n    popupTemplate: TemplateRef<any>;\n    wrapper: ElementRef<HTMLSpanElement>;\n    optionsList: ListComponent;\n    /**\n     * @hidden\n     */\n    blurComponent(): void;\n    /**\n     * @hidden\n     */\n    blurFilterInput(): void;\n    /**\n     * @hidden\n     */\n    focusComponent(): void;\n    /**\n     * @hidden\n     */\n    keydown(event: any): void;\n    /**\n     * @hidden\n     */\n    keypress(event: any): void;\n    /**\n     * @hidden\n     */\n    click(): void;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    widgetClasses: boolean;\n    readonly dir: string;\n    groupIndices: any[];\n    listBoxId: string;\n    optionPrefix: string;\n    valueLabelId: string;\n    filterText: string;\n    private _isFocused;\n    isFocused: boolean;\n    direction: Direction;\n    dataItem: any;\n    popupRef: PopupRef;\n    noDataText: string;\n    protected onTouchedCallback: Function;\n    protected onChangeCallback: Function;\n    private popupMouseDownHandler;\n    private word;\n    private last;\n    private typingTimeout;\n    private navigationSubscription;\n    private enterSubscription;\n    private escSubscription;\n    private openSubscription;\n    private closeSubscription;\n    private filterFocused;\n    private filterBlurred;\n    private wrapperFocused;\n    private wrapperBlurred;\n    private componentBlurredSubscription;\n    private filterBlurredSubscription;\n    private selectionSubscription;\n    private _value;\n    private _open;\n    private _previousDataItem;\n    private text;\n    private _popupSettings;\n    private _virtualSettings;\n    private localizationChangesSubscription;\n    private messagesTimeout;\n    constructor(localization: LocalizationService, popupService: PopupService, selectionService: SelectionService, navigationService: NavigationService, disabledItemsService: DisabledItemsService, dataService: DataService, _zone: NgZone, renderer: Renderer2, hostElement: ElementRef, cdr: ChangeDetectorRef, touchEnabled: boolean);\n    ngOnInit(): void;\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    onFilterFocus(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(_changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    /**\n     * Focuses the DropDownList.\n     */\n    focus(): void;\n    /**\n     * Blurs the DropDownList.\n     */\n    blur(): void;\n    /**\n     * Toggles the visibility of the popup\n     * ([see example]({% slug openstate_ddl %}#toc-setting-the-initially-opened-component)).\n     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open?: boolean): void;\n    private _toggle;\n    private triggerPopupEvents;\n    /**\n     * @hidden\n     */\n    togglePopup(open: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * Resets the value of the DropDownList.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    reset(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly buttonClasses: any;\n    /**\n     * @hidden\n     */\n    readonly listContainerClasses: Object;\n    /**\n     * @hidden\n     */\n    readonly isDisabledDefaultItem: boolean;\n    /**\n     * @hidden\n     */\n    getText(): any;\n    /**\n     * @hidden\n     */\n    getDefaultItemText(): any;\n    private createPopup;\n    private destroyPopup;\n    private updateState;\n    private clearState;\n    private resetSelection;\n    private onSelectionChange;\n    private subscribeEvents;\n    private unsubscribeEvents;\n    private itemFromEvent;\n    private currentOrDefault;\n    private firstFocusableIndex;\n    private handleEnter;\n    private handleEscape;\n    private clearFilter;\n    protected verifySettings(newValue: any): void;\n    protected componentBlur(): void;\n    /**\n     * @hidden\n     */\n    onMouseDown(event: any): void;\n    protected onKeyPress(event: any): void;\n    protected search(): void;\n    protected selectNext(): void;\n    private emitChange;\n    protected navigate(index: number): void;\n    protected prop(field: string, usePrimitive: boolean): any;\n    protected findDataItem({ primitive, valueField, value }: {\n        primitive: boolean;\n        valueField: string;\n        value: any;\n    }): {\n        dataItem: any;\n        index: number;\n    };\n    protected setState(): void;\n    /**\n     * @hidden\n     */\n    handleFilter(event: any): void;\n    /**\n     * @hidden\n     */\n    pageChange(event: PageChangeEvent): void;\n    private setMessages;\n    private assignAriaDescribedBy;\n}\n"]}