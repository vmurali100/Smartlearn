{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { Renderer2, ElementRef, EventEmitter, ViewContainerRef, TemplateRef, OnDestroy, SimpleChange, OnChanges, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { SearchBarComponent } from './searchbar.component';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { GroupTemplateDirective } from './templates/group-template.directive';\nimport { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';\nimport { PopupSettings } from './popup-settings';\nimport { SelectionService } from './selection.service';\nimport { NavigationService, NavigationEvent } from './navigation.service';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { PreventableEvent } from './common/preventable-event';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { FilterableDropDownComponentBase } from './filterable-base.component';\nimport { ItemDisabledFn } from './common/item-disabled';\nimport { DataService } from './data.service';\nimport { ListComponent } from './list.component';\nimport { VirtualizationSettings } from './virtualization-settings';\nimport { PageChangeEvent } from './common/page-change-event';\n/**\n * @hidden\n */\nexport declare const AUTOCOMPLETE_VALUE_ACCESSOR: any;\n/**\n * Represents the [Kendo UI AutoComplete component for Angular]({% slug overview_autocomplete %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-autocomplete\n *      [data]=\"listItems\"\n *      [placeholder]=\"placeholder\"\n *  >\n * `\n * })\n * class AppComponent {\n *   public placeholder: string = 'Type \"it\" for suggestions';\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nexport declare class AutoCompleteComponent implements ControlValueAccessor, OnDestroy, OnChanges, FilterableDropDownComponentBase {\n    private localization;\n    private dataService;\n    private popupService;\n    private selectionService;\n    private navigationService;\n    private disabledItemsService;\n    private _zone;\n    private cdr;\n    private renderer;\n    readonly width: any;\n    readonly height: any;\n    readonly listContainerClasses: Object;\n    readonly suggestion: string;\n    readonly appendTo: ViewContainerRef;\n    dataItem: any;\n    /**\n     * Toggles the visibility of the popup.\n     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * @hidden\n     */\n    togglePopup(open: boolean): void;\n    readonly activeDescendant: string;\n    readonly noDataLabel: string;\n    readonly clearTitle: string;\n    /**\n     * Defines whether the first match from the suggestions list will be automatically focused.\n     * By default, `highlightFirst` is set to `true`.\n     */\n    highlightFirst: boolean;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets the data of the AutoComplete.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    data: any;\n    /**\n     * Sets the value of the AutoComplete.\n     */\n    value: any;\n    /**\n     * Specifies the `string` property of the data item that represents the item value.\n     * If the data contains only primitive values, do not define it.\n     */\n    valueField: string;\n    /**\n     * The hint which is displayed when the component is empty.\n     */\n    placeholder: string;\n    /**\n     * Configures the popup of the AutoComplete.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n     * - `height: Number`&mdash;Sets the height of the popup container.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n     *\n     * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n     * > To set the height of the popup container, use `popupSettings.height`.\n     */\n    listHeight: number;\n    /**\n     * Sets and gets the loading state of the AutoComplete.\n     */\n    loading: boolean;\n    /**\n     * @hidden\n     *\n     * If set to `true`, renders a button on hovering over the component.\n     * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.\n     */\n    clearButton: boolean;\n    /**\n     * Enables the auto-completion of the text based on the first data item.\n     */\n    suggest: boolean;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Defines a Boolean function that is executed for each data item in the component\n     * ([see examples]({% slug disableditems_autocomplete %})).\n     * Determines whether the item will be disabled.\n     */\n    itemDisabled: ItemDisabledFn;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Enables the [filtering]({% slug filtering_autocomplete %}) functionality.\n     * If set to `true`, the component emits the `filterChange` event.\n     */\n    filterable: boolean;\n    /**\n     * Enables the [virtualization]({% slug virtualization_autocomplete %}) functionality.\n     */\n    virtual: boolean | VirtualizationSettings;\n    /**\n     * Fires each time the value is changed&mdash;\n     * when the component is blurred or the value is cleared through the **Clear** button\n     * ([see example]({% slug overview_autocomplete %}#toc-events)).\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n    valueChange: EventEmitter<string>;\n    /**\n     * Fires each time the user types in the input field.\n     * You can filter the source based on the passed filtration value\n     * ([see example]({% slug overview_autocomplete %}#toc-events)).\n     */\n    filterChange: EventEmitter<string>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the user focuses the AutoComplete.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the AutoComplete gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    template: ItemTemplateDirective;\n    headerTemplate: HeaderTemplateDirective;\n    footerTemplate: FooterTemplateDirective;\n    noDataTemplate: NoDataTemplateDirective;\n    groupTemplate: GroupTemplateDirective;\n    fixedGroupTemplate: FixedGroupTemplateDirective;\n    container: ViewContainerRef;\n    popupTemplate: TemplateRef<any>;\n    searchbar: SearchBarComponent;\n    optionsList: ListComponent;\n    widgetClasses: boolean;\n    isFocused: boolean;\n    readonly isDisabled: boolean;\n    readonly dir: any;\n    text: string;\n    listBoxId: string;\n    optionPrefix: string;\n    popupRef: PopupRef;\n    noDataText: string;\n    protected onChangeCallback: Function;\n    protected onTouchedCallback: Function;\n    constructor(localization: LocalizationService, dataService: DataService, popupService: PopupService, selectionService: SelectionService, navigationService: NavigationService, disabledItemsService: DisabledItemsService, _zone: NgZone, cdr: ChangeDetectorRef, renderer: Renderer2, wrapper: ElementRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    /**\n     * Resets the value of the AutoComplete.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    reset(): void;\n    /**\n     * @hidden\n     */\n    clearValue(event: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Focuses the AutoComplete.\n     */\n    focus(): void;\n    /**\n     * Blurs the AutoComplete.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    protected emitChange(): void;\n    protected verifySettings(newValue: any): void;\n    protected search(text: any, startFrom?: number): void;\n    protected navigate(index: number): void;\n    /**\n     * @hidden\n     */\n    handleNavigate(event: any): void;\n    protected handleEnter(event: NavigationEvent): void;\n    protected handleEscape(): void;\n    /**\n     * @hidden\n     */\n    searchBarChange(text: string): void;\n    /**\n     * @hidden\n     */\n    handleFocus(): void;\n    /**\n     * @hidden\n     */\n    handleBlur(): void;\n    /**\n     * @hidden\n     */\n    pageChange(event: PageChangeEvent): void;\n    protected setState(newValue: any): void;\n    protected change(value: string): void;\n    private popupMouseDownHandler;\n    private _popupSettings;\n    private _virtualSettings;\n    private _open;\n    private _value;\n    private _previousValue;\n    private _filtering;\n    private suggestedText;\n    private backspacePressed;\n    private valueChangeSubscription;\n    private valueChangeSubject;\n    private changeSubscription;\n    private focusSubscription;\n    private navigationSubscription;\n    private enterSubscription;\n    private escSubscription;\n    private closeSubscription;\n    private localizationChangeSubscription;\n    private messagesTimeout;\n    private wrapper;\n    private _isFocused;\n    private direction;\n    private subscribeEvents;\n    private unsubscribeEvents;\n    private handleItemChange;\n    private handleItemFocus;\n    private createPopup;\n    private destroyPopup;\n    private _toggle;\n    private triggerPopupEvents;\n    private firstFocusableIndex;\n    private findIndexPredicate;\n    private setMessages;\n}\n"]}