{"version":3,"file":"multiselect.component.d.ts","sources":["multiselect.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { SearchBarComponent } from './searchbar.component';\nimport { Renderer2, ViewContainerRef, ElementRef, TemplateRef, OnDestroy, OnChanges, DoCheck, EventEmitter, AfterContentChecked, AfterViewInit, ChangeDetectorRef, KeyValueDiffers, NgZone, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SelectionService, SelectionEvent } from './selection.service';\nimport { PopupSettings } from './popup-settings';\nimport { NavigationService } from './navigation.service';\nimport { DisabledItemsService } from './disabled-items.service';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { CustomItemTemplateDirective } from './templates/custom-item-template.directive';\nimport { GroupTemplateDirective } from './templates/group-template.directive';\nimport { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { TagTemplateDirective } from './templates/tag-template.directive';\nimport { GroupTagTemplateDirective } from './templates/group-tag-template.directive';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { PreventableEvent } from './common/preventable-event';\nimport { RemoveTagEvent } from './common/remove-tag-event';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { FilterableDropDownComponentBase } from './filterable-base.component';\nimport { ItemDisabledFn } from './common/item-disabled';\nimport { DataService } from './data.service';\nimport { ListComponent } from './list.component';\nimport { VirtualizationSettings } from './virtualization-settings';\nimport { PageChangeEvent } from './common/page-change-event';\n/**\n * Represents the [Kendo UI MultiSelect component for Angular]({% slug overview_multiselect %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-multiselect [data]=\"listItems\">\n *  </kendo-multiselect>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nexport declare class MultiSelectComponent implements OnDestroy, OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit, FilterableDropDownComponentBase {\n    private localization;\n    private popupService;\n    private dataService;\n    private selectionService;\n    private navigationService;\n    private disabledItemsService;\n    private cdr;\n    private differs;\n    private renderer;\n    private hostElement;\n    private _zone;\n    private touchEnabled;\n    listBoxId: string;\n    tagListId: string;\n    tagPrefix: string;\n    optionPrefix: string;\n    popupRef: PopupRef;\n    text: string;\n    tags: any[];\n    focusedTagIndex: number;\n    noDataText: string;\n    /**\n     * Focuses the MultiSelect.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     */\n    onSearchBarFocus(): void;\n    /**\n     * Blurs the MultiSelect.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    onSearchBarBlur(): void;\n    /**\n     * @hidden\n     */\n    wrapperMousedown(event: any): void;\n    /**\n     * @hidden\n     */\n    onMouseDown(event: any): void;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    readonly appendTo: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Determines whether to close the options list of the MultiSelect after the item selection is finished\n     * ([see example]({% slug openstate_multiselect %}#toc-keeping-the-options-list-open-while-on-focus)).\n     * @default true\n     */\n    autoClose: boolean;\n    /**\n     * Sets and gets the loading state of the MultiSelect.\n     */\n    loading: boolean;\n    /**\n     * Sets the data of the MultiSelect.\n     *\n     * > The data has to be provided in an array-like list of items.\n     */\n    data: any[];\n    /**\n     * Sets the value of the MultiSelect. It can be either of the primitive (string, numbers) or of the complex (objects) type.\n     * To define the type, use the `valuePrimitive` option.\n     *\n     * > All selected values which are not present in the source are ignored.\n     */\n    value: any[];\n    /**\n     * Sets the data item field that represents the item value. If the data contains only primitive values, do not define it.\n     */\n    valueField: string;\n    /**\n     * Sets the data item field that represents the item text. If the data contains only primitive values, do not define it.\n     */\n    textField: string;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * The hint which is displayed when the component is empty.\n     * When the values are selected, it disappears.\n     */\n    placeholder: string;\n    /**\n     * Sets the disabled state of the component.\n     */\n    disabled: boolean;\n    /**\n     * Defines a Boolean function that is executed for each data item in the component\n     * ([see examples]({% slug disableditems_multiselect %})). Determines whether the item will be disabled.\n     */\n    itemDisabled: ItemDisabledFn;\n    /**\n     * Sets the read-only state of the component.\n     */\n    readonly: boolean;\n    /**\n     * Enables the [filtering]({% slug filtering_multiselect %}) functionality of the MultiSelect.\n     */\n    filterable: boolean;\n    /**\n     * Enables the [virtualization]({% slug virtualization_multiselect %}) functionality.\n     */\n    virtual: boolean | VirtualizationSettings;\n    /**\n     * Configures the popup of the MultiSelect.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.\n     * - `height: Number`&mdash;Sets the height of the popup container.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets the height of the suggestions list. By default, `listHeight` is 200px.\n     *\n     * > The `listHeight` property affects only the list of suggestions and not the whole popup container.\n     * > To set the height of the popup container, use `popupSettings.height`.\n     */\n    listHeight: number;\n    /**\n     * Specifies the type of the selected value.\n     * If set to `true`, the selected value has to be of the primitive type\n     * ([more information and example]({% slug valuebinding_multiselect %}#toc-primitive-values-from-object-fields)).\n     */\n    valuePrimitive: boolean;\n    /**\n     * If set to `true`, renders a button on hovering over the component.\n     * Clicking this button resets the value of the component to an empty array and triggers the `change` event.\n     */\n    clearButton: boolean;\n    /**\n     * A user-defined callback function which receives an array of selected data items and maps them to an array of tags.\n     *\n     * @param { Any[] } dataItems - The selected data items from the list.\n     * @returns { Any[] } - The tags that will be rendered by the component.\n     */\n    tagMapper: (tags: any) => any;\n    /**\n     * Specifies whether the MultiSelect allows user-defined values that are not present in the dataset\n     * ([more information and examples]({% slug custom_values_multiselect %})).\n     * Defaults to `false`.\n     */\n    allowCustom: boolean;\n    /**\n     * A user-defined callback function which returns normalized custom values.\n     * Typically used when the data items are different from type `string`.\n     *\n     * @param { Any } value - The custom value that is defined by the user.\n     * @returns { Any }\n     *\n     * @example\n     * ```ts\n     * import { map } from 'rxjs/operators';\n     *\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *   <kendo-multiselect\n     *       [allowCustom]=\"true\"\n     *       [data]=\"listItems\"\n     *       [textField]=\"'text'\"\n     *       [valueField]=\"'value'\"\n     *       [valueNormalizer]=\"valueNormalizer\"\n     *       (valueChange)=\"onValueChange($event)\"\n     *   >\n     *   </kendo-multiselect>\n     * `\n     * })\n     *\n     * class AppComponent {\n     *   public listItems: Array<{ text: string, value: number }> = [\n     *       { text: \"Small\", value: 1 },\n     *       { text: \"Medium\", value: 2 },\n     *       { text: \"Large\", value: 3 }\n     *   ];\n     *\n     *   public onValueChange(value) {\n     *       console.log(\"valueChange : \", value);\n     *   }\n     *\n     *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {\n     *      return {\n     *         value: Math.floor(Math.random() * (1000 - 100) + 1000), //generate unique valueField\n     *         text: text };\n     *   }));\n     *\n     * }\n     * ```\n     */\n    valueNormalizer: (text: Observable<string>) => Observable<any>;\n    /**\n     * Fires each time the user types in the input field.\n     * You can filter the source based on the passed filtration value.\n     */\n    filterChange: EventEmitter<string>;\n    /**\n     * Fires each time the value is changed&mdash;\n     * when the component is blurred or the value is cleared through the **Clear** button\n     * ([see example]({% slug overview_multiselect %}#toc-events)).\n     * When the value of the component is programmatically changed to `ngModel` or `formControl`\n     * through its API or form binding, the `valueChange` event is not triggered because it\n     * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n     */\n    valueChange: EventEmitter<any[]>;\n    /**\n     * Fires each time the popup is about to open\n     * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).\n     * This event is preventable. If you cancel it, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close\n     * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).\n     * This event is preventable. If you cancel it, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the user focuses the MultiSelect.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the MultiSelect gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time a tag is about to be removed.\n     * This event is preventable. If you cancel it, the tag will not be removed.\n     */\n    removeTag: EventEmitter<RemoveTagEvent>;\n    container: ViewContainerRef;\n    searchbar: SearchBarComponent;\n    popupTemplate: TemplateRef<any>;\n    wrapper: ElementRef;\n    optionsList: ListComponent;\n    template: ItemTemplateDirective;\n    customItemTemplate: CustomItemTemplateDirective;\n    groupTemplate: GroupTemplateDirective;\n    fixedGroupTemplate: FixedGroupTemplateDirective;\n    headerTemplate: HeaderTemplateDirective;\n    footerTemplate: FooterTemplateDirective;\n    tagTemplate: TagTemplateDirective;\n    groupTagTemplate: GroupTagTemplateDirective;\n    noDataTemplate: NoDataTemplateDirective;\n    widgetClasses: boolean;\n    readonly dir: string;\n    readonly disabledClass: boolean;\n    constructor(localization: LocalizationService, popupService: PopupService, dataService: DataService, selectionService: SelectionService, navigationService: NavigationService, disabledItemsService: DisabledItemsService, cdr: ChangeDetectorRef, differs: KeyValueDiffers, renderer: Renderer2, hostElement: ElementRef, _zone: NgZone, touchEnabled: boolean);\n    readonly listContainerClasses: any[];\n    readonly width: any;\n    readonly height: any;\n    readonly activeDescendant: string;\n    readonly noDataLabel: string;\n    readonly clearTitle: string;\n    /**\n     * @hidden\n     */\n    verifySettings(): void;\n    /**\n     * @hidden\n     */\n    change(event: SelectionEvent): void;\n    /**\n     * @hidden\n     */\n    setState(value: any): void;\n    /**\n     * @hidden\n     */\n    handleFilter(text: string): void;\n    /**\n     * @hidden\n     */\n    pageChange(event: PageChangeEvent): void;\n    /**\n     * @hidden\n     */\n    clearFilter(): void;\n    /**\n     * @hidden\n     */\n    handleNavigate(event: any): void;\n    /**\n     * @hidden\n     */\n    handleRemoveTag(tagData: any): void;\n    /**\n     * @hidden\n     */\n    clearAll(event: any): void;\n    /**\n     * @hidden\n     */\n    protected addCustomValue(text: string): void;\n    ngAfterContentChecked(): void;\n    ngDoCheck(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Toggles the visibility of the popup\n     * ([see example]({% slug openstate_multiselect %}#toc-setting-the-initially-opened-component)).\n     * If you use the `toggle` method to open or close the popup, the respective `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open?: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * Resets the value of the MultiSelect.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    reset(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: any): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    onTagMapperChange(): void;\n    protected prop(field: string, usePrimitive: boolean): any;\n    protected onChangeCallback: Function;\n    protected onTouchedCallback: Function;\n    private _placeholder;\n    private _open;\n    private _value;\n    private _popupSettings;\n    private _virtualSettings;\n    private _isFocused;\n    isFocused: boolean;\n    private selectedDataItems;\n    private popupMouseDownHandler;\n    private customValueSubject;\n    private customValueSubscription;\n    private observableSubscriptions;\n    private localizationChangeSubscription;\n    private messagesTimeout;\n    private direction;\n    private differ;\n    private valueChangeDetected;\n    private subscribeEvents;\n    private unsubscribeEvents;\n    private removeGroupTag;\n    private removeSingleTag;\n    private createCustomValueStream;\n    private handleItemChange;\n    private handleEnter;\n    private handleClose;\n    private handleEnd;\n    private handleHome;\n    private handleUp;\n    private handleBackspace;\n    private handleDelete;\n    private handleLeftKey;\n    private handleDownKey;\n    private handleRightKey;\n    private findIndex;\n    private searchTextAndFocus;\n    private closePopup;\n    private openPopup;\n    private togglePopup;\n    private triggerPopupEvents;\n    private _toggle;\n    private destroyPopup;\n    private createPopup;\n    private emitValueChange;\n    private getSelectedDataItems;\n    private resolveDataItemFromTags;\n    private firstFocusableIndex;\n    private nextTick;\n    private setMessages;\n}\n"]}