{"version":3,"file":"popup.component.d.ts","sources":["popup.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { AfterViewInit, ElementRef, EventEmitter, OnInit, OnChanges, OnDestroy, NgZone, Renderer2, TemplateRef } from '@angular/core';\nimport { Align } from './models/align.interface';\nimport { Collision } from './models/collision.interface';\nimport { Offset } from './models/offset.interface';\nimport { Margin } from './models/margin.interface';\nimport { PositionMode } from './models/position-mode';\nimport { PopupAnimation } from './models/popup-animation.interface';\nimport { AlignService } from './services/align.service';\nimport { DOMService } from './services/dom.service';\nimport { PositionService } from './services/position.service';\nimport { ResizeService } from './services/resize.service';\nimport { ScrollableService } from './services/scrollable.service';\nimport { AnimationService } from './services/animation.service';\nimport { ResizeSensorComponent } from '@progress/kendo-angular-common';\n/**\n * Represents the [Kendo UI Popup component for Angular]({% slug overview_popup %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <button #anchor (click)=\"show=!show\">Toggle</button>\n *  <kendo-popup *ngIf=\"show\" [anchor]=\"anchor\">\n *      <strong>Popup content!</strong>\n *  </kendo-popup>\n * `\n * })\n * class AppComponent {\n *   public show: boolean = false;\n * }\n * ```\n */\nexport declare class PopupComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n    container: ElementRef;\n    private _alignService;\n    domService: DOMService;\n    private _positionService;\n    private _resizeService;\n    private _scrollableService;\n    private animationService;\n    private _renderer;\n    private _zone;\n    /**\n     * Controls the Popup animation. By default, the opening and closing animations\n     * are enabled ([see example]({% slug animations_popup %})).\n     */\n    animate: boolean | PopupAnimation;\n    /**\n     * Specifies the element that will be used as an anchor. The Popup opens next to that element.\n     * ([see example]({% slug alignmentpositioning_popup %}#toc-aligning-to-components)).\n     */\n    anchor: ElementRef;\n    /**\n     * Specifies the anchor pivot point\n     * ([see example]({% slug alignmentpositioning_popup %}#toc-positioning)).\n     */\n    anchorAlign: Align;\n    /**\n     * Configures the collision behavior of the Popup\n     * ([see example]({% slug viewportboundarydetection_popup %})).\n     */\n    collision: Collision;\n    /**\n     * Specifies the pivot point of the Popup\n     * ([see example]({% slug alignmentpositioning_popup %}#toc-positioning)).\n     */\n    popupAlign: Align;\n    /**\n     * Controls whether the component will copy the `anchor` font styles.\n     */\n    copyAnchorStyles: boolean;\n    /**\n     * Specifies a list of CSS classes that will be added to the internal\n     * animated element ([see example]({% slug appearance_popup %})).\n     *\n     * > To style the content of the Popup, use this property binding.\n     */\n    popupClass: string | Array<string> | Object;\n    /**\n     * Specifies the position mode of the component. By default, the Popup uses fixed positioning.\n     * To make the Popup acquire absolute positioning, set this option to `absolute`.\n     *\n     * > If you need to support mobile browsers with the zoom option,\n     * use the `absolute` positioning of the Popup.\n     *\n     * @example\n     * ```html\n     * <style>\n     *  .parent-content {\n     *     position: relative;\n     *     width: 200px;\n     *     height: 200px;\n     *     overflow: auto;\n     *     margin: 200px auto;\n     *     border: 1px solid red;\n     *  }\n     *  .content {\n     *     position: relative;\n     *     width: 100px;\n     *     height: 100px;\n     *     overflow: auto;\n     *     margin: 300px;\n     *     border: 1px solid blue;\n     *  }\n     *  .anchor {\n     *     position: absolute;\n     *     top: 200px;\n     *     left: 200px;\n     *  }\n     * </style>\n     * ```\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *   <div class=\"example-config\">\n     *      Position mode:\n     *      <label><input type=\"radio\" value=\"fixed\" [(ngModel)]=\"mode\" /> Fixed</label>\n     *      <label><input type=\"radio\" value=\"absolute\" [(ngModel)]=\"mode\" /> Absolute</label>\n     *   </div>\n     *   <div class=\"example-config\">\n     *       Append to\n     *       <label>\n     *           <input type=\"radio\" name=\"place\" [value]=\"1\" [(ngModel)]=\"checked\" />\n     *           Root component\n     *       </label>\n     *       <label>\n     *           <input type=\"radio\" name=\"place\" [value]=\"2\" [(ngModel)]=\"checked\" />\n     *           <span style=\"color: red\">Red Container</span>\n     *       </label>\n     *       <label>\n     *           <input type=\"radio\" name=\"place\" [value]=\"3\" [(ngModel)]=\"checked\" />\n     *           <span style=\"color: blue\">Blue Container</span>\n     *       </label>\n     *   </div>\n     *   <div class=\"example\">\n     *     <div class=\"parent-content\" [scrollLeft]=\"250\" [scrollTop]=\"230\">\n     *         <div class=\"content\" [scrollLeft]=\"170\" [scrollTop]=\"165\">\n     *           <button #anchor class=\"anchor\" (click)=\"show = !show\">Toggle</button>\n     *           <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 3\">\n     *             <ul>\n     *                 <li>Item1</li>\n     *                 <li>Item2</li>\n     *                 <li>Item3</li>\n     *             </ul>\n     *           </kendo-popup>\n     *           <span style=\"position: absolute; top: 400px; left: 400px\">Bottom/Right</span>\n     *         </div>\n     *         <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 2\">\n     *           <ul>\n     *               <li>Item1</li>\n     *               <li>Item2</li>\n     *               <li>Item3</li>\n     *           </ul>\n     *         </kendo-popup>\n     *         <span style=\"position: absolute; top: 600px; left: 600px\">Bottom/Right</span>\n     *     </div>\n     *     <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 1\">\n     *       <ul>\n     *           <li>Item1</li>\n     *           <li>Item2</li>\n     *           <li>Item3</li>\n     *       </ul>\n     *     </kendo-popup>\n     *   </div>\n     * `\n     * })\n     * class AppComponent {\n     *   public checked: number = 3;\n     *   public mode: string = 'absolute';\n     *   public show: boolean = true;\n     * }\n     * ```\n     */\n    positionMode: PositionMode;\n    /**\n     * Specifies the absolute position of the element\n     * ([see example]({% slug alignmentpositioning_popup %}#toc-aligning-to-absolute-points)).\n     * The Popup opens next to that point. The Popup pivot point is defined by the `popupAlign` configuration option.\n     * The boundary detection is applied by using the window viewport.\n     */\n    offset: Offset;\n    /**\n     * Specifies the margin value that will be added to the popup dimensions in pixels and leaves a blank space\n     * between the popup and the anchor ([see example]({% slug alignmentpositioning_popup %}#toc-adding-a-margin)).\n     */\n    margin: Margin;\n    /**\n     * Fires when the anchor is scrolled outside the screen boundaries.\n     * ([see example]({% slug closing_popup %}#toc-after-leaving-the-viewport)).\n     */\n    anchorViewportLeave: EventEmitter<any>;\n    /**\n     * Fires after the component is closed.\n     */\n    close: EventEmitter<any>;\n    /**\n     * Fires after the component is opened and the opening animation ends.\n     */\n    open: EventEmitter<any>;\n    /**\n     * Fires after the component is opened and the Popup is positioned.\n     */\n    positionChange: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    contentContainer: ElementRef;\n    /**\n     * @hidden\n     */\n    resizeSensor: ResizeSensorComponent;\n    /**\n     * @hidden\n     */\n    content: TemplateRef<any>;\n    private resolvedPromise;\n    private _currentOffset;\n    private animationSubscriptions;\n    private repositionSubscription;\n    private initialCheck;\n    constructor(container: ElementRef, _alignService: AlignService, domService: DOMService, _positionService: PositionService, _resizeService: ResizeService, _scrollableService: ScrollableService, animationService: AnimationService, _renderer: Renderer2, _zone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    onResize(): void;\n    private onAnimationStart;\n    private onAnimationEnd;\n    private currentOffset;\n    private setZIndex;\n    private reposition;\n    private position;\n    private onScroll;\n    private copyFontStyles;\n    private updateFixedClass;\n    private setContainerStyle;\n    private unsubscribeReposition;\n}\n"]}