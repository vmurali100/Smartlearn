{"version":3,"file":"virtualization.component.d.ts","sources":["virtualization.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, ElementRef, InjectionToken, OnChanges, OnDestroy, OnInit, AfterViewInit, Renderer2, NgZone } from '@angular/core';\nimport { Scrollable } from './models/scrollable.interface';\nimport { ScrollerService, PageAction, ScrollAction } from './services/scroller.service';\nimport { Observable } from 'rxjs';\n/**\n * @hidden\n */\nexport declare const SCROLLER_FACTORY_TOKEN: InjectionToken<string>;\n/**\n * @hidden\n */\nexport declare function DEFAULT_SCROLLER_FACTORY(observable: Observable<any>): ScrollerService;\n/**\n * @hidden\n */\nexport declare enum ScrollDirection {\n    Backward = 0,\n    Forward = 1\n}\n/**\n * @hidden\n */\nexport declare class VirtualizationComponent implements OnChanges, OnInit, OnDestroy, AfterViewInit, Scrollable {\n    container: ElementRef;\n    renderer: Renderer2;\n    zone: NgZone;\n    direction: 'horizontal' | 'vertical';\n    itemHeight: number;\n    itemWidth: number;\n    topOffset: number;\n    bottomOffset: number;\n    maxScrollDifference: number;\n    scrollOffsetSize: number;\n    scrollDuration: number;\n    skip: number;\n    take: number;\n    total: number;\n    activeIndexChange: EventEmitter<number>;\n    pageChange: EventEmitter<PageAction>;\n    scrollChange: EventEmitter<ScrollAction>;\n    totalSize: number;\n    readonly totalVertexLength: any;\n    readonly containerOffsetSize: number;\n    readonly containerScrollSize: number;\n    readonly containerScrollPosition: number;\n    private lastActiveIndex;\n    private resolvedPromise;\n    private scroller;\n    private rowHeightService;\n    private dispatcher;\n    private scrollSubscription;\n    private containerScrollSubscription;\n    private animationSubscription;\n    constructor(scrollerFactory: any, container: ElementRef, renderer: Renderer2, zone: NgZone);\n    readonly wrapperClasses: boolean;\n    readonly horizontalClass: boolean;\n    ngOnChanges(changes: any): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    getContainerProperty(propertyName: string): number;\n    activeIndex(): number;\n    itemIndex(offset: number): number;\n    itemOffset(index: number): number;\n    isIndexVisible(index: number): boolean;\n    isListScrolled(index: number): boolean;\n    scrollTo(value: number): void;\n    scrollToIndex(index: number): void;\n    scrollToBottom(): void;\n    animateToIndex(index: number): void;\n    scrollRange(indexOffset: number, direction: ScrollDirection): any;\n    scrollStep(start: number, end: number): number;\n    scroll$(): Observable<any>;\n    private initServices;\n    private createRowHeightService;\n    private emitActiveIndex;\n    private containerMaxScroll;\n    private getContainerScrollDirection;\n}\n"]}