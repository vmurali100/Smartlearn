{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, TemplateRef, ViewContainerRef, OnInit, OnChanges, OnDestroy, Renderer2, Injector } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { DateInputFormatPlaceholder } from '../dateinput/models/format-placeholder.model';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { PickerService } from '../common/picker.service';\nimport { TimePickerIncrementalSteps } from './models/incremental-steps.model';\nimport { TimeSelectorComponent } from './timeselector.component';\nimport { DateInputComponent } from '../dateinput/dateinput.component';\nimport { PopupSettings } from '../popup-settings.model';\nimport { PreventableEvent } from '../preventable-event';\n/**\n * Represents the [Kendo UI TimePicker component for Angular]({% slug overview_timepicker %}#toc-basic-usage).\n */\nexport declare class TimePickerComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy, Validator {\n    zone: NgZone;\n    localization: LocalizationService;\n    private cdr;\n    private popupService;\n    private element;\n    private renderer;\n    private injector;\n    private pickerService;\n    private intl;\n    private touchEnabled;\n    container: ViewContainerRef;\n    popupTemplate: TemplateRef<any>;\n    wrapper: ElementRef;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets or gets the `disabled` property of the TimePicker and\n     * determines whether the component is active\n     * ([see example]({% slug disabled_timepicker %})).\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the TimePicker\n     * ([see example]({% slug readonly_timepicker %}#toc-read-only-timepicker)).\n     */\n    readonly: boolean;\n    /**\n     * Sets the read-only state of the TimePicker input field\n     * ([see example]({% slug readonly_timepicker %}#toc-read-only-input)).\n     *\n     * > Note that if you set the [`readonly`]({% slug api_dateinputs_timepickercomponent %}#toc-readonly) property value to `true`,\n     * the input will be rendered in a read-only state regardless of the `readOnlyInput` value.\n     */\n    readOnlyInput: boolean;\n    /**\n     * Specifies the time format that is used to display the input value\n     * ([see example]({% slug formats_timepicker %})).\n     */\n    format: string;\n    /**\n     * Defines the descriptions of the format sections in the input field.\n     * For more information, refer to the article on\n     * [placeholders]({% slug placeholders_timepicker %}).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     * <div class=\"row example-wrapper\" style=\"min-height: 450px;\">\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Full-length format description:</p>\n     *    <kendo-timepicker formatPlaceholder=\"wide\"></kendo-timepicker>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Narrow-length format description:</p>\n     *    <kendo-timepicker formatPlaceholder=\"narrow\"></kendo-timepicker>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Short-length format description:</p>\n     *    <kendo-timepicker formatPlaceholder=\"short\"></kendo-timepicker>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Display defined format:</p>\n     *    <kendo-timepicker format=\"HH:mm:ss\" formatPlaceholder=\"formatPattern\"></kendo-timepicker>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Custom defined format descriptions</p>\n     *    <kendo-timepicker format=\"HH:mm:ss\"\n     *      [formatPlaceholder]=\"{ hour: 'H', minute: 'm', second: 's' }\"\n     *    ></kendo-timepicker>\n     *  </div>\n     * </div>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    formatPlaceholder: DateInputFormatPlaceholder;\n    /**\n     * Specifies the hint the TimePicker displays when its value is `null`.\n     * For more information, refer to the article on\n     * [placeholders]({% slug placeholders_timepicker %}).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-timepicker placeholder=\"Enter start...\"></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    placeholder: string;\n    /**\n     * Specifies the smallest valid time value\n     * ([see example]({% slug timeranges_timepicker %})).\n     */\n    min: Date;\n    /**\n     * Specifies the biggest valid time value\n     * ([see example]({% slug timeranges_timepicker %})).\n     */\n    max: Date;\n    /**\n     * Determines whether to display the **Cancel** button in the popup.\n     */\n    cancelButton: boolean;\n    /**\n     * Determines whether to display the **Now** button in the popup.\n     *\n     * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n     */\n    nowButton: boolean;\n    /**\n     * Configures the incremental steps of the TimePicker.\n     * For more information, refer to the article on\n     * [incremental steps]({% slug incrementalsteps_timepicker %}).\n     *\n     * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-timepicker format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent {\n     *   public steps = { hour: 2, minute: 15, second: 15 };\n     * }\n     * ```\n     *\n     */\n    steps: TimePickerIncrementalSteps;\n    /**\n     * Configures the popup of the TimePicker.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets or gets the `tabindex` property of the TimePicker.\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Sets the title of the input element of the TimePicker.\n     */\n    title: string;\n    /**\n     * Determines whether the built-in min or max validators are enforced when a form is being validated.\n     */\n    rangeValidation: boolean;\n    /**\n     * Specifies the value of the TimePicker component.\n     */\n    value: Date;\n    /**\n     * Fires each time the user selects a new value.\n     * For more information, refer to the section on\n     * [events]({% slug overview_timepicker %}#toc-events).\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Fires each time the user focuses the input element.\n     * For more information, refer to the section on\n     * [events]({% slug overview_timepicker %}#toc-events).\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-timepicker (focus)=\"handleFocus()\"></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log(\"Component is focused\");\n     *   }\n     * }\n     * ```\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the input element gets blurred.\n     * For more information, refer to the section on\n     * [events]({% slug overview_timepicker %}#toc-events).\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-timepicker (blur)=\"handleBlur()\"></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log(\"Component is blurred\");\n     *   }\n     * }\n     * ```\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event, the popup will remain closed.\n     * For more information, refer to the section on\n     * [events]({% slug overview_timepicker %}#toc-events).\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event, the popup will remain open.\n     * For more information, refer to the section on\n     * [events]({% slug overview_timepicker %}#toc-events).\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * @hidden\n     */\n    wrapperClasses: boolean;\n    /**\n     * @hidden\n     */\n    readonly disabledClass: boolean;\n    popupUID: string;\n    popupRef: PopupRef;\n    /**\n     * @hidden\n     */\n    readonly inputRole: string;\n    isActive: boolean;\n    show: boolean;\n    readonly input: DateInputComponent;\n    readonly timeSelector: TimeSelectorComponent;\n    private onControlChange;\n    private onControlTouched;\n    private onValidatorChange;\n    private resolvedPromise;\n    private timeRangeValidateFn;\n    private _min;\n    private _max;\n    private _popupSettings;\n    private _show;\n    private _steps;\n    private _value;\n    private _active;\n    private localizationChangeSubscription;\n    private pickerSubscriptions;\n    private windowBlurSubscription;\n    private control;\n    private domEvents;\n    constructor(zone: NgZone, localization: LocalizationService, cdr: ChangeDetectorRef, popupService: PopupService, element: ElementRef, renderer: Renderer2, injector: Injector, pickerService: PickerService, intl: IntlService, touchEnabled: boolean);\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    handleKeydown(event: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: Date): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any;\n    };\n    /**\n     * @hidden\n     */\n    registerOnValidatorChange(fn: Function): void;\n    /**\n     * Focuses the TimePicker component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timepicker.focus()\">Focus time picker</button>\n     *  <kendo-timepicker #timepicker></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the TimePicker component.\n     */\n    blur(): void;\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show - The state of the popup.\n     */\n    toggle(show?: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * @hidden\n     */\n    readonly appendTo: ViewContainerRef;\n    /**\n     * @hidden\n     */\n    handleChange(value: Date): void;\n    /**\n     * @hidden\n     */\n    handleReject(): void;\n    /**\n     * @hidden\n     */\n    handleInputChange(value: Date): void;\n    /**\n     * @hidden\n     */\n    handleMousedown(args: any): void;\n    /**\n     * @hidden\n     */\n    handleIconClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     */\n    readonly popupClasses: string[];\n    /**\n     * @hidden\n     */\n    normalizeTime(date: Date): Date;\n    /**\n     * @hidden\n     */\n    mergeTime(value: Date): Date;\n    private togglePopup;\n    private _toggle;\n    private focusInput;\n    private toggleFocus;\n    private verifyValue;\n    private verifyFormat;\n    private bindEvents;\n    private handleWindowBlur;\n    private handleFocus;\n    private handleBlur;\n    private blurComponent;\n}\n"]}