{"version":3,"file":"timeselector.component.d.ts","sources":["timeselector.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, QueryList, OnInit, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { TimeListComponent } from './timelist.component';\nimport { TimePickerDOMService } from './services/dom.service';\nimport { TimePickerIncrementalSteps } from './models/incremental-steps.model';\nimport { PickerService } from '../common/picker.service';\n/**\n * @hidden\n *\n * Represents the Kendo UI TimeSelector component for Angular.\n */\nexport declare class TimeSelectorComponent implements OnChanges, OnInit, OnDestroy {\n    localization: LocalizationService;\n    private cdr;\n    private element;\n    intl: IntlService;\n    dom: TimePickerDOMService;\n    private zone;\n    private renderer;\n    private pickerService?;\n    accept: ElementRef;\n    cancel: ElementRef;\n    now: ElementRef;\n    timeLists: QueryList<TimeListComponent>;\n    timeListWrappers: QueryList<ElementRef>;\n    /**\n     * @hidden\n     */\n    componentClass: boolean;\n    /**\n     * @hidden\n     */\n    readonly disabledClass: boolean;\n    /**\n     * Specifies the time format used to display the time list columns.\n     */\n    format: string;\n    /**\n     * Specifies the smallest valid time value.\n     */\n    min: Date;\n    /**\n     * Specifies the biggest valid time value.\n     */\n    max: Date;\n    /**\n     * Determines whether to display the **Cancel** button in the popup.\n     */\n    cancelButton: boolean;\n    /**\n     * Determines whether to display the **Set** button in the popup.\n     */\n    setButton: boolean;\n    /**\n     * Determines whether to display the **Now** button in the popup.\n     *\n     * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n     */\n    nowButton: boolean;\n    /**\n     * Sets or gets the `disabled` property of the TimeSelector and determines whether the component is active.\n     */\n    disabled: boolean;\n    /**\n     * Configures the incremental steps of the TimeSelector.\n     *\n     * The available options are:\n     * - `hour: Number`&mdash;Controls the incremental step of the hour value.\n     * - `minute: Number`&mdash;Controls the incremental step of the minute value.\n     * - `second: Number`&mdash;Controls the incremental step of the second value.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-timeselector format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timeselector>\n     * `\n     * })\n     * class AppComponent {\n     *   public steps = { hour: 2, minute: 15, second: 15 };\n     * }\n     * ```\n     *\n     * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n     */\n    steps: TimePickerIncrementalSteps;\n    /**\n     * Specifies the value of the TimeSelector component.\n     */\n    value: Date;\n    /**\n     * Fires each time the user selects a new value.\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Fires each time the user cancels the selected value.\n     */\n    valueReject: EventEmitter<any>;\n    dateFormatParts: any[];\n    isActive: boolean;\n    showNowButton: boolean;\n    current: Date;\n    activeListIndex: number;\n    private mergeValue;\n    private snapTime;\n    private _activeListIndex;\n    private _current;\n    private _steps;\n    private subscriptions;\n    private domEvents;\n    constructor(localization: LocalizationService, cdr: ChangeDetectorRef, element: ElementRef, intl: IntlService, dom: TimePickerDOMService, zone: NgZone, renderer: Renderer2, pickerService?: PickerService);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(_: any): void;\n    ngOnDestroy(): void;\n    /**\n     * Focuses the TimeSelector component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timeselector.focus()\">Focus time picker</button>\n     *  <kendo-timeselector #timeselector></kendo-timeselector>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the TimeSelector component.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    handleAccept(): void;\n    /**\n     * @hidden\n     */\n    handleNow(): void;\n    /**\n     * @hidden\n     */\n    handleReject(): void;\n    /**\n     * @hidden\n     */\n    handleFocus(args: any): void;\n    /**\n     * @hidden\n     */\n    handleListFocus(args: any): void;\n    /**\n     * @hidden\n     */\n    handleBlur(args: any): void;\n    /**\n     * @hidden\n     */\n    containsElement(element: any): boolean;\n    partStep(part: any): number;\n    private init;\n    private focusList;\n    private handleChange;\n    private hasActiveButton;\n    private hasSteps;\n    private intlChange;\n    private bindEvents;\n    private handleKeydown;\n    private emitBlur;\n    private emitFocus;\n    private listIndex;\n}\n"]}