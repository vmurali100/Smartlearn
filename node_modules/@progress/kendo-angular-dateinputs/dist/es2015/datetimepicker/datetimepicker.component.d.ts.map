{"version":3,"file":"datetimepicker.component.d.ts","sources":["datetimepicker.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, OnDestroy, ChangeDetectorRef, EventEmitter, NgZone, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Day } from '@progress/kendo-date-math';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PickerService } from '../common/picker.service';\nimport { DisabledDatesService } from '../calendar/services/disabled-dates.service';\nimport { CalendarComponent } from '../calendar/calendar.component';\nimport { TimeSelectorComponent } from '../timepicker/timeselector.component';\nimport { DateInputComponent } from '../dateinput/dateinput.component';\nimport { PreventableEvent } from '../preventable-event';\nimport { PopupSettings } from '../popup-settings.model';\nimport { DateInputFormatPlaceholder } from '../dateinput/models/format-placeholder.model';\nimport { DateInputIncrementalSteps } from '../dateinput/models/incremental-steps.model';\nimport { DateTimePickerActiveTab } from './models/active-tab.type';\nimport { CellTemplateDirective } from '../calendar/templates/cell-template.directive';\nimport { MonthCellTemplateDirective } from '../calendar/templates/month-cell-template.directive';\nimport { YearCellTemplateDirective } from '../calendar/templates/year-cell-template.directive';\nimport { DecadeCellTemplateDirective } from '../calendar/templates/decade-cell-template.directive';\nimport { CenturyCellTemplateDirective } from '../calendar/templates/century-cell-template.directive';\nimport { WeekNumberCellTemplateDirective } from '../calendar/templates/weeknumber-cell-template.directive';\nimport { HeaderTitleTemplateDirective } from '../calendar/templates/header-title-template.directive';\n/**\n * Represents the [Kendo UI DateTimePicker component for Angular]({% slug overview_datetimepicker %}).\n */\nexport declare class DateTimePickerComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor, Validator {\n    private popupService;\n    private intl;\n    private cdr;\n    private pickerService;\n    private ngZone;\n    private host;\n    private touchEnabled;\n    localization: LocalizationService;\n    private disabledDatesService;\n    /**\n     * @hidden\n     */\n    hostClasses: boolean;\n    /**\n     * @hidden\n     */\n    wrapper: ElementRef<HTMLSpanElement>;\n    /**\n     * @hidden\n     */\n    readonly input: DateInputComponent;\n    /**\n     * @hidden\n     */\n    readonly calendar: CalendarComponent;\n    /**\n     * @hidden\n     */\n    readonly timeSelector: TimeSelectorComponent;\n    /**\n     * Specifies the value of the DateTimePicker component.\n     *\n     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n     */\n    value: Date;\n    /**\n     * Specifies the date format for displaying the input value\n     * ([see example]({% slug formats_datetimepicker %})).\n     */\n    format: string;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the DateTimePicker.\n     */\n    tabindex: number;\n    /**\n     * Sets the dates of the DateTimePicker that will be disabled\n     * ([see example]({% slug disabled_dates_datetimepicker %})).\n     */\n    disabledDates: ((date: Date) => boolean) | Date[] | Day[];\n    /**\n     * Configures the popup settings of the DateTimePicker\n     * ([see example]({% slug datetimepicker_popup_options %}#toc-customizing-the-popup)).\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets the title of the input element of the DateTimePicker.\n     */\n    title: string;\n    /**\n     * Sets or gets the `disabled` property of the DateTimePicker and determines whether the component is active\n     * ([see example]({% slug disabled_datetimepicker %})).\n     */\n    disabled: boolean;\n    /**\n     * Sets the read-only state of the DateTimePicker\n     * ([see example]({% slug readonly_datetimepicker %}#toc-read-only-datetimepicker)).\n     */\n    readonly: boolean;\n    /**\n     * Sets the read-only state of the DateTimePicker input field\n     * ([see example]({% slug readonly_datetimepicker %}#toc-read-only-input)).\n     *\n     * > Note that if you set the [`readonly`]({% slug api_dateinputs_datetimepickercomponent %}#toc-readonly) property value to `true`,\n     * the input will be rendered in a read-only state regardless of the `readOnlyInput` value.\n     */\n    readOnlyInput: boolean;\n    /**\n     * Determines whether to display the **Cancel** button in the popup\n     * ([see example]({% slug datetimepicker_popup_options %}#toc-toggling-the-cancel-button)).\n     */\n    cancelButton: boolean;\n    /**\n     * Defines the descriptions of the format sections in the input field\n     * ([see example]({% slug placeholders_datetimepicker %}#toc-format-sections-description)).\n     */\n    formatPlaceholder: DateInputFormatPlaceholder;\n    /**\n     * Specifies the hint which is displayed by the DateTimePicker when its value is `null`\n     * ([see example]({% slug placeholders_datetimepicker %}#toc-text-hints)).\n     */\n    placeholder: string;\n    /**\n     * Configures the incremental steps of the DateInput and the popup component of the TimePicker\n     * ([see example]({% slug incrementalsteps_datetimepicker %})).\n     */\n    steps: DateInputIncrementalSteps;\n    /**\n     * Specifies the focused date of the popup Calendar\n     * ([see example]({% slug datetimepicker_calendar_options %}#toc-focused-dates)).\n     */\n    focusedDate: Date;\n    /**\n     * Determines whether to display a week number column in the `month` view of the popup Calendar\n     * ([see example]({% slug datetimepicker_calendar_options %}#toc-week-number-column)).\n     */\n    weekNumber: boolean;\n    /**\n     * Specifies the smallest valid date.\n     * The Calendar will not display dates before this value.\n     * If the `min` value of the Calendar is selected, the TimePicker will not display\n     * time entries before the specified time portion of this value\n     * ([see example]({% slug dateranges_datetimepicker %})).\n     */\n    min: Date;\n    /**\n     * Specifies the biggest valid date.\n     * The Calendar will not display dates after this value.\n     * If the `max` value of the Calendar is selected, the TimePicker will not display\n     * time entries after the specified time portion of this value\n     * ([see example]({% slug dateranges_datetimepicker %})).\n     */\n    max: Date;\n    /**\n     * Determines whether the built-in min or max validators are enforced when validating a form\n     * ([see example]({% slug dateranges_datetimepicker %}#toc-prevent-invalid-input)).\n     */\n    rangeValidation: boolean;\n    /**\n     * Determines whether the built-in validator for disabled\n     * date ranges is enforced when validating a form\n     * ([see example]({% slug disabled_dates_datetimepicker %}#toc-validation)).\n     */\n    disabledDatesValidation: boolean;\n    /**\n     * Fires each time the user selects a new value.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain closed.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain open.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the user focuses the component.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the user blurs the component.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Indicates whether the component is currently open.\n     */\n    readonly isOpen: boolean;\n    /**\n     * Indicates whether the component or its popup content is focused.\n     */\n    isActive: boolean;\n    /**\n     * Sets the active tab on opening the popup\n     * ([see example]({% slug datetimepicker_popup_options %}#toc-setting-the-default-tab)).\n     */\n    defaultTab: DateTimePickerActiveTab;\n    /**\n     * @hidden\n     */\n    readonly tabSwitchTransition: string;\n    /**\n     * @hidden\n     *\n     * Indicates whether the Calendar will be disabled.\n     * The inactive tab component gets disabled and becomes inaccessible on tab click.\n     */\n    readonly disableCalendar: boolean;\n    /**\n     * @hidden\n     */\n    readonly inputRole: string;\n    /**\n     * @hidden\n     *\n     * Indicates whether the TimeSelector will be disabled.\n     * The inactive tab component gets disabled and becomes inaccessible on tab click.\n     */\n    readonly disableTimeSelector: boolean;\n    /**\n     * @hidden\n     *\n     * Controls whether the Calendar or the TimeSelector will be displayed.\n     */\n    activeTab: DateTimePickerActiveTab;\n    /**\n     * @hidden\n     *\n     * Specifies the stripped time-related format that is used in the TimeSelector.\n     * Updates each time the `format` property value changes.\n     */\n    timeSelectorFormat: string;\n    /**\n     * @hidden\n     */\n    timeSelectorMin: Date;\n    /**\n     * @hidden\n     */\n    timeSelectorMax: Date;\n    /**\n     * @hidden\n     */\n    calendarValue: Date;\n    /**\n     * @hidden\n     */\n    calendarMin: Date;\n    /**\n     * @hidden\n     */\n    calendarMax: Date;\n    /**\n     * @hidden\n     */\n    cellTemplate: CellTemplateDirective;\n    /**\n     * @hidden\n     */\n    monthCellTemplate: MonthCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    yearCellTemplate: YearCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    decadeCellTemplate: DecadeCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    centuryCellTemplate: CenturyCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    weekNumberTemplate: WeekNumberCellTemplateDirective;\n    /**\n     * @hidden\n     */\n    headerTitleTemplate: HeaderTitleTemplateDirective;\n    private readonly activeTabComponent;\n    private readonly appendTo;\n    private container;\n    private popupTemplate;\n    private popupRef;\n    private _popupSettings;\n    private _value;\n    private _format;\n    private _tabindex;\n    private _defaultTab;\n    private _min;\n    private _max;\n    private _disabledDates;\n    private onControlTouched;\n    private onControlChange;\n    private onValidatorChange;\n    private minValidateFn;\n    private maxValidateFn;\n    private disabledDatesValidateFn;\n    private subscriptions;\n    constructor(popupService: PopupService, intl: IntlService, cdr: ChangeDetectorRef, pickerService: PickerService, ngZone: NgZone, host: ElementRef<HTMLElement>, touchEnabled: boolean, localization: LocalizationService, disabledDatesService: DisabledDatesService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * * If the popup is closed, focuses the DateTimePicker input.\n     * * If the popup is open, the focus is moved to its content.\n     */\n    focus(): void;\n    /**\n     * Blurs the DateTimePicker.\n     */\n    blur(): void;\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).\n     *\n     * @param show - The state of the popup.\n     */\n    toggle(show?: boolean): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: Date): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(disabled: boolean): void;\n    /**\n     * @hidden\n     */\n    validate(control: AbstractControl): ValidationErrors;\n    /**\n     * @hidden\n     */\n    registerOnValidatorChange(fn: Function): void;\n    /**\n     * @hidden\n     *\n     * Used by the TextBoxContainer to determine if the floating label will render in the input.\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    handleIconClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     */\n    handleFocus(): void;\n    /**\n     * @hidden\n     */\n    handleBlur(event?: FocusEvent): void;\n    /**\n     * @hidden\n     */\n    changeActiveTab(tab: DateTimePickerActiveTab): void;\n    /**\n     * @hidden\n     */\n    handleTabChangeTransitionEnd(dateTimeSelector: HTMLElement, event: TransitionEvent): void;\n    /**\n     * @hidden\n     */\n    handleAccept(): void;\n    /**\n     * @hidden\n     */\n    handleCancel(): void;\n    /**\n     * @hidden\n     */\n    handleInputValueChange(value: Date): void;\n    /**\n     * @hidden\n     */\n    handleCalendarValueChange(): void;\n    /**\n     * @hidden\n     */\n    handleKeyDown(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    handleTabOut(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     */\n    handleBackTabOut(event: KeyboardEvent): void;\n    /**\n     * @hidden\n     *\n     * Prevents the diversion of the focus from the currently active element in the component.\n     */\n    preventMouseDown(event: MouseEvent): void;\n    private verifyValue;\n    private verifyMinMaxRange;\n    /**\n     * Extracts the time slots and the literals that are not preceded by date parts\n     * and concatenates the resulting parts into a string.\n     * If the provided format value does not contain any time parts,\n     * returns the designated format of the default popup component of the TimePicker.\n     */\n    private getTimeSelectorFormat;\n    /**\n     * The filter expression that filters out all format parts\n     * except for `hour`, `minute`, `second`, `dayperiod`, and specific literals.\n     * Literals will be left only if they are not preceded by date parts.\n     */\n    private timeFormatPartFilter;\n    private togglePopup;\n    private switchFocus;\n    private openPopup;\n    private closePopup;\n    private handleValueChange;\n    /**\n     * Indicates whether the focus target is part of this component,\n     * that is, whether the focus target is inside the component wrapper or in the popup.\n     */\n    private focusTargetInComponent;\n    private setTimeSelectorMinMax;\n    private setCalendarValue;\n    /**\n     * If the popup is available, runs a popup change detection.\n     */\n    private detectPopupChanges;\n    /**\n     * Depending on the predicate `runInZone` value that is passed,\n     * runs the provided function either in the Angular or in the current zone.\n     */\n    private run;\n}\n"]}