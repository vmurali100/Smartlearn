{"version":3,"file":"date-range-popup.component.d.ts","sources":["date-range-popup.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, EventEmitter, TemplateRef, NgZone, OnInit, OnDestroy, ViewContainerRef, QueryList } from '@angular/core';\nimport { Align, Collision, Margin, PopupAnimation, PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { DateRangePopupTemplateDirective } from './date-range-popup-template.directive';\nimport { DateRangeService } from './date-range.service';\nimport { MultiViewCalendarComponent } from '../calendar/multiview-calendar.component';\nimport { PreventableEvent } from '../preventable-event';\n/**\n * Represents the Kendo UI DateRangePopup component for Angular.\n *\n * @example\n * ```ts\n * import { DateInputsModule, DateRangeService } from '@progress/kendo-angular-dateinputs';\n *\n * _@Component({\n * providers: [DateRangeService],\n * selector: 'my-app',\n * template: `\n *  <button #anchor (click)=\"popup.toggle()\">Toggle</button>\n *  <kendo-daterange-popup [anchor]=\"anchor\" #popup></kendo-daterange-popup>\n * `\n * })\n * class AppComponent {\n * }\n * ```\n */\nexport declare class DateRangePopupComponent implements OnInit, OnDestroy {\n    private popupService;\n    private dateRangeService;\n    private zone;\n    private rtl;\n    container: ViewContainerRef;\n    defaultTemplate: TemplateRef<any>;\n    contentTemplate: DateRangePopupTemplateDirective;\n    viewCalendar: QueryList<MultiViewCalendarComponent>;\n    contentCalendar: QueryList<MultiViewCalendarComponent>;\n    /**\n     * Controls the popup animation.\n     * By default, the opening and closing animations are enabled.\n     * For more information about controlling the popup animations,\n     * refer to the article on [animations]({% slug animations_popup %}).\n     */\n    animate: boolean | PopupAnimation;\n    /**\n     * Specifies the element that will be used as an anchor. The popup opens next to that element.\n     * For more information, refer to the section on\n     * [aligning to specific components]({% slug alignmentpositioning_popup %}#toc-aligning-to-components).\n     */\n    anchor: ElementRef;\n    /**\n     * Specifies the anchor pivot point.\n     * For more information, refer to the section on\n     * [positioning]({% slug alignmentpositioning_popup %}#toc-positioning).\n     */\n    anchorAlign: Align;\n    /**\n     * Controls the popup container. By default, the popup is appended to the root component.\n     */\n    appendTo: 'root' | 'component' | ViewContainerRef;\n    /**\n     * Configures the collision behavior of the popup.\n     * For more information, refer to the article on\n     * [viewport boundary detection]({% slug viewportboundarydetection_popup %}).\n     */\n    collision: Collision;\n    /**\n     * Specifies the pivot point of the popup.\n     * For more information, refer to the section on\n     * [positioning]({% slug alignmentpositioning_popup %}#toc-positioning).\n     */\n    popupAlign: Align;\n    /**\n     * Specifies the margin value that will be added to the popup dimensions in pixels\n     * and leaves a blank space between the popup and the anchor.\n     */\n    margin: Margin;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event, the popup will remain closed.\n     * For more information, refer to the section on\n     * [events]({% slug overview_datepicker %}#toc-events).\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event, the popup will remain open.\n     * For more information, refer to the section on\n     * [events]({% slug overview_datepicker %}#toc-events).\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the calendar element is blurred.\n     */\n    onBlur: EventEmitter<null>;\n    /**\n     * Fires each time the calendar element is focused.\n     */\n    onFocus: EventEmitter<null>;\n    /**\n     * Fires each time the popup is closed either on `ESC` keypress or on leaving the viewport.\n     */\n    cancel: EventEmitter<null>;\n    /**\n     * The active calendar that is visible in the popup.\n     *\n     * > When the popup is closed, the property returns `null`.\n     */\n    calendar: MultiViewCalendarComponent;\n    /**\n     * Gets the active state of the component.\n     * When the opened calendar is active, returns `true`.\n     */\n    readonly isActive: boolean;\n    /**\n     * @hidden\n     */\n    popupRef: PopupRef;\n    /**\n     * @hidden\n     */\n    popupUID: string;\n    /**\n     * Gets or sets the visibility state of the component.\n     */\n    show: boolean;\n    private activateSubscription;\n    private blurSubscription;\n    private focusSubscription;\n    private calendarSubscriptions;\n    private popupSubscriptions;\n    private windowBlurSubscription;\n    private resolvedPromise;\n    private _calendar;\n    private _show;\n    constructor(popupService: PopupService, dateRangeService: DateRangeService, zone: NgZone, rtl: boolean);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     *  Opens the popup component and focuses the calendar.\n     */\n    activate(): void;\n    /**\n     *  Focuses the calendar (if available).\n     */\n    focus(): void;\n    /**\n     * Checks if a focused element ids placed inside the popup.\n     *\n     * @return boolean;\n     */\n    hasActiveContent(): boolean;\n    /**\n     * Toggles the visibility of the popup.\n     * If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show The state of the popup.\n     */\n    toggle(show?: boolean): void;\n    /**\n     * @hidden\n     *\n     * Closes the popup and triggers the `cancel` event.\n     */\n    cancelPopup(): void;\n    private handleWindowBlur;\n    private handleMouseLeave;\n    private handleKeydown;\n    private subscribeFocusBlur;\n    private addPopupSubscriptions;\n    private readonly _appendTo;\n    private _toggle;\n}\n"]}