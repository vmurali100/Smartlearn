{"version":3,"file":"date-range-selection.directive.d.ts","sources":["date-range-selection.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';\nimport { DateRangeService } from './date-range.service';\nimport { MultiViewCalendarComponent } from '../calendar/multiview-calendar.component';\nimport { SelectionRange } from '../calendar/models/selection-range.interface';\nimport { SelectionRangeEnd } from '../calendar/models/selection-range-end.type';\nimport { AutoCorrectOn } from './auto-correct-on.type';\n/**\n * A directive which manages the MultiViewCalendar range selection.\n */\nexport declare class DateRangeSelectionDirective implements OnInit {\n    private calendar;\n    private cdr;\n    private element;\n    private dateRangeService;\n    /**\n     * Specifies the auto-correction behavior. If the start date is greater than the end date,\n     * the directive fixes the date range to a single date either on input change or on blur\n     * ([see example]({% slug autocorrect_daterange %}#toc-configuring-the-calendar-selection-directive)).\n     *\n     * By default, the auto-correction is triggered on change.\n     * To disable this behavior, set the `autoCorrectOn` property to `none`.\n     */\n    autoCorrectOn: AutoCorrectOn;\n    /**\n     * Gets or sets the selection range of the calendar. When a new range is set,\n     * the connected DateRangeService notifies all related parties.\n     */\n    selectionRange: SelectionRange;\n    /**\n     * Gets or sets the active end of the selection range. This option determines which range end will be updated on\n     * user interaction. When a new active end is set, the connected DateRangeService notifies all related parties.\n     */\n    /**\n     * Specifies which end of the selection range will be marked as active. The active end gets modified upon user\n     * interaction. When a new active end is set, the wired DateRangeService notifies all related components. For\n     * example, the start and end DateInput components.\n     *\n     * > If the selection range is undefined, the value is ignored.\n     */\n    activeRangeEnd: SelectionRangeEnd;\n    /**\n     * Fires when the active range end is changed. For more information, refer to\n     * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).\n     */\n    activeRangeEndChange: EventEmitter<SelectionRangeEnd>;\n    /**\n     * Fires when the selection range is changed. For more information, refer to\n     * the section on [events]({% slug overview_multiviewcalendar %}#toc-events).\n     */\n    selectionRangeChange: EventEmitter<SelectionRange>;\n    private readonly calendarRange;\n    private calendarSubscriptions;\n    constructor(calendar: MultiViewCalendarComponent, cdr: ChangeDetectorRef, element: ElementRef, renderer: Renderer2, dateRangeService: DateRangeService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    private addSubscriptions;\n    private isEqualCalendarRange;\n    private handleBlur;\n    private handleChange;\n    private handleHover;\n    private hasCompleteRange;\n    private shouldAutoCorrect;\n    private updateFocusedDate;\n    private updateRange;\n    private setSelectionRange;\n    private acceptAndEmit;\n}\n"]}