{"version":3,"file":"date-range.service.d.ts","sources":["date-range.service.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { BehaviorSubject } from 'rxjs';\nimport { DateInputComponent } from '../dateinput/dateinput.component';\nimport { DateRangePopupComponent } from './date-range-popup.component';\nimport { SelectionRangeEnd } from '../calendar/models/selection-range-end.type';\nimport { SelectionRange } from '../calendar/models/selection-range.interface';\n/**\n * A service that handles the communication between the components that are placed inside the DateRangeComponent.\n * For example, the start and end `DateInput` and `DateRangePopup` components.\n */\nexport declare class DateRangeService {\n    /**\n     * An Observable instance that notifies when the `activeRangeEnd` state is changed.\n     */\n    activeRangeEnd$: BehaviorSubject<SelectionRangeEnd>;\n    /**\n     * An Observable instance that notifies when the `focusedDate` is changed.\n     */\n    focusedDate$: BehaviorSubject<Date>;\n    /**\n     * An Observable instance that notifies when the end `DateInput` component is changed.\n     * For example, when a new end `DateInput` is attached or when the old one is detached.\n     */\n    endInput$: BehaviorSubject<DateInputComponent>;\n    /**\n     * An Observable instance that notifies when the start `DateInput` component is changed.\n     * For example, when a new start `DateInput` is attached or the old one is detached.\n     */\n    startInput$: BehaviorSubject<DateInputComponent>;\n    /**\n     * An Observable instance that notifies when the `DateRangePopup` component is changed.\n     */\n    dateRangePopup$: BehaviorSubject<DateRangePopupComponent>;\n    /**\n     * An Observable instance that notifies when the state of the selection range is changed.\n     */\n    range$: BehaviorSubject<SelectionRange>;\n    /**\n     * Gets the current `activeRangeEnd` value.\n     */\n    readonly activeRangeEnd: SelectionRangeEnd;\n    /**\n     * Gets the current `focusedDate` value.\n     */\n    readonly focusedDate: Date;\n    /**\n     * Gets the `min` range value.\n     * The `min` value is extracted from the `start` DateInput value or the `min` value of the Calendar.\n     */\n    readonly min: Date;\n    /**\n     * Gets the `max` range value.\n     * The `max` value is extracted from the `end` DateInput value or the `max` value of the Calendar.\n     */\n    readonly max: Date;\n    /**\n     * Gets the current `selectionRange` value.\n     */\n    readonly selectionRange: SelectionRange;\n    /**\n     * Activates the registered `DateRangePopup` component.\n     * The method opens the popup and focuses the calendar.\n     */\n    activatePopup(): void;\n    /**\n     * Deactivates the registered `DateRangePopup` component.\n     * The method closes the popup.\n     */\n    deactivatePopup(): void;\n    /**\n     * @hidden\n     *\n     * Deactivates the registered `DateRangePopup` component and fires the `cancel` event.\n     * The method closes the popup.\n     */\n    cancelPopup(): void;\n    /**\n     * Completes all observables to mitigate possible memory leaks.\n     * Calls the method when a component that uses it is destroyed.\n     */\n    destroy(): void;\n    /**\n     * Returns `true` when an active component that is placed inside the `DateRangeComponent` is detected.\n     * For example, the opened popup or the focused DateInput.\n     *\n     * @returns `true` if an active component is present.\n     */\n    hasActiveComponent(): boolean;\n    /**\n     * Registers a new start `DateInput` component. Notifies all `startInput$` listeners.\n     */\n    registerStartInput(startInput: DateInputComponent): void;\n    /**\n     * Registers a new end `DateInput` component. Notifies all `endInput$` listeners.\n     */\n    registerEndInput(endInput: DateInputComponent): void;\n    /**\n     * Registers a new `DateRangePopup` component. Notifies all `dateRangePopup$` listeners.\n     */\n    registerPopup(dateRangePopup: DateRangePopupComponent): void;\n    /**\n     * Updates the `activeRangeEnd` value. Notifies all `activeRangeEnd$` listeners.\n     */\n    setActiveRangeEnd(activeRange: SelectionRangeEnd): void;\n    /**\n     * Updates the focused date. Notifies all `focusedDate$` listeners.\n     */\n    setFocusedDate(value: Date): void;\n    /**\n     * Updates the selection range. Notifies all `range$` listeners.\n     */\n    setRange(range?: SelectionRange): void;\n}\n"]}