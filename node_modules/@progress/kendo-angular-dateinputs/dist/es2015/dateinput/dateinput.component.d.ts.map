{"version":3,"file":"dateinput.component.d.ts","sources":["dateinput.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, EventEmitter, ElementRef, OnInit, OnDestroy, OnChanges, Renderer2, NgZone, Injector, SimpleChanges } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { Arrow } from './arrow.enum';\nimport { DateInputFormatPlaceholder } from './models/format-placeholder.model';\nimport { DateInputIncrementalSteps } from './models/incremental-steps.model';\nimport { PickerService } from '../common/picker.service';\n/**\n * Represents the [Kendo UI DateInput component for Angular]({% slug overview_dateinput %}#toc-basic-usage).\n */\nexport declare class DateInputComponent implements OnInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n    private cdr;\n    private intl;\n    private renderer;\n    private element;\n    private ngZone;\n    private injector;\n    localization: LocalizationService;\n    private pickerService?;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    /**\n     * Sets or gets the `disabled` property of the DateInput and\n     * determines whether the component is active\n     * ([see example]({% slug disabled_dateinput %})).\n     */\n    disabled: boolean;\n    /**\n     * Sets or gets the read-only state of the DateInput\n     * ([see example]({% slug readonly_dateinput %})).\n     */\n    readonly: boolean;\n    /**\n     * Sets the title of the input element of the DateInput.\n     */\n    title: string;\n    /**\n     * Sets or gets the `tabIndex` property of the DateInput.\n     * .\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    role: string;\n    /**\n     * @hidden\n     */\n    ariaReadOnly: boolean;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Specifies the date format that is used to display the input value\n     * ([see example]({% slug formats_dateinput %})).\n     */\n    format: string;\n    /**\n     * Defines the descriptions of the format sections in the input field.\n     * For more information, refer to the article on\n     * [placeholders]({% slug placeholders_dateinput %}).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     * <div class=\"row example-wrapper\" style=\"min-height: 450px;\">\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Full-length format description:</p>\n     *    <kendo-dateinput formatPlaceholder=\"wide\"></kendo-dateinput>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Narrow-length format description:</p>\n     *    <kendo-dateinput formatPlaceholder=\"narrow\"></kendo-dateinput>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Short-length format description:</p>\n     *    <kendo-dateinput formatPlaceholder=\"short\"></kendo-dateinput>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Display defined format:</p>\n     *    <kendo-dateinput format=\"MM/dd/yyyy\" formatPlaceholder=\"formatPattern\"></kendo-dateinput>\n     *  </div>\n     *\n     *  <div class=\"col-xs-12 col-md-6 example-col\">\n     *    <p>Custom defined format descriptions</p>\n     *    <kendo-dateinput format=\"G\"\n     *      [formatPlaceholder]=\"{\n     *        year: 'y', month: 'M', day: 'd',\n     *        hour: 'h', minute: 'm', second: 's'\n     *      }\"\n     *    ></kendo-dateinput>\n     *  </div>\n     * </div>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    formatPlaceholder: DateInputFormatPlaceholder;\n    /**\n     * Specifies the hint the DateInput displays when its value is `null`.\n     * For more information, refer to the article on\n     * [placeholders]({% slug placeholders_dateinput %}).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-dateinput placeholder=\"Enter birth date...\"></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    placeholder: string;\n    /**\n     * Configures the incremental steps of the DateInput.\n     * For more information, refer to the article on\n     * [incremental steps]({% slug incrementalsteps_dateinput %}).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-dateinput [steps]=\"steps\"></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent {\n     *   public steps = { year: 10, month: 1, day: 5 };\n     * }\n     * ```\n     */\n    steps: DateInputIncrementalSteps;\n    /**\n     * Specifies the biggest date that is valid\n     * ([see example]({% slug dateranges_dateinput %})).\n     */\n    max: Date;\n    /**\n     * Specifies the smallest date that is valid\n     * ([see example]({% slug dateranges_dateinput %})).\n     */\n    min: Date;\n    /**\n     * Determines whether the built-in min or max validators are to be enforced when a form is being validated.\n     */\n    rangeValidation: boolean;\n    /**\n     * @hidden\n     * Based on the min and max values, specifies whether the value will be auto-corrected while typing.\n     */\n    autoCorrect: boolean;\n    /**\n     * Specifies the value of the DateInput component.\n     *\n     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n     */\n    value: Date;\n    /**\n     * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n     * For more information, refer to the article on\n     * [spinner buttons]({% slug spinbuttons_dateinput %}).\n     */\n    spinners: boolean;\n    /**\n     * @hidden\n     */\n    isPopupOpen: boolean;\n    /**\n     * @hidden\n     */\n    hasPopup: boolean;\n    /**\n     * Fires each time the user selects a new value.\n     * For more information, refer to the section on\n     * [events]({% slug overview_dateinput %}#toc-events).\n     */\n    valueChange: EventEmitter<Date>;\n    /**\n     * Fires each time the user selects a new value.\n     * For more information, refer to the section on\n     * [events]({% slug overview_dateinput %}#toc-events).\n     */\n    valueUpdate: EventEmitter<Date>;\n    /**\n     * Fires each time the user focuses the input element.\n     * For more information, refer to the section on\n     * [events]({% slug overview_dateinput %}#toc-events).\n     *\n     * > To wire the event programmatically, use the `onFocus` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-dateinput (focus)=\"handleFocus()\"></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleFocus(): void {\n     *      console.log(\"Component is focused\");\n     *   }\n     * }\n     * ```\n     *\n     */\n    onFocus: EventEmitter<null>;\n    /**\n     * Fires each time the input element gets blurred.\n     * For more information, refer to the section on\n     * [events]({% slug overview_dateinput %}#toc-events).\n     *\n     * > To wire the event programmatically, use the `onBlur` property.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <kendo-dateinput (blur)=\"handleBlur()\"></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent {\n     *   public handleBlur(): void {\n     *      console.log(\"Component is blurred\");\n     *   }\n     * }\n     * ```\n     *\n     */\n    onBlur: EventEmitter<null>;\n    /**\n     * @hidden\n     */\n    dateInput: ElementRef;\n    /**\n     * @hidden\n     */\n    wrap: ElementRef;\n    readonly wrapperClass: boolean;\n    readonly disabledClass: boolean;\n    readonly inputElement: any;\n    readonly inputValue: string;\n    isActive: boolean;\n    arrow: any;\n    arrowDirection: Arrow;\n    formatSections: {\n        [x: string]: boolean;\n    };\n    hasMousedown: boolean;\n    focusedPriorToMousedown: boolean;\n    protected currentValue: string;\n    protected currentFormat: string;\n    private backspace;\n    private resetSegmentValue;\n    private symbolsMap;\n    private minValidateFn;\n    private maxValidateFn;\n    private _value;\n    private _active;\n    private kendoDate;\n    private intlSubscription;\n    private paste;\n    private domEvents;\n    private control;\n    private onControlChange;\n    private onControlTouched;\n    private onValidatorChange;\n    constructor(cdr: ChangeDetectorRef, intl: IntlService, renderer: Renderer2, element: ElementRef, ngZone: NgZone, injector: Injector, localization: LocalizationService, pickerService?: PickerService);\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty\n     */\n    isEmpty(): boolean;\n    /**\n     * @hidden\n     */\n    containsElement(element: any): boolean;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    validate(control: AbstractControl): {\n        [key: string]: any;\n    };\n    /**\n     * @hidden\n     */\n    registerOnValidatorChange(fn: Function): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: Date): void;\n    /**\n     * @hidden\n     */\n    triggerChange(): void;\n    /**\n     * @hidden\n     */\n    notify(): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: () => any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => any): void;\n    /**\n     * Focuses the DateInput component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"dateinput.focus()\">Focus date input</button>\n     *  <kendo-dateinput #dateinput></kendo-dateinput>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    focus(): void;\n    /**\n     * Blurs the DateInput component.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    handleButtonClick(offset: number): void;\n    /**\n     * @hidden\n     */\n    modifyDateSegmentValue(offset: number): void;\n    /**\n     * @hidden\n     */\n    protected switchDateSegment(offset: number): boolean;\n    /**\n     * @hidden\n     */\n    protected selectDateSegment(symbol: string): void;\n    /**\n     * @hidden\n     */\n    handleClick(): void;\n    /**\n     * @hidden\n     */\n    handleDragAndDrop(args: any): void;\n    /**\n     * @hidden\n     */\n    handleMousedown(): void;\n    /**\n     * @hidden\n     */\n    handleFocus(args: any): void;\n    /**\n     * @hidden\n     */\n    handleBlur(args: any): void;\n    private getKendoDate;\n    private dateSymbolMap;\n    private updateElementValue;\n    private caret;\n    private selectNearestSegment;\n    private verifyRange;\n    private verifyValue;\n    private putDateInRange;\n    private updateFormatSections;\n    private intlChange;\n    private updateOnPaste;\n    private bindEvents;\n    private handleMouseWheel;\n    private handlePaste;\n    private handleKeydown;\n    private handleInput;\n    private emitFocus;\n    private emitBlur;\n}\n"]}