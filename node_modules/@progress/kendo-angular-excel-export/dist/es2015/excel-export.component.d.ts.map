{"version":3,"file":"excel-export.component.d.ts","sources":["excel-export.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { QueryList, NgZone } from '@angular/core';\nimport { WorkbookOptions } from '@progress/kendo-ooxml';\nimport { CellOptions } from './ooxml/cell-options.interface';\nimport { ExcelExportData } from './excel-export-data';\nimport { ColumnBase } from './columns/column-base';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\nexport declare class ExcelExportComponent {\n    private localization;\n    private zone;\n    /**\n     * Specifies the name of the file that is exported to Excel.\n     * @default \"Export.xlsx\"\n     */\n    fileName: string;\n    /**\n     * Enables or disables the column filtering in the Excel file\n     * ([see example]({% slug filtering_excelexport %})).\n     */\n    filterable: boolean;\n    /**\n     * Specifies if groups are collapsible in the excel file.\n     */\n    collapsible: boolean;\n    /**\n     * The author of the workbook.\n     */\n    creator?: string;\n    /**\n     * The date on which the workbook is created.\n     * The default value is `new Date()`.\n     */\n    date?: Date;\n    /**\n     * If `forceProxy` is set to `true`, the content is forwarded to `proxyURL`\n     * even if the browser supports the local saving of files.\n     */\n    forceProxy: boolean;\n    /**\n     * The URL of the server-side proxy which will stream the file to the end user. When the browser is not\n     * capable of saving files locally&mdash;for example, Internet Explorer 9 and earlier, and Safari&mdash;a\n     * proxy is used. The implementation of the server-side proxy has to be done by you.\n     *\n     * The proxy receives a POST request with the following parameters in the request body:\n     * - `contentType`&mdash;The MIME type of the file.\n     * - `base64`&mdash;The base-64 encoded file content.\n     * - `fileName`&mdash;The file name, as requested by the caller.\n     * The proxy is expected to return the decoded file with the **Content-Disposition** header set to `attachment; filename=\"<fileName.xslx>\"`.\n     */\n    proxyURL: string;\n    /**\n     * The exported data. If grouped, the data must be structured as described by the\n     * [`GroupResult`]({% slug api_kendo-data-query_groupresult %}) option of the Kendo UI Data Query component.\n     */\n    data: any[];\n    /**\n     * The exported data groups. The groups must be compatible with the\n     * [`GroupDescriptor`]({% slug api_kendo-data-query_groupdescriptor %}) option of the Kendo UI Data Query component.\n     */\n    group: any[];\n    /**\n     * The options of the cells that are inserted before the data, group, and footer cells\n     * to indicate the group hierarchy when the data is grouped\n     * ([see example]({% slug cells_excelexport %}#toc-padding-cells)).\n     */\n    paddingCellOptions: CellOptions;\n    /**\n     * The options of the cells that are inserted before the header cells\n     * to align the headers and the column values when the data is grouped\n     * ([see example]({% slug cells_excelexport %}#toc-header-padding-cells)).\n     */\n    headerPaddingCellOptions: CellOptions;\n    /**\n     * @hidden\n     */\n    columns: QueryList<ColumnBase>;\n    constructor(localization: LocalizationService, zone: NgZone);\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n    save(exportData?: any[] | ExcelExportData | WorkbookOptions): void;\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    workbookOptions(exportData?: any[] | ExcelExportData): WorkbookOptions;\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    toDataURL(exportData?: any[] | ExcelExportData | WorkbookOptions): Promise<string>;\n    protected getExportData(exportData?: ExcelExportData | any[]): ExcelExportData;\n    protected saveFile(dataURL: string): void;\n}\n"]}