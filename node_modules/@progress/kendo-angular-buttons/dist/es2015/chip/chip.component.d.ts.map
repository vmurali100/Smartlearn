{"version":3,"file":"chip.component.d.ts","sources":["chip.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, ElementRef, Renderer2, AfterViewInit, OnInit, NgZone } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ChipRemoveEvent } from './chip-remove-event-args.interface';\nimport { ChipLook } from './models/chip-look';\nimport { ChipType } from './models/type';\n/**\n * Displays a Chip that represents an input, attribute or an action.\n */\nexport declare class ChipComponent implements OnInit, AfterViewInit {\n    element: ElementRef;\n    private renderer;\n    private ngZone;\n    private localizationService;\n    /**\n     * Changes the visual appearance by using alternative styling options.\n     *\n     * The available values are:\n     * * `filled`\n     * * `outlined`\n     */\n    look: ChipLook;\n    /**\n     * Sets the label text of the Chip.\n     */\n    label: string;\n    /**\n     * Defines the name for an existing icon in a Kendo UI theme.\n     * The icon is rendered inside the Chip by a `span.k-icon` element.\n     */\n    icon: string;\n    /**\n     * Defines a CSS class — or multiple classes separated by spaces —\n     * which are applied to a span element.\n     * Allows the usage of custom icons.\n     */\n    iconClass: string;\n    /**\n     * Specifies the selected state of the Chip.\n     */\n    selected: boolean;\n    /**\n     * Specifies a custom select icon that will be rendered when the Chip is selected.\n     * [see example]({% slug icons %})\n     */\n    selectedIcon: string;\n    /**\n     * Specifies if the Chip will be removable or not.\n     * If the property is set to `true`, the Chip renders a remove icon.\n     */\n    removable: boolean;\n    /**\n     * Specifies a custom remove icon that will be rendered when the Chip is removable.\n     * [see example]({% slug icons %})\n     */\n    removeIcon: string;\n    /**\n     * Specifies the Chip type.\n     *\n     * The possible values are:\n     * - `none` (default)\n     * - `success`\n     * - `error`\n     * - `warning`\n     * - `info`\n     */\n    type: ChipType;\n    /**\n     * If set to `true`, the Chip will be disabled.\n     */\n    disabled: boolean;\n    /**\n     * Fires each time the user clicks the remove icon of the Chip.\n     */\n    remove: EventEmitter<ChipRemoveEvent>;\n    tabIndex: number;\n    hostClass: boolean;\n    readonly outlineClass: boolean;\n    readonly filledClass: boolean;\n    readonly hasIconClass: boolean;\n    readonly disabledClass: boolean;\n    readonly selectedClass: boolean;\n    readonly focusedClass: boolean;\n    /**\n     * @hidden\n     */\n    direction: string;\n    private focused;\n    private dynamicRTLSubscription;\n    private detachDomEvents;\n    constructor(element: ElementRef, renderer: Renderer2, ngZone: NgZone, localizationService: LocalizationService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    readonly iconClasses: string;\n    /**\n     * @hidden\n     */\n    readonly selectedIconClasses: string;\n    /**\n     * @hidden\n     */\n    readonly removeIconClasses: string;\n    /**\n     * @hidden\n     */\n    typeClass(): string;\n    /**\n     * Focuses the Chip component.\n     */\n    focus(): void;\n    /**\n     * Blurs the Chip component.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     */\n    onRemoveClick(e: MouseEvent): void;\n    private attachElementEventHandlers;\n}\n"]}