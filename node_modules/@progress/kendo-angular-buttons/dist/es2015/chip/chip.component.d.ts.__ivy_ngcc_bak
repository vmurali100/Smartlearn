/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, Renderer2, AfterViewInit, OnInit, NgZone } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ChipRemoveEvent } from './chip-remove-event-args.interface';
import { ChipLook } from './models/chip-look';
import { ChipType } from './models/type';
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
export declare class ChipComponent implements OnInit, AfterViewInit {
    element: ElementRef;
    private renderer;
    private ngZone;
    private localizationService;
    /**
     * Changes the visual appearance by using alternative styling options.
     *
     * The available values are:
     * * `filled`
     * * `outlined`
     */
    look: ChipLook;
    /**
     * Sets the label text of the Chip.
     */
    label: string;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Chip by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class — or multiple classes separated by spaces —
     * which are applied to a span element.
     * Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Specifies the selected state of the Chip.
     */
    selected: boolean;
    /**
     * Specifies a custom select icon that will be rendered when the Chip is selected.
     * [see example]({% slug icons %})
     */
    selectedIcon: string;
    /**
     * Specifies if the Chip will be removable or not.
     * If the property is set to `true`, the Chip renders a remove icon.
     */
    removable: boolean;
    /**
     * Specifies a custom remove icon that will be rendered when the Chip is removable.
     * [see example]({% slug icons %})
     */
    removeIcon: string;
    /**
     * Specifies the Chip type.
     *
     * The possible values are:
     * - `none` (default)
     * - `success`
     * - `error`
     * - `warning`
     * - `info`
     */
    type: ChipType;
    /**
     * If set to `true`, the Chip will be disabled.
     */
    disabled: boolean;
    /**
     * Fires each time the user clicks the remove icon of the Chip.
     */
    remove: EventEmitter<ChipRemoveEvent>;
    tabIndex: number;
    hostClass: boolean;
    readonly outlineClass: boolean;
    readonly filledClass: boolean;
    readonly hasIconClass: boolean;
    readonly disabledClass: boolean;
    readonly selectedClass: boolean;
    readonly focusedClass: boolean;
    /**
     * @hidden
     */
    direction: string;
    private focused;
    private dynamicRTLSubscription;
    private detachDomEvents;
    constructor(element: ElementRef, renderer: Renderer2, ngZone: NgZone, localizationService: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    readonly iconClasses: string;
    /**
     * @hidden
     */
    readonly selectedIconClasses: string;
    /**
     * @hidden
     */
    readonly removeIconClasses: string;
    /**
     * @hidden
     */
    typeClass(): string;
    /**
     * Focuses the Chip component.
     */
    focus(): void;
    /**
     * Blurs the Chip component.
     */
    blur(): void;
    /**
     * @hidden
     */
    onRemoveClick(e: MouseEvent): void;
    private attachElementEventHandlers;
}
