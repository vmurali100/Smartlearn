{"version":3,"file":"splitbutton.component.d.ts","sources":["splitbutton.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ElementRef, TemplateRef, EventEmitter, ViewContainerRef, AfterViewInit, OnChanges, SimpleChanges, NgZone, ChangeDetectorRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { Align, PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { ListButton } from './../listbutton/list-button';\nimport { PopupSettings } from './../listbutton/popup-settings';\nimport { ButtonItemTemplateDirective } from './../listbutton/button-item-template.directive';\nimport { FocusService } from './../focusable/focus.service';\nimport { NavigationService } from './../navigation/navigation.service';\nimport { PreventableEvent } from '../preventable-event';\nimport { ButtonLook } from '../button-look';\n/**\n * Represents the Kendo UI SplitButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-splitbutton [data]=\"data\" [icon]=\"'paste'\"\n *      (itemClick)=\"onSplitButtonItemClick($event)\"\n *      (buttonClick)=\"onSplitButtonClick()\">Paste</kendo-splitbutton>\n * `\n * })\n *\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'Keep Text Only',\n *       icon: 'paste-plain-text',\n *       click: () => { console.log('Keep Text Only click handler'); }\n *   }, {\n *       text: 'Paste as HTML',\n *       icon: 'paste-as-html'\n *   }, {\n *       text: 'Paste Markdown',\n *       icon: 'paste-markdown'\n *   }, {\n *       text: 'Set Default Paste'\n *   }];\n *\n *   public onSplitButtonClick(dataItem: any): void {\n *       console.log('Paste');\n *   }\n *\n *   public onSplitButtonItemClick(dataItem: any): void {\n *       if (dataItem) {\n *           console.log(dataItem.text);\n *       }\n *   }\n * }\n * ```\n */\nexport declare class SplitButtonComponent extends ListButton implements AfterViewInit, OnChanges {\n    private popupService;\n    private elRef;\n    /**\n     * Sets the text of the SplitButton.\n     */\n    text: string;\n    /**\n     * Defines an icon to be rendered next to the button text\n     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n     */\n    icon: string;\n    /**\n     * Defines an icon with a custom CSS class to be rendered next to the button text\n     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n     */\n    iconClass: string;\n    /**\n     * Defines the location of an image to be displayed next to the button text\n     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n     */\n    imageUrl: string;\n    /**\n     * Changes the visual appearance by using alternative styling options.\n     *\n     * The available values are:\n     * * `flat`\n     * * `outline`\n     */\n    look: ButtonLook;\n    /**\n     * When set to `true`, disables a SplitButton item\n     * ([see example]({% slug databinding_splitbutton %}#toc-arrays-of-complex-data)).\n     */\n    disabled: boolean;\n    /**\n     * Configures the popup of the SplitButton.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabIndex: number;\n    /**\n     * Configures the text field of the button-list popup.\n     */\n    textField: string;\n    /**\n     * Sets the data of the SplitButton.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    data: any;\n    /**\n     * The CSS classes that will be rendered on the main button.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    buttonClass: any;\n    /**\n     * The CSS classes that will be rendered on the button which opens the popup.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    arrowButtonClass: any;\n    /**\n     * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will\n     * be rendered for the button which opens the popup.\n     */\n    arrowButtonIcon: string;\n    /**\n     * Fires each time the user clicks the main button.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-splitbutton (buttonClick)=\"onSplitButtonClick()\" [data]=\"data\">\n     *            Reply\n     *        </kendo-splitbutton>\n     *    `\n     * })\n     * class AppComponent {\n     *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n     *\n     *    public onSplitButtonClick(): void {\n     *      console.log('SplitButton click');\n     *    }\n     * }\n     * ```\n     *\n     */\n    buttonClick: EventEmitter<any>;\n    /**\n     * Fires each time the user clicks on the drop-down list. The event data contains the data item bound to the clicked list item.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *     selector: 'my-app',\n     *    template: `\n     *        <kendo-splitbutton (itemClick)=\"onSplitButtonItemClick($event)\" [data]=\"data\">\n     *          Reply\n     *      </kendo-splitbutton>\n     *    `\n     * })\n     * class AppComponent {\n     *    public data: Array<any> = ['Reply All', 'Forward', 'Reply & Delete'];\n     *\n     *   public onSplitButtonItemClick(dataItem?: string): void {\n     *        if (dataItem) {\n     *            console.log(dataItem);\n     *       }\n     *    }\n     * }\n     * ```\n     *\n     */\n    itemClick: EventEmitter<any>;\n    /**\n     * Fires each time the SplitButton gets focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the SplitButton gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * An item template that helps to customize the item content.\n     */\n    itemTemplate: ButtonItemTemplateDirective;\n    button: ElementRef<HTMLButtonElement>;\n    arrowButton: ElementRef<HTMLButtonElement>;\n    popupTemplate: TemplateRef<any>;\n    containerRef: ViewContainerRef;\n    popupRef: PopupRef;\n    /**\n     * @hidden\n     */\n    /**\n    * @hidden\n    */\n    openState: boolean;\n    listId: string;\n    /**\n     * @hidden\n     */\n    readonly active: boolean;\n    /**\n     * @hidden\n     */\n    readonly componentTabIndex: number;\n    private buttonText;\n    private lockFocus;\n    isFocused: boolean;\n    readonly widgetClasses: boolean;\n    readonly dir: string;\n    /**\n     * @hidden\n     */\n    readonly ariaLabel: string;\n    /**\n     * @hidden\n     */\n    onButtonFocus(): void;\n    /**\n     * @hidden\n     */\n    onArrowButtonClick(): void;\n    /**\n     * @hidden\n     */\n    onButtonClick(): void;\n    /**\n     * @hidden\n     */\n    onButtonBlur(): void;\n    /**\n     * @hidden\n     */\n    keydown(event: any): void;\n    /**\n     * @hidden\n     */\n    keypress(event: any): void;\n    /**\n     * @hidden\n     */\n    keyup(event: any): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    togglePopupVisibility(): void;\n    /**\n     * @hidden\n     */\n    wrapperContains(element: any): boolean;\n    /**\n     * @hidden\n     */\n    readonly anchorAlign: Align;\n    /**\n     * @hidden\n     */\n    readonly popupAlign: Align;\n    /**\n     * Focuses the SplitButton component.\n     */\n    focus(): void;\n    /**\n     * Blurs the SplitButton component.\n     */\n    blur(): void;\n    constructor(focusService: FocusService, navigationService: NavigationService, wrapperRef: ElementRef, zone: NgZone, popupService: PopupService, elRef: ElementRef, localization: LocalizationService, cdr: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    protected enterHandler(): void;\n    private updateButtonText;\n    private readonly appendTo;\n    private _toggle;\n    private createPopup;\n    private destroyPopup;\n}\n"]}