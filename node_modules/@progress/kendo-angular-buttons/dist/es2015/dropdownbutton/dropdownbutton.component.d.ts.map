{"version":3,"file":"dropdownbutton.component.d.ts","sources":["dropdownbutton.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, ViewContainerRef, ElementRef, EventEmitter, NgZone, ChangeDetectorRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { Align, PopupService, PopupRef } from '@progress/kendo-angular-popup';\nimport { PopupSettings } from '../listbutton/popup-settings';\nimport { ButtonItemTemplateDirective } from '../listbutton/button-item-template.directive';\nimport { Direction } from '../direction';\nimport { ListButton } from '../listbutton/list-button';\nimport { ListComponent } from '../listbutton/list.component';\nimport { FocusService } from '../focusable/focus.service';\nimport { NavigationService } from '../navigation/navigation.service';\nimport { PreventableEvent } from '../preventable-event';\nimport { ButtonLook } from '../button-look';\n/**\n * Represents the Kendo UI DropDownButton component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownbutton [data]=\"data\">\n *    User Settings\n *  </kendo-dropdownbutton>\n * `\n * })\n * class AppComponent {\n *   public data: Array<any> = [{\n *       text: 'My Profile'\n *   }, {\n *       text: 'Friend Requests'\n *   }, {\n *       text: 'Account Settings'\n *   }, {\n *       text: 'Support'\n *   }, {\n *       text: 'Log Out'\n *   }];\n * }\n * ```\n */\nexport declare class DropDownButtonComponent extends ListButton {\n    private popupService;\n    private elRef;\n    /**\n     * Defines the name of an existing icon in a Kendo UI theme.\n     */\n    icon: string;\n    /**\n     * Defines the list of CSS classes which are used for styling the Button with custom icons.\n     */\n    iconClass: string;\n    /**\n     * Defines a URL for styling the button with a custom image.\n     */\n    imageUrl: string;\n    /**\n     * Configures the popup of the DropDownButton.\n     *\n     * The available options are:\n     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n     * - `appendTo: \"root\" | \"component\" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.\n     * - `align: \"left\" | \"center\" | \"right\"`&mdash;Specifies the alignment of the popup.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * Sets the data item field that represents the item text.\n     * If the data contains only primitive values, do not define it.\n     */\n    textField: string;\n    /**\n     * Sets the disabled state of the DropDownButton.\n     */\n    disabled: boolean;\n    /**\n     * Sets or gets the data of the DropDownButton.\n     *\n     * > The data has to be provided in an array-like list.\n     */\n    data: any;\n    /**\n     * Adds visual weight to the default button and makes it primary.\n     */\n    primary: boolean;\n    /**\n     * Changes the visual appearance by using alternative styling options.\n     *\n     * The available values are:\n     * * `flat`\n     * * `outline`\n     */\n    look: ButtonLook;\n    /**\n     * The CSS classes that will be rendered on the main button.\n     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).\n     */\n    buttonClass: any;\n    /**\n     * @hidden\n     */\n    /**\n    * @hidden\n    */\n    openState: boolean;\n    /**\n     * @hidden\n     */\n    readonly componentTabIndex: number;\n    private readonly appendTo;\n    /**\n     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabIndex: number;\n    /**\n     * Fires each time the user clicks on a drop-down list item. The event data contains the data item bound to the clicked list item.\n     */\n    itemClick: EventEmitter<any>;\n    /**\n     * Fires each time the popup is about to open.\n     * This event is preventable. If you cancel the event, the popup will remain closed.\n     */\n    open: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the popup is about to close.\n     * This event is preventable. If you cancel the event, the popup will remain open.\n     */\n    close: EventEmitter<PreventableEvent>;\n    /**\n     * Fires each time the DropDownButton gets focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires each time the DropDownButton gets blurred.\n     */\n    onBlur: EventEmitter<any>;\n    readonly focused: boolean;\n    readonly widgetClasses: boolean;\n    readonly dir: Direction;\n    /**\n     * @hidden\n     */\n    readonly active: boolean;\n    itemTemplate: ButtonItemTemplateDirective;\n    button: ElementRef<HTMLButtonElement>;\n    buttonList: ListComponent;\n    popupTemplate: TemplateRef<any>;\n    container: ViewContainerRef;\n    popupRef: PopupRef;\n    listId: string;\n    /**\n     * @hidden\n     */\n    keydown(event: any): void;\n    /**\n     * @hidden\n     */\n    keypress(event: any): void;\n    /**\n     * @hidden\n     */\n    keyup(event: any): void;\n    /**\n     * @hidden\n     */\n    mousedown(event: any): void;\n    /**\n     * @hidden\n     */\n    openPopup(): void;\n    /**\n     * @hidden\n     */\n    onButtonBlur(): void;\n    /**\n     * @hidden\n     */\n    readonly anchorAlign: Align;\n    /**\n     * @hidden\n     */\n    readonly popupAlign: Align;\n    /**\n     * Focuses the DropDownButton component.\n     */\n    focus(): void;\n    /**\n     * Blurs the DropDownButton component.\n     */\n    blur(): void;\n    constructor(focusService: FocusService, navigationService: NavigationService, wrapperRef: ElementRef, zone: NgZone, popupService: PopupService, elRef: ElementRef, localization: LocalizationService, cdr: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    /**\n     * Toggles the visibility of the popup.\n     * If the `toggle` method is used to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    toggle(open: boolean): void;\n    /**\n     * Returns the current open state of the popup.\n     */\n    readonly isOpen: boolean;\n    /**\n     * @hidden\n     */\n    handleFocus(): void;\n    /**\n     * @hidden\n     */\n    wrapperContains(element: any): boolean;\n    protected subscribeNavigationEvents(): void;\n    private onNavigationEnterPress;\n    private onNavigationEnterUp;\n    private onNavigationOpen;\n    private onNavigationClose;\n    private onArrowKeyNavigate;\n    private _toggle;\n    private createPopup;\n    private destroyPopup;\n}\n"]}