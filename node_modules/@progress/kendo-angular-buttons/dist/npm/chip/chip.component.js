/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
var ChipComponent = /** @class */ (function () {
    function ChipComponent(element, renderer, ngZone, localizationService) {
        this.element = element;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.localizationService = localizationService;
        /**
         * Changes the visual appearance by using alternative styling options.
         *
         * The available values are:
         * * `filled`
         * * `outlined`
         */
        this.look = 'filled';
        /**
         * Specifies the selected state of the Chip.
         */
        this.selected = false;
        /**
         * Specifies if the Chip will be removable or not.
         * If the property is set to `true`, the Chip renders a remove icon.
         */
        this.removable = false;
        /**
         * Specifies the Chip type.
         *
         * The possible values are:
         * - `none` (default)
         * - `success`
         * - `error`
         * - `warning`
         * - `info`
         */
        this.type = 'none';
        /**
         * If set to `true`, the Chip will be disabled.
         */
        this.disabled = false;
        /**
         * Fires each time the user clicks the remove icon of the Chip.
         */
        this.remove = new core_1.EventEmitter();
        this.tabIndex = 0;
        this.hostClass = true;
        this.focused = false;
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(ChipComponent.prototype, "outlineClass", {
        get: function () {
            return this.look === 'outlined';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "filledClass", {
        get: function () {
            return this.look === 'filled';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "hasIconClass", {
        get: function () {
            return this.icon || this.iconClass ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "selectedClass", {
        get: function () {
            return this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    ChipComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            return _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    ChipComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    };
    ChipComponent.prototype.ngAfterViewInit = function () {
        var chip = this.element.nativeElement;
        var typeClass = this.typeClass();
        if (this.type !== 'none') {
            this.renderer.addClass(chip, typeClass);
        }
        this.attachElementEventHandlers(chip);
    };
    Object.defineProperty(ChipComponent.prototype, "iconClasses", {
        /**
         * @hidden
         */
        get: function () {
            if (this.icon) {
                return "k-icon k-i-" + this.icon;
            }
            if (this.iconClass) {
                return "" + this.iconClass;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "selectedIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            if (this.selectedIcon) {
                return "" + this.selectedIcon;
            }
            return "k-icon k-i-check";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipComponent.prototype, "removeIconClasses", {
        /**
         * @hidden
         */
        get: function () {
            if (this.removeIcon) {
                return "" + this.removeIcon;
            }
            return "k-icon k-i-close-circle";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ChipComponent.prototype.typeClass = function () {
        return {
            'none': '',
            'success': 'k-chip-success',
            'warning': 'k-chip-warning',
            'error': 'k-chip-error',
            'info': 'k-chip-info'
        }[this.type];
    };
    /**
     * Focuses the Chip component.
     */
    ChipComponent.prototype.focus = function () {
        if (kendo_angular_common_1.isDocumentAvailable()) {
            this.element.nativeElement.focus();
        }
    };
    /**
     * Blurs the Chip component.
     */
    ChipComponent.prototype.blur = function () {
        if (kendo_angular_common_1.isDocumentAvailable()) {
            this.element.nativeElement.blur();
        }
    };
    /**
     * @hidden
     */
    ChipComponent.prototype.onRemoveClick = function (e) {
        if (this.removable) {
            this.remove.emit({ sender: this, originalEvent: e });
        }
    };
    ChipComponent.prototype.attachElementEventHandlers = function (chip) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var focusListener = _this.renderer.listen(chip, 'focus', function () {
                _this.renderer.addClass(chip, 'k-chip-focused');
            });
            var blurListener = _this.renderer.listen(chip, 'blur', function () {
                _this.renderer.removeClass(chip, 'k-chip-focused');
            });
            _this.detachDomEvents = function () {
                focusListener();
                blurListener();
            };
        });
    };
    ChipComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-chip',
                    template: "\n        <span class=\"k-selected-icon-wrapper\">\n            <span *ngIf=\"selected\"\n                class=\"k-selected-icon\"\n                [ngClass]=\"selectedIconClasses\"\n            >\n            </span>\n        </span>\n\n        <span *ngIf=\"icon || iconClass\"\n            class=\"k-chip-icon\"\n            [ngClass]=\"iconClasses\"\n        >\n        </span>\n\n        <span class=\"k-chip-content\">\n            <span class=\"k-chip-label\" *ngIf=\"label\">\n                {{ label }}\n            </span>\n            <ng-content *ngIf=\"!label\"></ng-content>\n        </span>\n\n        <span *ngIf=\"removable\"\n            class=\"k-remove-icon\"\n            (click)=\"onRemoveClick($event)\"\n        >\n            <span [ngClass]=\"removeIconClasses\"></span>\n        </span>\n    ",
                    providers: [
                        kendo_angular_l10n_1.LocalizationService,
                        {
                            provide: kendo_angular_l10n_1.L10N_PREFIX,
                            useValue: 'kendo.chip'
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ChipComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef },
        { type: core_1.Renderer2 },
        { type: core_1.NgZone },
        { type: kendo_angular_l10n_1.LocalizationService }
    ]; };
    ChipComponent.propDecorators = {
        look: [{ type: core_1.Input }],
        label: [{ type: core_1.Input }],
        icon: [{ type: core_1.Input }],
        iconClass: [{ type: core_1.Input }],
        selected: [{ type: core_1.Input }],
        selectedIcon: [{ type: core_1.Input }],
        removable: [{ type: core_1.Input }],
        removeIcon: [{ type: core_1.Input }],
        type: [{ type: core_1.Input }],
        disabled: [{ type: core_1.Input }],
        remove: [{ type: core_1.Output }],
        tabIndex: [{ type: core_1.HostBinding, args: ['attr.tabindex',] }],
        hostClass: [{ type: core_1.HostBinding, args: ['class.k-chip',] }],
        outlineClass: [{ type: core_1.HostBinding, args: ['class.k-chip-outline',] }],
        filledClass: [{ type: core_1.HostBinding, args: ['class.k-chip-filled',] }],
        hasIconClass: [{ type: core_1.HostBinding, args: ['class.k-chip-has-icon',] }],
        disabledClass: [{ type: core_1.HostBinding, args: ['class.k-chip-disabled',] }],
        selectedClass: [{ type: core_1.HostBinding, args: ['class.k-chip-selected',] }],
        focusedClass: [{ type: core_1.HostBinding, args: ['class.k-chip-focused',] }],
        direction: [{ type: core_1.HostBinding, args: ['attr.dir',] }]
    };
    return ChipComponent;
}());
exports.ChipComponent = ChipComponent;
