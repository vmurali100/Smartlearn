/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var chip_component_1 = require("./chip.component");
var util_1 = require("../util");
var ChipListComponent = /** @class */ (function () {
    function ChipListComponent(localizationService) {
        this.localizationService = localizationService;
        this.hostClass = true;
        /**
         * Sets the selection mode of the ChipList.
         *
         * The available values are:
         * * `none` (default)
         * * `single`
         * * `multiple`
         */
        this.selection = 'none';
        /**
         * Fires each time when the ChipList selection is changed.
         */
        this.selectedChange = new core_1.EventEmitter();
        /**
         * Fires each time the user clicks on the remove icon of the Chip.
         */
        this.remove = new core_1.EventEmitter();
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(ChipListComponent.prototype, "single", {
        get: function () {
            return this.selection === 'single';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipListComponent.prototype, "multiple", {
        get: function () {
            return this.selection === 'multiple';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ChipListComponent.prototype.onClick = function ($event) {
        var target = $event.target;
        var isRemoveClicked = util_1.closest(target, '.k-remove-icon');
        var clickedChip = util_1.closest(target, '.k-chip');
        var chip = this.chips.find(function (chip) { return clickedChip === chip.element.nativeElement; });
        if (isRemoveClicked && clickedChip) {
            var removeEventArgs = { sender: this, originalEvent: $event, removedChip: chip };
            this.remove.emit(removeEventArgs);
        }
        if (this.selection !== 'none' && clickedChip && !isRemoveClicked) {
            this.setSelection(chip);
        }
    };
    ChipListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dynamicRTLSubscription = this.localizationService.changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            return _this.direction = rtl ? 'rtl' : 'ltr';
        });
    };
    ChipListComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    ChipListComponent.prototype.selectedChips = function () {
        return this.chips.reduce(function (acc, cur, idx) { return cur.selected ? acc.concat(idx) : acc; }, []);
    };
    /**
     * Updates the selection on click of a Chip. Emits events.
     */
    ChipListComponent.prototype.setSelection = function (chip) {
        if (this.selection === 'single') {
            this.clearSelection(chip);
        }
        chip.selected = !chip.selected;
        this.selectedChange.emit(this.selectedChips());
    };
    ChipListComponent.prototype.clearSelection = function (chip) {
        this.chips.forEach(function (c) {
            if (chip !== c) {
                c.selected = false;
            }
        });
    };
    ChipListComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-chip-list',
                    template: "\n        <ng-content></ng-content>\n    ",
                    providers: [
                        kendo_angular_l10n_1.LocalizationService,
                        {
                            provide: kendo_angular_l10n_1.L10N_PREFIX,
                            useValue: 'kendo.chip-list'
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    ChipListComponent.ctorParameters = function () { return [
        { type: kendo_angular_l10n_1.LocalizationService }
    ]; };
    ChipListComponent.propDecorators = {
        hostClass: [{ type: core_1.HostBinding, args: ['class.k-chip-list',] }],
        direction: [{ type: core_1.HostBinding, args: ['attr.dir',] }],
        selection: [{ type: core_1.Input }],
        selectedChange: [{ type: core_1.Output }],
        remove: [{ type: core_1.Output }],
        chips: [{ type: core_1.ContentChildren, args: [chip_component_1.ChipComponent,] }],
        single: [{ type: core_1.HostBinding, args: ['class.k-selection-single',] }],
        multiple: [{ type: core_1.HostBinding, args: ['class.k-selection-multiple',] }],
        onClick: [{ type: core_1.HostListener, args: ['click', ['$event'],] }]
    };
    return ChipListComponent;
}());
exports.ChipListComponent = ChipListComponent;
