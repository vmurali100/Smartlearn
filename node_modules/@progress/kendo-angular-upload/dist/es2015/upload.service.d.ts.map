{"version":3,"file":"upload.service.d.ts","sources":["upload.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { HttpClient } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { AsyncSettings } from './types/async-settings';\nimport { FileInfo } from './types';\nimport { FileMap } from './types/file-map';\nimport { CancelEvent, ClearEvent, ErrorEvent, PauseEvent, RemoveEvent, ResumeEvent, SelectEvent, SuccessEvent, UploadEvent, UploadProgressEvent } from './events';\nimport { ChunkSettings } from './types';\n/**\n * @hidden\n */\nexport declare type ComponentType = 'FileSelect' | 'Upload';\n/**\n * @hidden\n */\nexport declare class UploadService {\n    private http;\n    cancelEvent: EventEmitter<CancelEvent>;\n    clearEvent: EventEmitter<ClearEvent>;\n    completeEvent: EventEmitter<any>;\n    errorEvent: EventEmitter<ErrorEvent>;\n    pauseEvent: EventEmitter<PauseEvent>;\n    removeEvent: EventEmitter<RemoveEvent>;\n    resumeEvent: EventEmitter<ResumeEvent>;\n    selectEvent: EventEmitter<SelectEvent>;\n    successEvent: EventEmitter<SuccessEvent>;\n    uploadEvent: EventEmitter<UploadEvent>;\n    uploadProgressEvent: EventEmitter<UploadProgressEvent>;\n    /**\n     * Required for the `ControlValueAccessor` integration\n     */\n    changeEvent: EventEmitter<Array<FileInfo>>;\n    /**\n     * Default async settings\n     */\n    async: AsyncSettings;\n    /**\n     * Default chunk settings\n     */\n    chunk: ChunkSettings;\n    component: ComponentType;\n    private chunkMap;\n    private fileList;\n    constructor(http: HttpClient);\n    readonly files: FileMap;\n    setChunkSettings(settings: ChunkSettings | boolean): void;\n    onChange(): void;\n    addFiles(files: Array<FileInfo>): void;\n    addInitialFiles(initialFiles: Array<FileInfo>): void;\n    addInitialFileSelectFiles(initialFiles: Array<any>): void;\n    resumeFile(uid: string): void;\n    pauseFile(uid: string): void;\n    removeFiles(uid: string): void;\n    cancelFiles(uid: string): void;\n    clearFiles(): void;\n    uploadFiles(): void;\n    retryFiles(uid: string): void;\n    private _uploadFiles;\n    private performRemove;\n    private performUpload;\n    private onSuccess;\n    private onError;\n    private onProgress;\n    private onChunkProgress;\n    private checkAllComplete;\n    private shouldUploadNextFile;\n    private cloneRequestHeaders;\n    private populateRequestOptions;\n    private populateUploadFormData;\n    private populateRemoveFormData;\n    private populateClientFormData;\n    private getNextChunk;\n    private getChunkInfo;\n    private updateChunkInfo;\n    private removeChunkInfo;\n    private getChunkMetadata;\n    private isChunkUploadComplete;\n}\n"]}