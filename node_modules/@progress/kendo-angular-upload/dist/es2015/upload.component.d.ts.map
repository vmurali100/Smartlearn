{"version":3,"file":"upload.component.d.ts","sources":["upload.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { HttpHeaders } from '@angular/common/http';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { Direction } from './types/direction';\nimport { FileInfo, FileRestrictions } from './types';\nimport { FileMap } from './types/file-map';\nimport { NavigationService } from './navigation.service';\nimport { FileTemplateDirective } from './templates/file-template.directive';\nimport { CancelEvent, ClearEvent, ErrorEvent, RemoveEvent, SelectEvent, SuccessEvent, UploadEvent, UploadProgressEvent } from './events';\nimport { UploadService } from './upload.service';\nimport { ChunkSettings } from './types/chunk-settings';\nimport { DropZoneService } from './dropzone.service';\n/**\n * @hidden\n */\nexport declare const UPLOAD_VALUE_ACCESSOR: any;\n/**\n * Represents the [Kendo UI Upload component for Angular]({% slug overview_upload %}).\n */\nexport declare class UploadComponent implements OnInit, OnDestroy, ControlValueAccessor {\n    private uploadService;\n    private localization;\n    private navigation;\n    private dropZoneService;\n    private _ngZone;\n    private renderer;\n    private cdr;\n    /**\n     * By default, the selected files are immediately uploaded\n     * ([see example]({% slug fileprocessing_upload %}#toc-automatic-upload-of-files)).\n     * To change this behavior, set `autoUpload` to `false`.\n     */\n    autoUpload: boolean;\n    /**\n     * When enabled, all files in the selection are uploaded in one request\n     * ([see example]({% slug fileprocessing_upload %}#toc-upload-of-batches-of-files)).\n     * Any files that are selected one after the other are uploaded in separate requests.\n     */\n    batch: boolean;\n    /**\n     * Configures whether credentials (cookies, headers) will be sent for cross-site requests\n     * ([see example]({% slug credentials_upload %}#toc-attaching-credentials-to-requests)).\n     * The default values is `true`. Setting `withCredentials` has no effect on same-site requests.\n     * To add credentials to the request, use the `saveHeaders` or `removeHeaders` property,\n     * or the [`upload`]({% slug api_upload_uploadevent %}) event.\n     */\n    withCredentials: boolean;\n    /**\n     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key which contains the files submitted to `saveUrl`.\n     * The default value is `files`.\n     */\n    saveField: string;\n    /**\n     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)\n     * that are attached to each upload request.\n     */\n    saveHeaders: HttpHeaders;\n    /**\n     * Sets the [`RequestMethod`](https://angular.io/api/http/RequestMethod) of the upload request.\n     * The default value is `POST`.\n     */\n    saveMethod: string;\n    /**\n     * Sets the URL of the endpoint for the upload request.\n     * The request [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key is named after the `saveField` property.\n     * It contains the list of files to be uploaded.\n     */\n    saveUrl: string;\n    /**\n     * Sets the expected [`response type`](https://angular.io/api/common/http/HttpRequest#responseType) of the server.\n     * It is used to parse the response appropriately.\n     * The default value is `json`.\n     */\n    responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    /**\n     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key\n     * which contains the list of file names that are submitted to `removeUrl`.\n     * The default value is `fileNames`.\n     */\n    removeField: string;\n    /**\n     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)\n     * that are attached to each `remove` request.\n     */\n    removeHeaders: HttpHeaders;\n    /**\n     * Sets the [`RequestMethod`](https://angular.io/api/http/RequestMethod) of the `remove` request.\n     * The default value is `POST`.\n     */\n    removeMethod: string;\n    /**\n     * Sets the URL of the endpoint for the `remove` request.\n     * The [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) request key is named after the `removeField` property.\n     * It contains the list of file names which will be removed.\n     */\n    removeUrl: string;\n    /**\n     * Enables the chunk functionality of the Upload.\n     *\n     * The default value is `false`.\n     */\n    chunkable: ChunkSettings | boolean;\n    /**\n     * Specifies if the selected files are uploaded simultaneously or one by one.\n     *\n     * The default value is `true`.\n     */\n    concurrent: boolean;\n    /**\n     * Enables the selection of multiple files\n     * ([see example]({% slug fileprocessing_upload %}#toc-upload-of-sinlge-or-multiple-files)).\n     * If set to `false`, only one file can be selected at a time.\n     */\n    multiple: boolean;\n    /**\n     * Disables the Upload ([see example]({% slug disabledstate_upload %})).\n     * The default value is `false`.\n     */\n    disabled: boolean;\n    /**\n     * Toggles the visibility of the file list.\n     */\n    showFileList: boolean;\n    /**\n     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n     */\n    tabindex: number;\n    /**\n     * Specifies the id of the external drop zone to associate with the Upload.\n     */\n    zoneId: string;\n    /**\n     * @hidden\n     */\n    tabIndex: number;\n    /**\n     * Sets the `accept` attribute of the `input` element of the Upload.\n     */\n    accept: string;\n    /**\n     * Sets the restrictions for selected files ([see example]({% slug api_upload_filerestrictions %})).\n     */\n    restrictions: FileRestrictions;\n    /**\n     * @hidden\n     */\n    focusableId: string;\n    fileTemplate: FileTemplateDirective;\n    fileSelect: ElementRef;\n    fileSelectButton: ElementRef;\n    /**\n     * Fires when the user navigates outside the component.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires when the upload is canceled while in progress.\n     */\n    cancel: EventEmitter<CancelEvent>;\n    /**\n     * Fires when the file list is about to be cleared. If prevented, the files will not be cleared.\n     */\n    clear: EventEmitter<ClearEvent>;\n    /**\n     * Fires when all active uploads are completed either successfully or with errors.\n     */\n    complete: EventEmitter<any>;\n    /**\n     * Fires when an `upload` or `remove` operation has failed.\n     */\n    error: EventEmitter<ErrorEvent>;\n    /**\n     * Fires when the component is focused.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires when the upload of a file has been paused.\n     */\n    pause: EventEmitter<any>;\n    /**\n     * Fires when an uploaded file is about to be removed. If prevented, the files will remain in the list.\n     */\n    remove: EventEmitter<RemoveEvent>;\n    /**\n     * Fires when the upload of a file has been resumed.\n     */\n    resume: EventEmitter<any>;\n    /**\n     * Fires when files are selected. If prevented, the selected files will not be added to the list.\n     */\n    select: EventEmitter<SelectEvent>;\n    /**\n     * Fires when an `upload` or `remove` operation is successfully completed.\n     */\n    success: EventEmitter<SuccessEvent>;\n    /**\n     * Fires when one or more files are about to be uploaded. If prevented, the files will neither be uploaded, nor added to the file list.\n     */\n    upload: EventEmitter<UploadEvent>;\n    /**\n     * Fires when one or more files are being uploaded.\n     */\n    uploadProgress: EventEmitter<UploadProgressEvent>;\n    /**\n     * Fires when the value of the component has changed as a result of a successful `upload`, `remove` or `clear` operation.\n     */\n    valueChange: EventEmitter<Array<FileInfo>>;\n    hostDefaultClasses: boolean;\n    readonly hostDisabledClass: boolean;\n    readonly dir: string;\n    /**\n     * @hidden\n     */\n    _restrictions: FileRestrictions;\n    /**\n     * @hidden\n     */\n    fileList: FileMap;\n    direction: Direction;\n    private wrapper;\n    private documentClick;\n    private blurSubscription;\n    private wrapperFocusSubscription;\n    private selectButtonFocusSubscription;\n    private localizationChangeSubscription;\n    private subs;\n    constructor(uploadService: UploadService, localization: LocalizationService, navigation: NavigationService, dropZoneService: DropZoneService, _ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef, wrapper: ElementRef);\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    handleKeydown(event: any): void;\n    /**\n     * @hidden\n     */\n    writeValue(newValue: any): void;\n    protected onTouchedCallback: Function;\n    protected onChangeCallback: Function;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @hidden\n     */\n    readonly selectButtonTabIndex: number;\n    /**\n     * @hidden\n     */\n    onFileSelectButtonFocus(_event?: any): void;\n    /**\n     * @hidden\n     */\n    onFileSelectButtonBlur(_event?: any): void;\n    /**\n     * @hidden\n     */\n    readonly showActionButtons: boolean;\n    /**\n     * @hidden\n     */\n    readonly showTotalStatus: boolean;\n    /**\n     * @hidden\n     */\n    textFor(key: string): string;\n    /**\n     * Focuses the underlying input element.\n     */\n    focus(): void;\n    /**\n     * @hidden\n     * @deprecated\n     */\n    focusComponent(): void;\n    /**\n     * Blurs the Upload if it was previously focused.\n     */\n    blur(): void;\n    /**\n     * @hidden\n     * @deprecated\n     */\n    blurComponent(): void;\n    /**\n     * Pauses the upload process of a file that is currently uploading.\n     * The `pauseFileByUid` method requires the `chunkable` option of the Upload to be enabled.\n     *\n     * @param uid - The `uid` of the file that will be paused.\n     */\n    pauseFileByUid(uid: string): void;\n    /**\n     * Resumes the upload process for a file that has been previously paused.\n     * The `resumeFileByUid` method requires the `chunkable` option of the Upload to be enabled.\n     *\n     * @param uid - The `uid` of the file that will be resumed.\n     */\n    resumeFileByUid(uid: string): void;\n    /**\n     * Triggers the removal of a file or a batch of files.\n     * @param uid - The `uid` of the file or a batch of files that will be removed.\n     */\n    removeFilesByUid(uid: string): void;\n    /**\n     * Triggers another upload attempt of an unsuccessfully uploaded file or a batch of files.\n     * @param uid - The `uid` of the file or a batch of files to be retried.\n     */\n    retryUploadByUid(uid: string): void;\n    /**\n     * Cancels the upload of a file or a batch of files.\n     * @param uid - The `uid` of the file or a batch of files that will be canceled.\n     */\n    cancelUploadByUid(uid: string): void;\n    /**\n     * Uploads the currently selected files which pass the set restrictions.\n     */\n    uploadFiles(): void;\n    /**\n     * Visually clears all files from the UI without issuing requests to the remove handler.\n     */\n    clearFiles(): void;\n    /**\n     * @hidden\n     * Used by the external dropzone to add files to the Upload\n     */\n    addFiles(files: FileInfo[]): void;\n    /**\n     * @hidden\n     * Used to determine if the component is empty.\n     */\n    isEmpty(): boolean;\n    private verifySettings;\n    private subscribeBlur;\n    private subscribeFocus;\n    private attachEventHandlers;\n}\n"]}