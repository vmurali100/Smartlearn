/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Input, HostBinding } from '@angular/core';
const sizeClasses = {
    'default': 'k-icon',
    'xsmall': 'k-icon-xs',
    'small': 'k-icon-sm',
    'medium': 'k-icon-md',
    'large': 'k-icon-lg',
    'xlarge': 'k-icon-xl'
};
/**
 * @hidden
 */
export class IconBase {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    get horizontalFlip() {
        return this.flip === 'horizontal' || this.flip === 'both';
    }
    get verticalFlip() {
        return this.flip === 'vertical' || this.flip === 'both';
    }
    /**
     * Specifies the theme color for the Icon.
     *
     * The possible values are:
     * * `inherit` (Default)&mdash;Applies coloring based on the current color.
     * * `primary` &mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverted`&mdash; Applies coloring based on inverted theme color.
     *
     */
    set themeColor(themeColor) {
        const element = this.element.nativeElement;
        this._themeColor = themeColor;
        this.renderer.removeClass(element, `k-color-${themeColor}`);
        if (themeColor) {
            this.renderer.addClass(element, `k-color-${themeColor}`);
        }
    }
    get themeColor() {
        return this._themeColor;
    }
    /**
     * Specifies the size of the Icon.
     *
     * The possible values are:
     * * `default` (Default) (Font-size: 16px; Width: 16px; Height: 16px)
     * * `xsmall` (Font-size: 8px; Width: 8px; Height: 8px;)
     * * `small` (Font-size: 12px; Width: 12px; Height: 12px;)
     * * `medium` (Font-size: 32px; Width: 32px; Height: 32px;)
     * * `large` (Font-size: 48px; Width: 48px; Height: 48px;)
     * * `xlarge` (Font-size: 64px; Width: 64px; Height: 64px;)
     *
     */
    set size(size) {
        const element = this.element.nativeElement;
        this._size = size;
        const sizeClass = sizeClasses[this.size];
        this.renderer.removeClass(element, sizeClass);
        if (size !== 'default') {
            this.renderer.addClass(element, sizeClass);
        }
    }
    get size() {
        return this._size;
    }
}
IconBase.propDecorators = {
    horizontalFlip: [{ type: HostBinding, args: ['class.k-flip-h',] }],
    verticalFlip: [{ type: HostBinding, args: ['class.k-flip-v',] }],
    flip: [{ type: Input }],
    themeColor: [{ type: Input }],
    size: [{ type: Input }]
};
