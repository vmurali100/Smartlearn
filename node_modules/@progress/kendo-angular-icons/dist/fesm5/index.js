/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { __extends } from 'tslib';
import { HostBinding, Input, Component, ElementRef, Renderer2, isDevMode, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

var sizeClasses = {
    'default': 'k-icon',
    'xsmall': 'k-icon-xs',
    'small': 'k-icon-sm',
    'medium': 'k-icon-md',
    'large': 'k-icon-lg',
    'xlarge': 'k-icon-xl'
};
/**
 * @hidden
 */
var IconBase = /** @class */ (function () {
    function IconBase(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    Object.defineProperty(IconBase.prototype, "horizontalFlip", {
        get: function () {
            return this.flip === 'horizontal' || this.flip === 'both';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconBase.prototype, "verticalFlip", {
        get: function () {
            return this.flip === 'vertical' || this.flip === 'both';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconBase.prototype, "themeColor", {
        get: function () {
            return this._themeColor;
        },
        /**
         * Specifies the theme color for the Icon.
         *
         * The possible values are:
         * * `inherit` (Default)&mdash;Applies coloring based on the current color.
         * * `primary` &mdash;Applies coloring based on primary theme color.
         * * `secondary`&mdash;Applies coloring based on secondary theme color.
         * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
         * * `info`&mdash;Applies coloring based on info theme color.
         * * `success`&mdash; Applies coloring based on success theme color.
         * * `warning`&mdash; Applies coloring based on warning theme color.
         * * `error`&mdash; Applies coloring based on error theme color.
         * * `dark`&mdash; Applies coloring based on dark theme color.
         * * `light`&mdash; Applies coloring based on light theme color.
         * * `inverted`&mdash; Applies coloring based on inverted theme color.
         *
         */
        set: function (themeColor) {
            var element = this.element.nativeElement;
            this._themeColor = themeColor;
            this.renderer.removeClass(element, "k-color-" + themeColor);
            if (themeColor) {
                this.renderer.addClass(element, "k-color-" + themeColor);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconBase.prototype, "size", {
        get: function () {
            return this._size;
        },
        /**
         * Specifies the size of the Icon.
         *
         * The possible values are:
         * * `default` (Default) (Font-size: 16px; Width: 16px; Height: 16px)
         * * `xsmall` (Font-size: 8px; Width: 8px; Height: 8px;)
         * * `small` (Font-size: 12px; Width: 12px; Height: 12px;)
         * * `medium` (Font-size: 32px; Width: 32px; Height: 32px;)
         * * `large` (Font-size: 48px; Width: 48px; Height: 48px;)
         * * `xlarge` (Font-size: 64px; Width: 64px; Height: 64px;)
         *
         */
        set: function (size) {
            var element = this.element.nativeElement;
            this._size = size;
            var sizeClass = sizeClasses[this.size];
            this.renderer.removeClass(element, sizeClass);
            if (size !== 'default') {
                this.renderer.addClass(element, sizeClass);
            }
        },
        enumerable: true,
        configurable: true
    });
    IconBase.propDecorators = {
        horizontalFlip: [{ type: HostBinding, args: ['class.k-flip-h',] }],
        verticalFlip: [{ type: HostBinding, args: ['class.k-flip-v',] }],
        flip: [{ type: Input }],
        themeColor: [{ type: Input }],
        size: [{ type: Input }]
    };
    return IconBase;
}());

/**
 * Represents the Kendo UI Icon component for Angular.
 */
var IconComponent = /** @class */ (function (_super) {
    __extends(IconComponent, _super);
    function IconComponent(element, renderer) {
        var _this = _super.call(this, element, renderer) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.hostClass = true;
        return _this;
    }
    Object.defineProperty(IconComponent.prototype, "name", {
        get: function () {
            return this._name;
        },
        /**
         * Defines the name for an existing icon in a Kendo UI theme, which will be rendered.
         * All [Kendo UI Icons]({% slug icons %}#toc-list-of-font-icons) are supported.
         */
        set: function (name) {
            var element = this.element.nativeElement;
            this._name = name;
            this.renderer.removeClass(element, "k-i-" + this.name);
            if (name) {
                this.renderer.addClass(element, "k-i-" + this.name);
            }
        },
        enumerable: true,
        configurable: true
    });
    IconComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoIcon',
                    selector: 'kendo-icon',
                    template: ""
                },] },
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    IconComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class.k-icon',] }],
        name: [{ type: Input }]
    };
    return IconComponent;
}(IconBase));

/**
 * Represents the Kendo UI SVG Icon component for Angular.
 */
var SVGIconComponent = /** @class */ (function (_super) {
    __extends(SVGIconComponent, _super);
    function SVGIconComponent(domSanitizer, element, renderer) {
        var _this = _super.call(this, element, renderer) || this;
        _this.domSanitizer = domSanitizer;
        _this.element = element;
        _this.renderer = renderer;
        _this.hostClass = true;
        return _this;
    }
    Object.defineProperty(SVGIconComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        /**
         * Defines the SVG icon, which will be rendered.
         */
        set: function (icon) {
            var element = this.element.nativeElement;
            if (this._icon && this._icon.name) {
                this.renderer.removeClass(element, "k-svg-i-" + this._icon.name);
            }
            this._icon = icon;
            this.renderer.addClass(element, "k-svg-i-" + this._icon.name);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SVGIconComponent.prototype, "content", {
        get: function () {
            if (!this.icon) {
                return;
            }
            this.safeContent = this.safeContent || this.domSanitizer.bypassSecurityTrustHtml(this.icon.content);
            return this.safeContent;
        },
        enumerable: true,
        configurable: true
    });
    SVGIconComponent.prototype.ngOnInit = function () {
        this.verifyIconProperty();
    };
    SVGIconComponent.prototype.verifyIconProperty = function () {
        if (!isDevMode()) {
            return;
        }
        if (!this._icon) {
            throw new Error("\n                Invalid configuration.\n                The input [icon] is required for the Kendo UI SVG Icon component for Angular.\n                See https://www.telerik.com/kendo-angular-ui/components/icons/svg-icon\n            ");
        }
    };
    SVGIconComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoSVGIcon',
                    selector: 'kendo-svg-icon',
                    template: "\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        [attr.viewBox]=\"icon.viewBox\" [innerHTML]=\"content\">\n        </svg>"
                },] },
    ];
    /** @nocollapse */
    SVGIconComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SVGIconComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class.k-svg-icon',] }],
        icon: [{ type: Input }]
    };
    return SVGIconComponent;
}(IconBase));

var exportedModules = [
    IconComponent
];
var declarations = exportedModules.slice();
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Icon component.
 */
var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [declarations],
                    exports: [exportedModules],
                    imports: [CommonModule]
                },] },
    ];
    return IconModule;
}());

var exportedModules$1 = [
    SVGIconComponent
];
var declarations$1 = exportedModules$1.slice();
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the SVG Icon component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the SVG Icon module
 * import { SVGIconModule } from '@progress/kendo-angular-icons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, SVGIconModule], // import SVG Icon module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var SVGIconModule = /** @class */ (function () {
    function SVGIconModule() {
    }
    SVGIconModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [declarations$1],
                    exports: [exportedModules$1],
                    imports: [CommonModule]
                },] },
    ];
    return SVGIconModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Icons components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Icons module
 * import { IconsModule } from '@progress/kendo-angular-icons';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, IconsModule], // import Icons module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var IconsModule = /** @class */ (function () {
    function IconsModule() {
    }
    IconsModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        IconModule,
                        SVGIconModule
                    ]
                },] },
    ];
    return IconsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { IconBase, IconComponent, SVGIconComponent, IconModule, SVGIconModule, IconsModule };
