{"version":3,"file":"column.component.d.ts","sources":["column.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef } from '@angular/core';\nimport { CellTemplateDirective } from '../rendering/cell-template.directive';\nimport { GroupHeaderTemplateDirective } from '../grouping/group-header-template.directive';\nimport { GroupHeaderColumnTemplateDirective } from '../grouping/group-header-column-template.directive';\nimport { EditTemplateDirective } from '../editing/edit-template.directive';\nimport { ColumnSortSettings } from './sort-settings';\nimport { GroupFooterTemplateDirective } from '../grouping/group-footer-template.directive';\nimport { ColumnBase } from './column-base';\nimport { FilterCellTemplateDirective } from '../filtering/cell/filter-cell-template.directive';\nimport { FilterMenuTemplateDirective } from '../filtering/menu/filter-menu-template.directive';\n/**\n * @hidden\n */\nexport declare function isColumnComponent(column: any): column is ColumnComponent;\n/**\n * Represents the columns of the [Angular Data Grid]({% slug overview_grid %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"Discontinued\" width=\"120\">\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <input type=\"checkbox\" [checked]=\"dataItem.Discontinued\" disabled/>\n *              </ng-template>\n *          </kendo-grid-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *    public gridData: any[];\n *\n *    constructor() {\n *        this.gridData = products;\n *    }\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n *\n * ```\n */\nexport declare class ColumnComponent extends ColumnBase {\n    /**\n     * The field to which the column is bound.\n     */\n    field: string;\n    /**\n     * The format that is applied to the value before it is displayed.\n     * Takes the `{0:format}` form where `format` is a standard number format, a custom number format,\n     * a standard date format, a custom date format or a format object. For more information on the supported date and number formats,\n     * refer to the [kendo-intl](https://github.com/telerik/kendo-intl/blob/develop/docs/index.md) documentation.\n     *\n     * Standard format:\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" format=\"{0:c}\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     *\n     * Format object for currency:\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" [format]=\"{ style: 'currency', currency: 'EUR' }\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     *\n     * Format object for dates:\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"FirstOrderedOn\" [format]=\"{ date: 'short' }\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    format: any;\n    /**\n     * Allows the column headers to be clicked and the `sortChange` event emitted.\n     * You have to handle the `sortChange` event yourself and sort the data.\n     */\n    sortable: boolean | ColumnSortSettings;\n    /**\n     * Determines if the column can be dragged to the group panel. The default value is `true`.\n     * If set to `false`, you can group the columns by the column field by using the API of the Grid.\n     */\n    groupable: boolean;\n    /**\n     * Defines the editor type ([see example]({% slug editing_reactive_forms_grid %}#toc-setup)).\n     * Used when the column enters the edit mode. The default value is `text`.\n     *\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" editor=\"numeric\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    editor: 'text' | 'numeric' | 'date' | 'boolean';\n    /**\n     * Defines the filter type that is displayed inside the filter row. The default value is `text`.\n     *\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" filter=\"numeric\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    filter: 'text' | 'numeric' | 'boolean' | 'date';\n    /**\n     * Defines if a filter UI will be displayed for this column. The default value is `true`.\n     *\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" [filterable]=\"false\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    filterable: boolean;\n    /**\n     * Defines whether the column is editable. The default value is `true`.\n     *\n     * @example\n     * ```html-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" [editable]=\"false\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    editable: boolean;\n    template: CellTemplateDirective;\n    groupHeaderTemplate: GroupHeaderTemplateDirective;\n    groupHeaderColumnTemplate: GroupHeaderColumnTemplateDirective;\n    groupFooterTemplate: GroupFooterTemplateDirective;\n    editTemplate: EditTemplateDirective;\n    filterCellTemplate: FilterCellTemplateDirective;\n    filterMenuTemplate: FilterMenuTemplateDirective;\n    constructor(parent?: ColumnBase);\n    readonly templateRef: TemplateRef<any>;\n    readonly groupHeaderTemplateRef: TemplateRef<any>;\n    readonly groupHeaderColumnTemplateRef: TemplateRef<any>;\n    readonly groupFooterTemplateRef: TemplateRef<any>;\n    readonly editTemplateRef: TemplateRef<any>;\n    readonly filterCellTemplateRef: TemplateRef<any>;\n    readonly filterMenuTemplateRef: TemplateRef<any>;\n    readonly displayTitle: string;\n}\n"]}