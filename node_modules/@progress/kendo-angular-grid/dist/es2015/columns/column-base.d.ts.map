{"version":3,"file":"column-base.d.ts","sources":["column-base.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { TemplateRef, QueryList } from '@angular/core';\nimport { HeaderTemplateDirective } from '../rendering/header/header-template.directive';\nimport { FooterTemplateDirective } from '../rendering/footer/footer-template.directive';\nimport { ColumnMenuTemplateDirective } from '../column-menu/column-menu-template.directive';\n/**\n * @hidden\n */\nexport declare const isSpanColumn: (column: any) => any;\n/**\n * @hidden\n */\nexport declare const isCheckboxColumn: (column: any) => any;\n/**\n * The base class for the column components of the Grid.\n */\nexport declare class ColumnBase {\n    parent?: ColumnBase;\n    /**\n     * @hidden\n     */\n    matchesMedia: boolean;\n    /**\n     * The column index after reordering.\n     *\n     * > `orderIndex` is a read-only property. Setting this field does not affect column order.\n     */\n    orderIndex: number;\n    /**\n     * @hidden\n     */\n    leafIndex: number;\n    /**\n     * @hidden\n     */\n    isColumnGroup: boolean;\n    /**\n     * @hidden\n     */\n    isSpanColumn: boolean;\n    /**\n     * Indicates whether the column is resizable.\n     * @default true\n     */\n    resizable: boolean;\n    /**\n     * Indicates whether the column is reorderable.\n     * @default true\n     */\n    reorderable: boolean;\n    /**\n     * The width (in pixels) below which the user is not able to resize the column by using the UI.\n     */\n    minResizableWidth: number;\n    /**\n     * The title of the column.\n     */\n    title: string;\n    /**\n     * The width of the column (in pixels).\n     */\n    width: number;\n    /**\n     * Indicates whether the column will be resized during initialization so that it fits its header and row content.\n     */\n    autoSize: boolean;\n    /**\n     * Toggles the locked (frozen) state of the columns ([more information and example]({% slug locked_columns_grid %})).\n     *\n     * @default false\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" [scrollable]=\"scrollable\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\" [locked]=\"true\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = products;\n     *    }\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     *\n     * ```\n     */\n    locked: boolean;\n    /**\n     * Sets the visibility of the column ([see example]({% slug hidden_columns_grid %}#toc-using-built-in-options)).\n     *\n     * @default false\n     */\n    hidden: boolean;\n    /**\n     * Sets the condition that needs to be satisfied for a column to remain visible ([see example]({% slug responsive_grid %}#toc-columns)).\n     * If you set the `hidden` property, the behavior of `media` is overridden.\n     *\n     * @example\n     * ```ng-template-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" media=\"(min-width: 320px)\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     *\n     * Accepts the device identifiers that are [available in Bootstrap 4](https://v4-alpha.getbootstrap.com/layout/grid/#grid-options)\n     * ([see example]({% slug responsive_grid %}#toc-bootstrap-4-compatibility)):\n     * * `\"xs\"`&mdash;Equivalent to `\"(max-width: 576px)\"`.\n     * * `\"sm\"`&mdash;Equivalent to `\"(min-width: 576px)\"`.\n     * * `\"md\"`&mdash;Equivalent to `\"(min-width: 768px)\"`.\n     * * `\"lg\"`&mdash;Equivalent to `\"(min-width: 992px)\"`.\n     * * `\"xl\"`&mdash;Equivalent to `\"(min-width: 1200px)\"`.\n     *\n     * @example\n     * ```ng-template-no-run\n     * <kendo-grid>\n     *    <kendo-grid-column field=\"UnitPrice\" media=\"md\">\n     *    </kendo-grid-column>\n     * </kendo-grid>\n     * ```\n     */\n    media: string;\n    /**\n     * Specifies if the column can be locked or unlocked from the column menu or by reordering the columns.\n     */\n    lockable: boolean;\n    /**\n     * Specifies if the column menu will be shown for the column.\n     */\n    columnMenu: boolean;\n    /**\n     * Specifies if the column will be included in the column-chooser list.\n     */\n    includeInChooser: boolean;\n    /**\n     * Sets the custom styles for the table cells (excluding the footer and header ones) of the column. Under the hood,\n     * to apply the property, the `style` option uses the\n     * [NgStyle]({{ site.data.urls.angular['ngstyleapi'] }}) directive.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [style]=\"{'text-align': 'right'}\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    style: {\n        [key: string]: string;\n    };\n    /**\n     * Sets the custom styles for the header cell of the column. Under the hood, to apply the property,\n     * the `headerStyle` option uses the\n     * [NgStyle]({{ site.data.urls.angular['ngstyleapi'] }}) directive.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [headerStyle]=\"{'text-align': 'right'}\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    headerStyle: {\n        [key: string]: string;\n    };\n    /**\n     * Sets the custom styles for the footer cell of the column. Under the hood, to apply the property,\n     * the `footerStyle` option uses the\n     * [NgStyle]({{ site.data.urls.angular['ngstyleapi'] }}) directive.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [footerStyle]=\"{'text-align': 'right'}\">\n     *              <ng-template kendoGridFooterTemplate>\n     *                  footer text\n     *              </ng-template>\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    footerStyle: {\n        [key: string]: string;\n    };\n    /**\n     * Sets the custom CSS classes to the column cells. Under the hood, to apply the property, the `class` option uses the\n     * [NgClass]({{ site.data.urls.angular['ngclassapi'] }}) directive.\n     * To customize header and footer column cells, use the [`headerClass`]({% slug api_grid_columncomponent %}#toc-headerclass)\n     * and [`footerClass`]({% slug api_grid_columncomponent %}#toc-footerclass) inputs.\n     *\n     * @example\n     * ```ts\n     * import { Component, ViewEncapsulation } from '@angular/core';\n     *\n     * _@Component({\n     *    selector: 'my-app',\n     *    encapsulation: ViewEncapsulation.None,\n     *    styles: [`\n     *        tr .myClass {\n     *            text-align: right\n     *       }\n     *    `],\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [class]=\"{'myClass': true}\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    cssClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /**\n     * Sets the custom CSS classes to the column header cell. Under the hood, to apply the property,\n     * the `headerClass` option uses the\n     * [NgClass]({{ site.data.urls.angular['ngclassapi'] }}) directive.\n     *\n     * @example\n     * ```ts\n     * import { Component, ViewEncapsulation } from '@angular/core';\n     *\n     * _@Component({\n     *    selector: 'my-app',\n     *    encapsulation: ViewEncapsulation.None,\n     *    styles: [`\n     *        tr .myClass {\n     *            text-align: right\n     *       }\n     *    `],\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [headerClass]=\"{'myClass': true}\">\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    headerClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /**\n     * Sets the custom CSS classes to the column footer cell. Under the hood, to apply the property,\n     * the `footerClass` option uses the\n     * [NgClass]({{ site.data.urls.angular['ngclassapi'] }}) directive.\n     *\n     * @example\n     * ```ts\n     * import { Component, ViewEncapsulation } from '@angular/core';\n     *\n     * _@Component({\n     *    selector: 'my-app',\n     *    encapsulation: ViewEncapsulation.None,\n     *    styles: [`\n     *        tr .myClass {\n     *            text-align: right\n     *       }\n     *    `],\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" style=\"height: 200px\">\n     *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\" [footerClass]=\"{'myClass': true}\">\n     *              <ng-template kendoGridFooterTemplate>\n     *                  footer text\n     *              </ng-template>\n     *          </kendo-grid-column>\n     *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n     *          </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     *\n     * class AppComponent {\n     *    public gridData: any[];\n     *\n     *    constructor() {\n     *        this.gridData = [{\n     *            \"ProductID\": 1,\n     *            \"ProductName\": \"Chai\",\n     *            \"UnitPrice\": 18.0000,\n     *            \"Discontinued\": true\n     *          }, {\n     *            \"ProductID\": 2,\n     *            \"ProductName\": \"Chang\",\n     *            \"UnitPrice\": 19.0000,\n     *            \"Discontinued\": false\n     *          }];\n     *    }\n     * }\n     *\n     * ```\n     */\n    footerClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /**\n     * @hidden\n     */\n    headerTemplates: QueryList<HeaderTemplateDirective>;\n    /**\n     * @hidden\n     */\n    footerTemplate: FooterTemplateDirective;\n    /**\n     * @hidden\n     */\n    columnMenuTemplates: QueryList<ColumnMenuTemplateDirective>;\n    /**\n     * @hidden\n     */\n    resizeStartWidth: number;\n    /**\n     * @hidden\n     */\n    readonly level: number;\n    /**\n     * @hidden\n     */\n    readonly isLocked: boolean;\n    private _width;\n    /**\n     * @hidden\n     */\n    readonly colspan: number;\n    /**\n     * @hidden\n     */\n    rowspan(totalColumnLevels: number): number;\n    /**\n     * @hidden\n     */\n    readonly headerTemplateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    readonly footerTemplateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    readonly columnMenuTemplateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    readonly displayTitle: string;\n    /**\n     * @hidden\n     */\n    readonly isVisible: boolean;\n    constructor(parent?: ColumnBase);\n}\n"]}