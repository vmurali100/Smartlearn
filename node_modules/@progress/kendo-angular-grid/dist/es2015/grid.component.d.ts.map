{"version":3,"file":"grid.component.d.ts","sources":["grid.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { SelectionDirective } from './selection/selection.directive';\nimport { CellSelectedFn, SelectableSettings, SelectionEvent } from './selection/types';\nimport { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, QueryList, SimpleChange, NgZone, ChangeDetectorRef, TemplateRef, TrackByFunction } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { SortDescriptor, GroupDescriptor, GroupResult, CompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { DetailTemplateDirective } from './rendering/details/detail-template.directive';\nimport { ScrollMode } from './scrolling/scrollmode';\nimport { SortSettings } from './columns/sort-settings';\nimport { PagerSettings } from './pager/pager-settings';\nimport { BrowserSupportService } from './layout/browser-support.service';\nimport { GridDataResult, DataCollection } from './data/data.collection';\nimport { SelectionService } from './selection/selection.service';\nimport { EditService } from './editing/edit.service';\nimport { PageChangeEvent, DataStateChangeEvent } from './data/change-event-args.interface';\nimport { DetailsService } from './rendering/details/details.service';\nimport { DetailExpandEvent } from './rendering/details/detail-expand-event';\nimport { DetailCollapseEvent } from './rendering/details/detail-collapse-event';\nimport { GroupsService } from './grouping/groups.service';\nimport { ColumnsContainer } from './columns/columns-container';\nimport { GroupInfoService } from './grouping/group-info.service';\nimport { GroupableSettings } from './grouping/group-settings';\nimport { ChangeNotificationService } from './data/change-notification.service';\nimport { NoRecordsTemplateDirective } from './rendering/no-records-template.directive';\nimport { ColumnBase } from './columns/column-base';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { FilterService } from './filtering/filter.service';\nimport { PagerTemplateDirective } from './pager/pager-template.directive';\nimport { PDFService } from './pdf/pdf.service';\nimport { PDFExportEvent } from './pdf/pdf-export-event';\nimport { ResponsiveService } from \"./layout/responsive.service\";\nimport { ExcelService } from './excel/excel.service';\nimport { ExcelExportEvent } from './excel/excel-export-event';\nimport { ColumnList } from './columns/column-list';\nimport { RowClassFn, RowSelectedFn } from './rendering/common/row-class';\nimport { ToolbarTemplateDirective } from \"./rendering/toolbar/toolbar-template.directive\";\nimport { EditEvent } from \"./editing/edit-event-args.interface\";\nimport { RemoveEvent } from \"./editing/remove-event-args.interface\";\nimport { SaveEvent } from \"./editing/save-event-args.interface\";\nimport { CancelEvent } from \"./editing/cancel-event-args.interface\";\nimport { AddEvent } from \"./editing/add-event-args.interface\";\nimport { CellCloseEvent } from './editing/cell-close-event';\nimport { EditRowOptions } from './editing/edit-row-options.interface';\nimport { CellClickEvent } from './common/cell-click-event-args.interface';\nimport { ScrollSyncService } from \"./scrolling/scroll-sync.service\";\nimport { DomEventsService } from './common/dom-events.service';\nimport { ColumnResizingService } from \"./column-resizing/column-resizing.service\";\nimport { ColumnResizeArgs } from './column-resizing/column-resize.interface';\nimport { FilterableSettings } from './filtering/filterable';\nimport { ColumnReorderService } from './dragdrop/column-reorder.service';\nimport { ColumnReorderEvent } from './dragdrop/column-reorder-event';\nimport { ColumnReorderConfig } from './dragdrop/column-reorder-config';\nimport { NavigationService } from './navigation/navigation.service';\nimport { NavigationCell } from './navigation/navigation-cell.interface';\nimport { NavigationRow } from './navigation/navigation-row.interface';\nimport { ColumnInfoService } from \"./common/column-info.service\";\nimport { ScrollRequestService, ScrollRequest } from './scrolling/scroll-request.service';\nimport { SortService } from './common/sort.service';\nimport { ColumnMenuTemplateDirective } from './column-menu/column-menu-template.directive';\nimport { ColumnMenuSettings } from './column-menu/column-menu-settings.interface';\nimport { ColumnVisibilityChangeEvent } from './column-menu/column-visibility-change-event';\nimport { ColumnLockedChangeEvent } from './column-menu/column-locked-change-event';\nimport { ScrollBottomEvent } from './scrolling/scroll-bottom-event';\nimport { ContentScrollEvent } from './scrolling/content-scroll-event';\nimport { GridItem } from './data/grid-item.interface';\nimport { RowArgs } from './rendering/common/row-args';\nimport { CellSelectionService } from './selection/cell-selection.service';\n/**\n * Represents the Kendo UI Grid component for Angular.\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *        </kendo-grid>\n *    `\n * })\n * class AppComponent {\n *    public gridData: any[] = products;\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n * ```\n */\nexport declare class GridComponent implements AfterContentInit, AfterViewInit, OnDestroy, OnChanges, OnInit {\n    private supportService;\n    private selectionService;\n    private cellSelectionService;\n    wrapper: ElementRef;\n    private groupInfoService;\n    private groupsService;\n    private changeNotification;\n    private detailsService;\n    private editService;\n    private filterService;\n    private pdfService;\n    private responsiveService;\n    private renderer;\n    private excelService;\n    private ngZone;\n    private scrollSyncService;\n    private domEvents;\n    private columnResizingService;\n    private changeDetectorRef;\n    private columnReorderService;\n    private columnInfoService;\n    private navigationService;\n    private sortService;\n    private scrollRequestService;\n    /**\n     * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count\n     * ([more information and example]({% slug databinding_grid %})).\n     */\n    data: Array<any> | GridDataResult;\n    /**\n     * Defines the page size used by the Grid pager.\n     * Required by the [paging]({% slug paging_grid %}) functionality.\n     */\n    pageSize: number;\n    /**\n     * Defines the height (in pixels) that is used when the `scrollable` option of the Grid is set.\n     * To set the height of the Grid, you can also use `style.height`. The `style.height`\n     * option supports units such as `px`, `%`, `em`, `rem`, and others.\n     */\n    height: number;\n    /**\n     * Defines the row height that is used when the `scrollable` option of the Grid is set to `virtual`.\n     * Required by the [virtual scrolling functionality]({% slug scrollmmodes_grid %}).\n     */\n    rowHeight: number;\n    /**\n     * Defines the detail row height that is used when the `scrollable` option of the Grid is set to `virtual`.\n     * Required by the [virtual scrolling functionality]({% slug scrollmmodes_grid %}).\n     */\n    detailRowHeight: number;\n    /**\n     * Defines the number of records to be skipped by the pager.\n     * Required by the [paging]({% slug paging_grid %}) functionality.\n     */\n    skip: number;\n    /**\n     * Defines the scroll mode used by the Grid.\n     *\n     * The available options are:\n     *  - `none`&mdash;Renders no scrollbar.\n     *  - `scrollable`&mdash;The default scroll mode. It requires the setting of the `height` option.\n     *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\n     */\n    scrollable: ScrollMode;\n    /**\n     * Enables the single-row [selection]({% slug selection_grid %}) of the Grid.\n     */\n    selectable: SelectableSettings | boolean;\n    /**\n     * The descriptors by which the data will be sorted ([see example]({% slug sorting_grid %})).\n     */\n    sort: Array<SortDescriptor>;\n    /**\n     * A function that defines how to track changes for the data rows.\n     *\n     * By default, the Grid tracks changes by the index of the data item.\n     * Edited rows are tracked by reference.\n     * In some cases, you might need to override the default behavior,\n     * for example, when you implement editing with immutable data items.\n     *\n     * The following example demonstrates how to track items only by index.\n     *\n     * @example\n     * ```ts\n     * import { Component } from '@angular/core';\n     * import { GridItem } from '@progress/kendo-angular-grid';\n     *\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" [trackBy]=\"trackBy\">\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     *\n     *    public trackBy(index: number, item: GridItem): any {\n     *        console.log(item);\n     *        return index;\n     *    }\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    trackBy: TrackByFunction<GridItem>;\n    /**\n     * The descriptor by which the data will be filtered ([see examples]({% slug filtering_grid %})).\n     */\n    filter: CompositeFilterDescriptor;\n    /**\n     * The descriptors by which the data will be grouped ([see example]({% slug groupingbasics_grid %})).\n     */\n    /**\n    */\n    group: Array<GroupDescriptor>;\n    /**\n     * If set to `true`, the grid will render only the columns in the current viewport.\n     */\n    virtualColumns: boolean;\n    /**\n     * @hidden\n     */\n    readonly showTopToolbar: boolean;\n    /**\n     * @hidden\n     */\n    readonly showBottomToolbar: boolean;\n    /**\n     * @hidden\n     */\n    readonly isLocked: boolean;\n    /**\n     * @hidden\n     */\n    readonly showPager: boolean;\n    /**\n     * @hidden\n     */\n    readonly showGroupPanel: boolean;\n    /**\n     * @hidden\n     */\n    readonly groupableEmptyText: string;\n    /**\n     * @hidden\n     */\n    readonly marqueeSelection: boolean;\n    /**\n     * Enables the [filtering]({% slug filtering_grid %}) of the Grid columns that have their `field` option set.\n     */\n    filterable: FilterableSettings;\n    /**\n     * Enables the [sorting]({% slug sorting_grid %}) of the Grid columns that have their `field` option set.\n     */\n    sortable: SortSettings;\n    /**\n     * Configures the pager of the Grid ([see example]({% slug paging_grid %})).\n     *\n     * The available options are:\n     * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\n     * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.\n     * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.\n     * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.\n     * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.\n     */\n    pageable: PagerSettings | boolean;\n    /**\n     * If set to `true`, the user can group the Grid by dragging the column header cells.\n     * By default, grouping is disabled ([see example]({% slug groupingbasics_grid %})).\n     */\n    groupable: GroupableSettings | boolean;\n    /**\n     * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.\n     * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\n     */\n    navigable: boolean;\n    /**\n     * @hidden\n     *\n     * An alias for `navigable` for users who migrate from Kendo UI for jQuery.\n     */\n    /**\n    * @hidden\n    */\n    navigatable: boolean;\n    /**\n     * Indicates whether the Grid columns will be resized during initialization so that\n     * they fit their headers and row content. Defaults to `false`.\n     * Columns with `autoSize` set to `false` are excluded.\n     * To dynamically update the column width to match the new content,\n     * refer to [this example]({% slug resizing_columns_grid %}).\n     */\n    autoSize: boolean;\n    /**\n     * Defines a function that is executed for every data row in the component.\n     *\n     * @example\n     * ```ts\n     * import { Component, ViewEncapsulation } from '@angular/core';\n     * import { RowClassArgs } from '@progress/kendo-angular-grid';\n     *\n     * _@Component({\n     *    selector: 'my-app',\n     *    encapsulation: ViewEncapsulation.None,\n     *    styles: [`\n     *        .k-grid tr.even { background-color: #f45c42; }\n     *        .k-grid tr.odd { background-color: #41f4df; }\n     *    `],\n     *    template: `\n     *        <kendo-grid [data]=\"gridData\" [rowClass]=\"rowCallback\">\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     *\n     *    public rowCallback(context: RowClassArgs) {\n     *        const isEven = context.index % 2 == 0;\n     *        return {\n     *            even: isEven,\n     *            odd: !isEven\n     *        };\n     *    }\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    rowClass: RowClassFn;\n    /**\n     * Defines a Boolean function that is executed for each data row in the component\n     * ([see example]({% slug selection_grid %}#toc-setting-the-selected-rows)).\n     * Determines whether the row will be selected.\n     */\n    rowSelected: RowSelectedFn;\n    /**\n     * Defines a function that determines the selected state of a data cell.\n     * Returns an object with `selected` and `item` properties.\n     * The cell is marked as selected only if the `selected` property equals `true`.\n     *\n     * The function is executed for each data cell and may be called more than once\n     * as part of a change detection cycle. ([see example]({% slug grid_selection_custom %}toc-setting-the-selected-cells))\n     */\n    cellSelected: CellSelectedFn;\n    /**\n     * Returns the currently focused cell (if any).\n     */\n    readonly activeCell: NavigationCell;\n    /**\n     * Returns the currently focused row (if any).\n     */\n    readonly activeRow: NavigationRow;\n    /**\n     * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells\n     * ([see example]({% slug resizing_columns_grid %})).\n     *\n     * @default false\n     */\n    resizable: boolean;\n    /**\n     * If set to `true`, the user can reorder columns by dragging their header cells\n     * ([see example]({% slug reordering_columns_grid %})).\n     *\n     * @default false\n     */\n    reorderable: boolean;\n    /**\n     * Specifies if the loading indicator of the Grid will be displayed ([see example]({% slug databinding_grid %})).\n     *\n     * @default false\n     */\n    loading: boolean;\n    /**\n     * Specifies if the column menu of the columns will be displayed ([see example]({% slug columnmenu_grid %})).\n     *\n     * @default false\n     */\n    columnMenu: boolean | ColumnMenuSettings;\n    /**\n     * Specifies if the header of the grid will be hidden. The header is visible by default.\n     *\n     * > The header includes column headers and the [filter row]({% slug filtering_grid %}#toc-filter-row).\n     */\n    hideHeader: boolean;\n    /**\n     * Fires when the Grid filter is modified through the UI.\n     * You have to handle the event yourself and filter the data.\n     */\n    filterChange: EventEmitter<CompositeFilterDescriptor>;\n    /**\n     * Fires when the page of the Grid is changed ([see example]({% slug paging_grid %})).\n     * You have to handle the event yourself and page the data.\n     */\n    pageChange: EventEmitter<PageChangeEvent>;\n    /**\n     * Fires when the grouping of the Grid is changed.\n     * You have to handle the event yourself and group the data ([see example]({% slug groupingbasics_grid %})).\n     */\n    groupChange: EventEmitter<Array<GroupDescriptor>>;\n    /**\n     * Fires when the sorting of the Grid is changed ([see example]({% slug sorting_grid %})).\n     * You have to handle the event yourself and sort the data.\n     */\n    sortChange: EventEmitter<Array<SortDescriptor>>;\n    /**\n     * Fires when the user selects a Grid row.\n     * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent %}#toc-selectionchange).\n     */\n    selectionChange: EventEmitter<SelectionEvent>;\n    /**\n     * Fires when the data state of the Grid is changed.\n     */\n    dataStateChange: EventEmitter<DataStateChangeEvent>;\n    /**\n     * Fires when the user expands a group header.\n     */\n    groupExpand: EventEmitter<{\n        group: GroupResult;\n        groupIndex: string;\n    }>;\n    /**\n     * Fires when the user collapses a group header.\n     */\n    groupCollapse: EventEmitter<{\n        group: GroupResult;\n        groupIndex: string;\n    }>;\n    /**\n     * Fires when the user expands a master row.\n     */\n    detailExpand: EventEmitter<DetailExpandEvent>;\n    /**\n     * Fires when the user collapses a master row.\n     */\n    detailCollapse: EventEmitter<DetailCollapseEvent>;\n    /**\n     * Fires when the user clicks the **Edit** command button to edit a row\n     * ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).\n     */\n    edit: EventEmitter<EditEvent>;\n    /**\n     * Fires when the user clicks the **Cancel** command button to close a row\n     * ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).\n     */\n    cancel: EventEmitter<CancelEvent>;\n    /**\n     * Fires when the user clicks the **Save** command button to save changes in a row\n     * ([see example]({% slug editing_template_forms_grid %}#toc-saving-records)).\n     */\n    save: EventEmitter<SaveEvent>;\n    /**\n     * Fires when the user clicks the **Remove** command button to remove a row\n     * ([see example]({% slug editing_template_forms_grid %}#toc-removing-records)).\n     */\n    remove: EventEmitter<RemoveEvent>;\n    /**\n     * Fires when the user clicks the **Add** command button to add a new row\n     * ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).\n     */\n    add: EventEmitter<AddEvent>;\n    /**\n     * Fires when the user leaves an edited cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).\n     */\n    cellClose: EventEmitter<CellCloseEvent>;\n    /**\n     * Fires when the user clicks a cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).\n     */\n    cellClick: EventEmitter<CellClickEvent>;\n    /**\n     * Fires when the user clicks the **Export to PDF** command button.\n     */\n    pdfExport: EventEmitter<PDFExportEvent>;\n    /**\n     * Fires when the user clicks the **Export to Excel** command button.\n     */\n    excelExport: EventEmitter<ExcelExportEvent>;\n    /**\n     * Fires when the user completes the resizing of the column.\n     */\n    columnResize: EventEmitter<Array<ColumnResizeArgs>>;\n    /**\n     * Fires when the user completes the reordering of the column.\n     */\n    columnReorder: EventEmitter<ColumnReorderEvent>;\n    /**\n     * Fires when the user changes the visibility of the columns from the column menu or column chooser.\n     */\n    columnVisibilityChange: EventEmitter<ColumnVisibilityChangeEvent>;\n    /**\n     * Fires when the user changes the locked state of the columns from the column menu or by reordering the columns.\n     */\n    columnLockedChange: EventEmitter<ColumnLockedChangeEvent>;\n    /**\n     * Fires when the user scrolls to the last record on the page and enables endless scrolling\n     * ([see example]({% slug scrollmmodes_grid %}#toc-endless-scrolling)).\n     * You have to handle the event yourself and page the data.\n     */\n    scrollBottom: EventEmitter<ScrollBottomEvent>;\n    /**\n     * Fires when the grid content is scrolled.\n     * For performance reasons, the event is triggered outside the Angular zone. Enter the Angular zone if you make any changes that require change detection.\n     */\n    contentScroll: EventEmitter<ContentScrollEvent>;\n    /**\n     * A query list of all declared columns.\n     */\n    columns: QueryList<ColumnBase>;\n    readonly dir: string;\n    readonly hostClasses: boolean;\n    readonly lockedClasses: boolean;\n    readonly virtualClasses: boolean;\n    readonly noScrollbarClass: boolean;\n    detailTemplateChildren: QueryList<DetailTemplateDirective>;\n    detailTemplate: DetailTemplateDirective;\n    noRecordsTemplateChildren: QueryList<NoRecordsTemplateDirective>;\n    noRecordsTemplate: NoRecordsTemplateDirective;\n    pagerTemplateChildren: QueryList<PagerTemplateDirective>;\n    pagerTemplate: PagerTemplateDirective;\n    toolbarTemplateChildren: QueryList<ToolbarTemplateDirective>;\n    toolbarTemplate: ToolbarTemplateDirective;\n    columnMenuTemplates: QueryList<ColumnMenuTemplateDirective>;\n    lockedHeader: any;\n    header: any;\n    footer: QueryList<any>;\n    ariaRoot: ElementRef;\n    readonly scrollbarWidth: number;\n    readonly headerPadding: any;\n    columnMenuOptions: any;\n    columnList: ColumnList;\n    selectionDirective: boolean | SelectionDirective;\n    columnsContainer: ColumnsContainer;\n    view: DataCollection;\n    readonly hasGroupFooters: boolean;\n    readonly showFooter: boolean;\n    readonly showGroupFooters: boolean;\n    readonly ariaRowCount: number;\n    readonly ariaColCount: number;\n    private shouldGenerateColumns;\n    private direction;\n    private _sort;\n    private _group;\n    private _skip;\n    private cachedWindowWidth;\n    private defaultSelection;\n    private _rowSelected;\n    private _cellSelected;\n    private _customDetailTemplate;\n    private _customNoRecordsTemplate;\n    private _customPagerTemplate;\n    private _customToolbarTemplate;\n    private leafViewportColumns;\n    private viewportColumns;\n    readonly isVirtual: boolean;\n    readonly isScrollable: boolean;\n    readonly visibleColumns: QueryList<ColumnBase>;\n    readonly lockedColumns: QueryList<ColumnBase>;\n    readonly nonLockedColumns: QueryList<ColumnBase>;\n    readonly lockedLeafColumns: QueryList<ColumnBase>;\n    readonly nonLockedLeafColumns: QueryList<ColumnBase>;\n    readonly leafColumns: QueryList<ColumnBase>;\n    readonly totalColumnLevels: number;\n    readonly headerColumns: any;\n    readonly headerLeafColumns: any;\n    readonly lockedWidth: number;\n    readonly nonLockedWidth: number;\n    readonly selectableSettings: SelectableSettings;\n    readonly columnMenuTemplate: TemplateRef<any>;\n    readonly totalCount: number;\n    private selectionSubscription;\n    private stateChangeSubscription;\n    private groupExpandCollapseSubscription;\n    private editServiceSubscription;\n    private detailsServiceSubscription;\n    private filterSubscription;\n    private sortSubscription;\n    private columnsChangeSubscription;\n    private pdfSubscription;\n    private excelSubscription;\n    private columnsContainerChangeSubscription;\n    private cellClickSubscription;\n    private footerChangeSubscription;\n    private columnResizingSubscription;\n    private columnReorderSubscription;\n    private detachElementEventHandlers;\n    private localizationSubscription;\n    private columnVisibilityChangeSubscription;\n    private columnLockedChangeSubscription;\n    private focusElementSubscription;\n    private columnRangeChangeSubscription;\n    private rtl;\n    constructor(supportService: BrowserSupportService, selectionService: SelectionService, cellSelectionService: CellSelectionService, wrapper: ElementRef, groupInfoService: GroupInfoService, groupsService: GroupsService, changeNotification: ChangeNotificationService, detailsService: DetailsService, editService: EditService, filterService: FilterService, pdfService: PDFService, responsiveService: ResponsiveService, renderer: Renderer2, excelService: ExcelService, ngZone: NgZone, scrollSyncService: ScrollSyncService, domEvents: DomEventsService, columnResizingService: ColumnResizingService, changeDetectorRef: ChangeDetectorRef, columnReorderService: ColumnReorderService, columnInfoService: ColumnInfoService, navigationService: NavigationService, sortService: SortService, scrollRequestService: ScrollRequestService, localization: LocalizationService);\n    /**\n     * Expands the specified master row ([see example]({% slug hierarchy_grid %})).\n     *\n     * This method is provided only for backwards-compatibility with legacy versions.\n     * These versions tracked the expanded state internally using the data row index.\n     *\n     * For new development, use the [`kendoGridDetailsExpandBy` directive]({% slug api_grid_expanddetailsdirective %})\n     * or provide an isDetailExpanded callback. See [Controlling the Expanded State]({% slug master_detail_expanded_state_grid %})\n     * for examples on how to control the expanded state.\n     *\n     * @param index - The data row index of the master row.\n     */\n    expandRow(index: number): void;\n    /**\n     * Collapses the specified master row ([see example]({% slug hierarchy_grid %})).\n     *\n     * This method is provided only for backwards-compatibility with legacy versions.\n     * These versions tracked the expanded state internally using the data row index.\n     *\n     * For new development, use the [`kendoGridDetailsExpandBy` directive]({% slug api_grid_expanddetailsdirective %})\n     * or provide an isDetailExpanded callback. See [Controlling the Expanded State]({% slug master_detail_expanded_state_grid %})\n     * for examples on how to control the expanded state.\n     *\n     * @param index - The data row index of the master row.\n     */\n    collapseRow(index: number): void;\n    /**\n     * Expands a group header item for the given index. For example,\n     * `0_1` expands the second inner group of the first master group.\n     *\n     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `expandGroup` method is not supported.\n     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    expandGroup(index: string): void;\n    /**\n     * Collapses a group header item for the given index. For example,\n     * `0_1` collapses the second inner group of the first master group.\n     *\n     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `collapseGroup` method is not supported.\n     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    collapseGroup(index: string): void;\n    /**\n     * @hidden\n     */\n    resetGroupsState(): void;\n    /**\n     * @hidden\n     */\n    expandGroupChildren(groupIndex: string): void;\n    /**\n     * @hidden\n     */\n    onDataChange(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    ngAfterViewInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    attachScrollSync(): void;\n    /**\n     * Switches the specified table row in the edit mode ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).\n     *\n     * @param rowIndex - The data row index that will be switched in the edit mode.\n     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})\n     * that describes the edit form.\n     * @param options - Additional options configuring the focus target once the editor opens.\n     */\n    editRow(rowIndex: number, group?: FormGroup, options?: EditRowOptions): void;\n    /**\n     * Closes the editor for a given row ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).\n     *\n     * @param {number} index - The row index that will be switched out of the edit mode. If no index is provided, it is assumed\n     * that the new item editor will be closed.\n     */\n    closeRow(index?: number): void;\n    /**\n     * Creates a new row editor ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).\n     *\n     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes\n     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.\n     */\n    addRow(group: any): void;\n    /**\n     * Puts the cell that is specified by the table row and column in edit mode.\n     *\n     * @param {number} rowIndex - The data row index that will be switched in the edit mode.\n     * @param {number|string|any} column - The leaf column index, or the field name or the column instance that should be edited.\n     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})\n     * that describes the edit form.\n     */\n    editCell(rowIndex: number, column: number | string | any, group?: any): void;\n    /**\n     * Closes the current cell in edit mode and fires\n     * the [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event.\n     *\n     * @return {boolean} Indicates whether the edited cell was closed.\n     * A `false` value indicates that the\n     * [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event was prevented.\n     */\n    closeCell(): boolean;\n    /**\n     * Closes the current cell in edit mode.\n     */\n    cancelCell(): void;\n    /**\n     * Returns a flag which indicates if a row or a cell is currently edited.\n     *\n     * @return {boolean} A flag which indicates if a row or a cell is currently edited.\n     */\n    isEditing(): boolean;\n    /**\n     * Returns a flag which indicates if a cell is currently edited.\n     *\n     * @return {boolean} A flag which indicates if a cell is currently being edited.\n     */\n    isEditingCell(): boolean;\n    /**\n     * Initiates the PDF export ([see example]({% slug pdfexport_grid %})).\n     */\n    saveAsPDF(): void;\n    /**\n     * Exports the Grid element to a Drawing [`Group`]({% slug api_kendo-drawing_group %}) by using the `kendo-grid-pdf` component options.\n     * ([see example]({% slug pdfexport_grid %}#toc-exporting-multiple-grids-to-the-same-pdf)).\n     *\n     * @return {Promise} - A promise that will be resolved with the Drawing `Group`.\n     */\n    drawPDF(): Promise<any>;\n    /**\n     * Initiates the Excel export ([see example]({% slug excelexport_grid %})).\n     */\n    saveAsExcel(): void;\n    /**\n     * Applies the minimum possible width for the specified column,\n     * so that the whole text fits without wrapping. This method expects the Grid\n     * to be resizable (set `resizable` to `true`).\n     * Makes sense to execute this method only\n     * after the Grid is already populated with data.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [resizable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\" (click)=\"grid.autoFitColumn(groupColumn)\">\n     *                     Auto-fit the group column\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    [minResizableWidth]=\"30\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                filter=\"numeric\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    autoFitColumn(column: ColumnBase): void;\n    /**\n     * Adjusts the width of the specified columns to fit the entire content, including headers, without wrapping.\n     * If no columns are specified, `autoFitColumns` is applied to all columns.\n     *\n     * This method requires the Grid to be resizable (set `resizable` to `true`).\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *      <kendo-grid\n     *          #grid\n     *          [data]=\"gridData\"\n     *          [resizable]=\"true\"\n     *          style=\"height: 300px\">\n     *          <ng-template kendoGridToolbarTemplate>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns([firstColumn, lastColumn])\">\n     *                  Auto-fit the first and last column\n     *              </button>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns()\">\n     *                  Auto-fit all columns\n     *              </button>\n     *          </ng-template>\n     *          <kendo-grid-column-group title=\"Product Info\">\n     *              <kendo-grid-column\n     *                  #firstColumn\n     *                  field=\"ProductID\"\n     *                  [width]=\"50\"\n     *                  [minResizableWidth]=\"30\"\n     *                  title=\"ID\">\n     *              </kendo-grid-column>\n     *\n     *              <kendo-grid-column\n     *                  field=\"ProductName\"\n     *                  title=\"Product Name\"\n     *                  >\n     *              </kendo-grid-column>\n     *          </kendo-grid-column-group>\n     *\n     *          <kendo-grid-column\n     *              #lastColumn\n     *              field=\"UnitPrice\"\n     *              title=\"Unit Price\"\n     *              [width]=\"180\"\n     *              filter=\"numeric\"\n     *              format=\"{0:c}\">\n     *          </kendo-grid-column>\n     *      </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    autoFitColumns(columns?: Array<ColumnBase> | QueryList<ColumnBase>): void;\n    /**\n     * @hidden\n     */\n    notifyPageChange(source: string, event: any): void;\n    /**\n     * @hidden\n     */\n    notifyScrollBottom(): void;\n    /**\n     * @hidden\n     */\n    focusEditElement(containerSelector: string): void;\n    /**\n     * Focuses the last active or the first cell of the Grid.\n     *\n     * @returns {NavigationCell} The focused cell.\n     */\n    focus(): NavigationCell;\n    /**\n     * Focuses the cell with the specified row and column index.\n     *\n     * The row index is based on the logical structure of the Grid and does not correspond to the data item index:\n     * * Header rows are included, starting at index 0.\n     * * Group headers and footers are included.\n     * * The row indexing is absolute and does not change with paging.\n     *\n     * If the Grid is configured for scrolling, including virtual scrolling, the scroll position will be updated.\n     * If the row is not present on the current page, the method will have no effect.\n     *\n     * @param rowIndex - The logical row index to focus. The top header row has an index 0.\n     * @param colIndex - The column index to focus.\n     * @returns {NavigationCell} The focused cell.\n     *\n     */\n    focusCell(rowIndex: number, colIndex: number): NavigationCell;\n    /**\n     * Focuses the next cell, optionally wrapping to the next row.\n     *\n     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.\n     * @returns {NavigationCell} The focused cell. If the focus is already on the last cell, returns `null`.\n     */\n    focusNextCell(wrap?: boolean): NavigationCell;\n    /**\n     * Focuses the previous cell. Optionally wraps to the previous row.\n     *\n     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.\n     * @returns {NavigationCell} The focused cell. If the focus is already on the first cell, returns `null`.\n     */\n    focusPrevCell(wrap?: boolean): NavigationCell;\n    /**\n     * Scrolls to the specified row and column\n     */\n    scrollTo(request: ScrollRequest): void;\n    /**\n     * Changes the position of the specified column.\n     * The reordering of columns operates only on the level\n     * which is inferred by the source column.\n     * For the `reorderColumn` method to work properly,\n     * the `source` column has to be visible.\n     *\n     * @param {ColumnBase} source - The column whose position will be changed.\n     * @param {number} destIndex - The new position of the column.\n     * @param {ColumnReorderConfig} options - Additional options.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [reorderable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\"\n     *                     (click)=\"grid.reorderColumn(groupColumn, 2, { before: true })\">\n     *                     Move the group column before the last one.\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *\n     *            <kendo-grid-column\n     *                field=\"Discontinued\"\n     *                title=\"Discontinued\"\n     *                [width]=\"100\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    reorderColumn(source: ColumnBase, destIndex: number, options?: ColumnReorderConfig): void;\n    /**\n     * A function which determines if a specific row is expanded.\n     */\n    isDetailExpanded: (args: RowArgs) => boolean;\n    /**\n     * @hidden\n     */\n    private reorder;\n    private updateColumnIndices;\n    private updateIndicesForLevel;\n    private columnsForLevel;\n    private initSelectionService;\n    private setEditFocus;\n    private columnInstance;\n    private verifySettings;\n    private autoGenerateColumns;\n    private attachStateChangesEmitter;\n    private attachEditHandlers;\n    private emitCRUDEvent;\n    private attachDomEventHandlers;\n    private attachElementEventHandlers;\n    private matchesMedia;\n    private resizeCheck;\n    private emitPDFExportEvent;\n    private syncHeaderHeight;\n    private columnsContainerChange;\n    private handleColumnResize;\n    private notifyResize;\n    private assertNavigable;\n    private _rowClass;\n    private navigationMetadata;\n    private updateNavigationMetadata;\n    private applyAutoSize;\n    private onColumnRangeChange;\n    private toggleDetailRowLegacy;\n}\n"]}