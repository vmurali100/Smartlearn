{"version":3,"file":"group-scroll-binding.directive.d.ts","sources":["group-scroll-binding.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef } from '@angular/core';\nimport { DataBindingDirective } from \"../databinding.directive\";\nimport { GridComponent } from \"../grid.component\";\nimport { CompositeFilterDescriptor, GroupDescriptor, SortDescriptor, State } from \"@progress/kendo-data-query\";\nimport { GridDataResult } from \"../data/data.collection\";\nimport { VirtualGroupResult } from \"./virtual-group-result.interface\";\nimport { LocalDataChangesService } from \"../editing/local-data-changes.service\";\n/**\n * @hidden\n */\nexport declare const count: (groups: any[], includeFooters?: boolean) => any;\n/**\n * @hidden\n */\nexport declare const slice: (groups: any[], skip: number, take: number, includeFooters?: boolean) => VirtualGroupResult[];\n/**\n * A directive which encapsulates the in-memory handling of grouping with virtual scrolling.\n */\nexport declare class GroupBindingDirective extends DataBindingDirective {\n    /**\n     * The array of data which will be used to populate the Grid.\n     */\n    kendoGridGroupBinding: any[];\n    /**\n     * @hidden\n     */\n    data: any[];\n    /**\n     * Defines the descriptors by which the data will be sorted.\n     */\n    sort: SortDescriptor[];\n    /**\n     * Defines the descriptor by which the data will be filtered.\n     */\n    filter: CompositeFilterDescriptor;\n    /**\n     * Defines the descriptors by which the data will be grouped.\n     */\n    group: GroupDescriptor[];\n    private groups;\n    constructor(grid: GridComponent, changeDetector: ChangeDetectorRef, localDataChangesService: LocalDataChangesService);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    protected groupExpand({ groupIndex }: any): void;\n    protected groupCollapse({ groupIndex }: any): void;\n    protected process(state: State): GridDataResult;\n    protected processGroups(state: State): GridDataResult;\n    protected dataResult(skip: number, take: number): GridDataResult;\n    protected applyState({ skip, take, sort, group, filter }: State): void;\n}\n"]}