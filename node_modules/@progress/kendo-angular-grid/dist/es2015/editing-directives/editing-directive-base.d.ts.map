{"version":3,"file":"editing-directive-base.d.ts","sources":["editing-directive-base.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit, OnDestroy } from '@angular/core';\nimport { GridComponent } from '../grid.component';\nimport { EditService } from './edit-service.interface';\nimport { Subscription, Observable } from 'rxjs';\nimport { LocalDataChangesService } from '../editing/local-data-changes.service';\n/**\n * @hidden\n */\nexport declare abstract class EditingDirectiveBase implements OnInit, OnDestroy {\n    protected grid: GridComponent;\n    protected localDataChangesService: LocalDataChangesService;\n    /**\n     * The edit service that will handle the operations.\n     */\n    editService: EditService;\n    /**\n     * A function that is called to confirm if the `dataItem` will be removed.\n     */\n    removeConfirmation: (dataItem: any) => Promise<boolean> | Observable<boolean> | boolean;\n    protected subscriptions: Subscription;\n    protected defaultEditService: EditService;\n    protected userEditService: EditService;\n    protected abstract createModel(args: any): any;\n    protected abstract saveModel(args: any): any;\n    constructor(grid: GridComponent, localDataChangesService: LocalDataChangesService);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    protected createDefaultService(): EditService;\n    protected addHandler(): void;\n    protected saveHandler(args: any): void;\n    protected cancelHandler({ rowIndex }: any): void;\n    protected removeHandler({ dataItem }: any): void;\n    protected onStateChange(): void;\n    protected closeEditor(rowIndex?: number): void;\n}\n"]}