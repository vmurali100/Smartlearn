{"version":3,"file":"numeric-filter.component.d.ts","sources":["numeric-filter.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnInit } from '@angular/core';\nimport { ColumnComponent } from '../columns/column.component';\nimport { FilterService } from './filter.service';\nimport { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';\nimport { BaseFilterCellComponent } from './base-filter-cell.component';\nimport { FilterComponent } from './filter-component.interface';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * Represents a base numeric filter component.\n */\nexport declare abstract class NumericFilterComponent extends BaseFilterCellComponent implements FilterComponent, OnInit {\n    protected localization: LocalizationService;\n    /**\n     * The column with which the filter is associated.\n     * @type {ColumnComponent}\n     */\n    column: ColumnComponent;\n    /**\n     * The current root filter.\n     * @type {CompositeFilterDescriptor}\n     */\n    filter: CompositeFilterDescriptor;\n    /**\n     * The default filter operator. Defaults to `eq`.\n     * @type {string}\n     */\n    operator: string;\n    /**\n     * Specifies the value that is used to increment or decrement the component value.\n     * @type {numeric}\n     */\n    step: number;\n    /**\n     * Specifies the smallest value that is valid.\n     * @type {number}\n     */\n    min: number;\n    /**\n     * Specifies the greatest value that is valid.\n     * @type {number}\n     */\n    max: number;\n    /**\n     * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n     * @type {boolean}\n     */\n    spinners: boolean;\n    /**\n     * Specifies the number precision applied to the component value when it is focused.\n     * If the user enters a number with a greater precision than is currently configured, the component value is rounded.\n     *\n     * @type {number}\n     */\n    decimals: number;\n    /**\n     * Specifies the number format used when the component is not focused.\n     * By default, the `column.format` value is used (if set).\n     */\n    /**\n    * Specifies the number format used when the component is not focused.\n    * By default, the `column.format` value is used (if set).\n    *\n    * @readonly\n    * @type {string}\n    */\n    format: string;\n    /**\n     * The current filter for the associated column field.\n     * @readonly\n     * @type {FilterDescriptor}\n     */\n    readonly currentFilter: FilterDescriptor;\n    /**\n     * The current filter operator for the associated column field.\n     * @readonly\n     * @type {string}\n     */\n    readonly currentOperator: string;\n    protected defaultOperators: Array<{\n        text: string;\n        value: string;\n    }>;\n    private readonly columnFormat;\n    private _format;\n    private subscription;\n    constructor(filterService: FilterService, localization: LocalizationService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    protected localizationChange(): void;\n}\n"]}