{"version":3,"file":"numeric-filter-menu-input.component.d.ts","sources":["numeric-filter-menu-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { FilterDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ColumnComponent } from \"../../columns/column.component\";\nimport { FilterService } from '../filter.service';\n/**\n * @hidden\n */\nexport declare class NumericFilterMenuInputComponent {\n    private localization;\n    operators: Array<{\n        text: string;\n        value: string;\n    }>;\n    column: ColumnComponent;\n    filter: CompositeFilterDescriptor;\n    operator: string;\n    currentFilter: FilterDescriptor;\n    filterService: FilterService;\n    /**\n     * Specifies the value which is used to increment or decrement the component value.\n     * @type {numeric}\n     */\n    step: number;\n    /**\n     * Specifies the smallest value that is valid.\n     * @type {number}\n     */\n    min: number;\n    /**\n     * Specifies the greatest value that is valid.\n     * @type {number}\n     */\n    max: number;\n    /**\n     * Specifies whether the **Up** and **Down** spin buttons will be rendered.\n     * @type {boolean}\n     */\n    spinners: boolean;\n    /**\n     * Specifies the number precision tat is applied to the component value when it is focused.\n     * If the user enters a number with a greater precision than is currently configured, the component value is rounded.\n     *\n     * @type {number}\n     */\n    decimals: number;\n    /**\n     * Specifies the number format that is used when the component is not focused.\n     * By default, the `column.format` value is used (if set).\n     */\n    format: string;\n    constructor(localization: LocalizationService);\n    messageFor(key: string): string;\n}\n"]}