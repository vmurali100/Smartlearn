{"version":3,"file":"header.component.d.ts","sources":["header.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { ChangeDetectorRef, AfterViewInit, OnChanges, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ColumnComponent } from '../../columns/column.component';\nimport { ColumnBase } from '../../columns/column-base';\nimport { DetailTemplateDirective } from '../details/detail-template.directive';\nimport { SortDescriptor } from '@progress/kendo-data-query';\nimport { SortSettings } from '../../columns/sort-settings';\nimport { GroupDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { SinglePopupService } from '../../common/single-popup.service';\nimport { FilterableSettings } from '../../filtering/filterable';\nimport { IdService } from '../../common/id.service';\nimport { DropTargetDirective } from '../../dragdrop/drop-target.directive';\nimport { DraggableColumnDirective } from '../../dragdrop/draggable-column.directive';\nimport { DragHintService } from '../../dragdrop/drag-hint.service';\nimport { DropCueService } from '../../dragdrop/drop-cue.service';\nimport { ColumnReorderService } from '../../dragdrop/column-reorder.service';\nimport { SortService } from '../../common/sort.service';\n/**\n * @hidden\n */\nexport declare class HeaderComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n    private popupService;\n    private hint;\n    private cue;\n    private reorderService;\n    private idService;\n    private sortService;\n    private localization;\n    private cd;\n    /**\n     * @hidden\n     */\n    totalColumnLevels: number;\n    columns: Array<ColumnBase>;\n    groups: Array<GroupDescriptor>;\n    detailTemplate: DetailTemplateDirective;\n    scrollable: boolean;\n    filterable: FilterableSettings;\n    sort: Array<SortDescriptor>;\n    filter: CompositeFilterDescriptor;\n    sortable: SortSettings;\n    groupable: boolean;\n    lockedColumnsCount: number;\n    resizable: boolean;\n    reorderable: boolean;\n    columnMenu: boolean;\n    columnMenuTemplate: TemplateRef<any>;\n    totalColumnsCount: number;\n    sortedFields: any;\n    readonly headerClass: boolean;\n    readonly sortableLabel: string;\n    dropTargets: QueryList<DropTargetDirective>;\n    readonly unlockedColumnsCount: number;\n    private subscription;\n    private targetSubscription;\n    private _leafColumns;\n    constructor(popupService: SinglePopupService, hint: DragHintService, cue: DropCueService, reorderService: ColumnReorderService, idService: IdService, sortService: SortService, localization: LocalizationService, cd: ChangeDetectorRef);\n    sortColumn(column: ColumnComponent): void;\n    onSortClick(column: ColumnComponent, event: MouseEvent, link: Element): void;\n    onHeaderKeydown(column: ColumnComponent, args: KeyboardEvent): void;\n    showSortNumbering(column: ColumnComponent): boolean;\n    sortOrder(field: string): number;\n    sortIcon(field: string): any;\n    sortState(column: ColumnComponent): string;\n    sortStatus(column: ColumnComponent): string;\n    toggleSort(column: ColumnComponent): Array<SortDescriptor>;\n    ngAfterViewInit(): void;\n    ngDoCheck(): void;\n    ngOnChanges(changes: any): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    selectAllCheckboxId(): string;\n    isFirstOnRow(column: ColumnComponent, index: number): boolean;\n    logicalColumnIndex(column: any): number;\n    readonly showFilterMenu: boolean;\n    readonly showFilterRow: boolean;\n    showColumnMenu(column: any): boolean;\n    isFilterable(column: ColumnComponent): boolean;\n    canDrop(draggable: DraggableColumnDirective, target: DropTargetDirective): boolean;\n    shouldActivate(column: ColumnBase): boolean;\n    isSortable(column: ColumnComponent): boolean;\n    isCheckboxColumn(column: any): boolean;\n    trackByIndex(index: number, _item: any): any;\n    protected toggleDirection(field: string, allowUnsort: boolean, initialDirection: \"asc\" | \"desc\"): SortDescriptor;\n    columnsForLevel(level: number): Array<ColumnBase>;\n    isColumnGroupComponent(column: ColumnBase): boolean;\n    readonly columnLevels: Array<number>;\n    private sortDescriptor;\n    readonly leafColumns: ColumnBase[];\n    private attachTargets;\n    private normalizeTarget;\n    private trackMove;\n    private calculateBefore;\n    private enter;\n    private leave;\n    private drop;\n}\n"]}