{"version":3,"file":"selection-default.d.ts","sources":["selection-default.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { GridComponent } from \"../grid.component\";\nimport { Subscription } from \"rxjs\";\nimport { RowArgs } from \"../rendering/common/row-args\";\nimport { SelectionEvent, CellSelectionItem } from \"./types\";\nimport { ColumnComponent } from '../columns/column.component';\n/**\n * @hidden\n */\nexport declare class Selection {\n    protected grid: GridComponent;\n    protected cd: ChangeDetectorRef;\n    /**\n     * Defines the collection that will store the selected item keys.\n     */\n    selectedKeys: any[];\n    /**\n     * Defines the item key that will be stored in the `selectedKeys` collection.\n     */\n    selectionKey: string | ((context: RowArgs) => any);\n    /**\n     * Defines a function that determines the column key of a data cell.\n     *\n     * The function should return an unique value for each column.\n     * By default, the Grid uses the column index as a column key.\n     */\n    columnKey: string | ((column: any, columnIndex: number) => any);\n    /**\n     * Fires when the `selectedKeys` collection has been updated.\n     */\n    selectedKeysChange: EventEmitter<any[]>;\n    protected selectionChangeSubscription: Subscription;\n    constructor(grid: GridComponent, cd: ChangeDetectorRef);\n    protected init(): void;\n    /**\n     * @hidden\n     */\n    destroy(): void;\n    /**\n     * @hidden\n     */\n    reset(): void;\n    protected getItemKey(row: RowArgs): any;\n    protected getSelectionItem(row: RowArgs, col: ColumnComponent, colIndex: number): CellSelectionItem;\n    protected onSelectionChange(selection: SelectionEvent): void;\n    private getCellSelectionItemIndex;\n}\n"]}