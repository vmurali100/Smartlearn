{"version":3,"file":"databinding.directive.d.ts","sources":["databinding.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { SimpleChange, OnInit, OnDestroy, OnChanges, DoCheck, ChangeDetectorRef } from '@angular/core';\nimport { State, SortDescriptor, GroupDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { GridComponent } from './grid.component';\nimport { DataStateChangeEvent } from './data/change-event-args.interface';\nimport { GridDataResult } from './data/data.collection';\nimport { LocalDataChangesService } from './editing/local-data-changes.service';\n/**\n * A directive which encapsulates the in-memory handling of data operations such as [paging]({% slug paging_grid %}),\n * [sorting]({% slug sorting_grid %}), and [grouping]({% slug groupingbasics_grid %})\n * ([more information and examples]({% slug automaticoperations_grid %})).\n */\nexport declare class DataBindingDirective implements OnInit, OnDestroy, DoCheck, OnChanges {\n    protected grid: GridComponent;\n    protected changeDetector?: ChangeDetectorRef;\n    protected localDataChangesService?: LocalDataChangesService;\n    /**\n     * Defines the number of records that will be skipped by the pager.\n     */\n    skip: number;\n    /**\n     * Defines the descriptors by which the data will be sorted.\n     */\n    sort: SortDescriptor[];\n    /**\n     * Defines the descriptor by which the data will be filtered.\n     */\n    filter: CompositeFilterDescriptor;\n    /**\n     * Defines the page size used by the Grid pager.\n     */\n    pageSize: number;\n    /**\n     * The descriptors by which the data will be grouped.\n     */\n    group: GroupDescriptor[];\n    /**\n     * The array of data which will be used to populate the Grid.\n     */\n    data: any[];\n    protected state: State;\n    protected originalData: any[];\n    protected dataChanged: boolean;\n    private stateChangeSubscription;\n    private dataChangedSubscription;\n    constructor(grid: GridComponent, changeDetector?: ChangeDetectorRef, localDataChangesService?: LocalDataChangesService);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    onStateChange(state: DataStateChangeEvent): void;\n    /**\n     * @hidden\n     */\n    rebind(): void;\n    /**\n     * Notifies the Grid that its data has changed.\n     */\n    notifyDataChange(): void;\n    protected process(state: State): GridDataResult;\n    protected applyState({ skip, take, sort, group, filter }: State): void;\n    protected updateGridData(): void;\n}\n"]}