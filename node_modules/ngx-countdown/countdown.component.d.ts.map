{"version":3,"file":"countdown.component.d.ts","sources":["countdown.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges, OnDestroy, EventEmitter, OnInit, SimpleChange, ChangeDetectorRef, TemplateRef, NgZone } from '@angular/core';\nimport { CountdownConfig, CountdownEvent, CountdownItem } from './interfaces';\nimport { CountdownTimer } from './countdown.timer';\nimport { CountdownGlobalConfig } from './countdown.config';\nexport declare class CountdownComponent implements OnInit, OnChanges, OnDestroy {\n    private locale;\n    private timer;\n    private defCog;\n    private cdr;\n    private ngZone;\n    private frequency;\n    private _notify;\n    private status;\n    private isDestroy;\n    i: CountdownItem;\n    left: number;\n    config: CountdownConfig;\n    render: TemplateRef<void>;\n    readonly event: EventEmitter<CountdownEvent>;\n    constructor(locale: string, timer: CountdownTimer, defCog: CountdownGlobalConfig, cdr: ChangeDetectorRef, ngZone: NgZone);\n    /**\n     * Start countdown, you must manually call when `demand: false`\n     */\n    begin(): void;\n    /**\n     * Restart countdown\n     */\n    restart(): void;\n    /**\n     * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n     */\n    stop(): void;\n    /**\n     * Pause countdown, you can use `resume` to recover again\n     */\n    pause(): void;\n    /**\n     * Resume countdown\n     */\n    resume(): void;\n    private callEvent;\n    private init;\n    private destroy;\n    /**\n     * 更新时钟\n     */\n    private reflow;\n    /**\n     * 获取倒计时剩余帧数\n     */\n    private getLeft;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: {\n        [P in keyof this]?: SimpleChange;\n    } & SimpleChanges): void;\n}\n"]}