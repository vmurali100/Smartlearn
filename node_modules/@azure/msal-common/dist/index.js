/*! @azure/msal-common v1.6.2 2020-10-20 */
'use strict';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 */
var AuthErrorMessage = {
    unexpectedError: {
        code: "unexpected_error",
        desc: "Unexpected error in authentication."
    }
};
/**
 * General error class thrown by the MSAL.js library.
 */
var AuthError = /** @class */ (function (_super) {
    __extends(AuthError, _super);
    function AuthError(errorCode, errorMessage, suberror) {
        var _this = this;
        var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
        _this = _super.call(this, errorString) || this;
        Object.setPrototypeOf(_this, AuthError.prototype);
        _this.errorCode = errorCode;
        _this.errorMessage = errorMessage;
        _this.suberror = suberror;
        _this.name = "AuthError";
        return _this;
    }
    /**
     * Creates an error that is thrown when something unexpected happens in the library.
     * @param errDesc
     */
    AuthError.createUnexpectedError = function (errDesc) {
        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
    };
    return AuthError;
}(Error));

var name = "@azure/msal-common";
var author = {
	name: "Microsoft",
	email: "nugetaad@microsoft.com",
	url: "https://www.microsoft.com"
};
var license = "MIT";
var repository = {
	type: "git",
	url: "https://github.com/AzureAD/microsoft-authentication-library-for-js.git"
};
var version = "1.6.2";
var description = "Microsoft Authentication Library for js";
var keywords = [
	"implicit",
	"authorization code",
	"PKCE",
	"js",
	"AAD",
	"msal",
	"oauth"
];
var main = "./dist/index.js";
var module$1 = "./dist/index.es.js";
var types = "./dist/src/index.d.ts";
var browserslist = [
	"last 1 version",
	"> 1%",
	"maintained node versions",
	"not dead"
];
var engines = {
	node: ">=0.8.0"
};
var directories = {
	test: "test"
};
var files = [
	"dist"
];
var scripts = {
	clean: "shx rm -rf dist lib",
	"clean:coverage": "rimraf ../../.nyc_output/*",
	doc: "npm run doc:generate && npm run doc:deploy",
	"doc:generate": "typedoc --mode modules --excludePrivate --excludeProtected --excludeNotExported --out ./ref ./src/ --gitRevision dev",
	"doc:deploy": "gh-pages -d ref -a -e ref/msal-common",
	lint: "cd ../../ && npm run lint:common",
	"lint:fix": "npm run lint -- -- --fix",
	test: "mocha",
	"test:coverage": "nyc --reporter=text mocha --exit",
	"test:coverage:only": "npm run clean:coverage && npm run test:coverage",
	"build:modules": "rollup -c",
	"build:modules:watch": "rollup -cw",
	build: "npm run clean && npm run build:modules",
	prepack: "npm run build"
};
var devDependencies = {
	"@babel/core": "^7.7.2",
	"@babel/plugin-proposal-class-properties": "^7.7.0",
	"@babel/plugin-proposal-object-rest-spread": "^7.6.2",
	"@babel/polyfill": "^7.7.0",
	"@babel/preset-env": "^7.7.1",
	"@babel/preset-typescript": "^7.7.2",
	"@babel/register": "^7.7.0",
	"@istanbuljs/nyc-config-babel": "^2.1.1",
	"@rollup/plugin-json": "^4.0.0",
	"@types/chai": "^4.2.5",
	"@types/chai-as-promised": "^7.1.2",
	"@types/debug": "^4.1.5",
	"@types/mocha": "^5.2.7",
	"@types/sinon": "^7.5.0",
	"babel-plugin-istanbul": "^5.2.0",
	beachball: "^1.32.2",
	chai: "^4.2.0",
	"chai-as-promised": "^7.1.1",
	"gh-pages": "^3.1.0",
	husky: "^3.0.9",
	mocha: "^6.2.2",
	nyc: "^14.1.1",
	rimraf: "^3.0.2",
	rollup: "^1.24.0",
	"rollup-plugin-typescript2": "^0.24.3",
	"rollup-plugin-uglify": "^6.0.4",
	shx: "^0.3.2",
	sinon: "^7.5.0",
	tslib: "^1.10.0",
	tslint: "^5.20.0",
	typedoc: "^0.17.8",
	typescript: "^3.7.5"
};
var dependencies = {
	debug: "^4.1.1"
};
var pkg = {
	name: name,
	author: author,
	license: license,
	repository: repository,
	version: version,
	description: description,
	keywords: keywords,
	main: main,
	module: module$1,
	types: types,
	browserslist: browserslist,
	engines: engines,
	directories: directories,
	files: files,
	scripts: scripts,
	devDependencies: devDependencies,
	dependencies: dependencies
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientAuthErrorMessage class containing string constants used by error codes and messages.
 */
var ClientAuthErrorMessage = {
    clientInfoDecodingError: {
        code: "client_info_decoding_error",
        desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
    },
    clientInfoEmptyError: {
        code: "client_info_empty_error",
        desc: "The client info was empty. Please review the trace to determine the root cause."
    },
    tokenParsingError: {
        code: "token_parsing_error",
        desc: "Token cannot be parsed. Please review stack trace to determine root cause."
    },
    nullOrEmptyToken: {
        code: "null_or_empty_token",
        desc: "The token is null or empty. Please review the trace to determine the root cause."
    },
    endpointResolutionError: {
        code: "endpoints_resolution_error",
        desc: "Error: could not resolve endpoints. Please check network and try again."
    },
    hashNotDeserialized: {
        code: "hash_not_deserialized",
        desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
    },
    blankGuidGenerated: {
        code: "blank_guid_generated",
        desc: "The guid generated was blank. Please review the trace to determine the root cause."
    },
    invalidStateError: {
        code: "invalid_state",
        desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
    },
    stateMismatchError: {
        code: "state_mismatch",
        desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
    },
    nonceMismatchError: {
        code: "nonce_mismatch",
        desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
    },
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
    },
    multipleMatchingTokens: {
        code: "multiple_matching_tokens",
        desc: "The cache contains multiple tokens satisfying the requirements. " +
            "Call AcquireToken again providing more requirements such as authority or account."
    },
    multipleMatchingAccounts: {
        code: "multiple_matching_accounts",
        desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
    },
    tokenRequestCannotBeMade: {
        code: "request_cannot_be_made",
        desc: "Token request cannot be made without authorization code or refresh token."
    },
    appendEmptyScopeError: {
        code: "cannot_append_empty_scope",
        desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
    },
    removeEmptyScopeError: {
        code: "cannot_remove_empty_scope",
        desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
    },
    appendScopeSetError: {
        code: "cannot_append_scopeset",
        desc: "Cannot append ScopeSet due to error."
    },
    emptyInputScopeSetError: {
        code: "empty_input_scopeset",
        desc: "Empty input ScopeSet cannot be processed."
    },
    DeviceCodePollingCancelled: {
        code: "device_code_polling_cancelled",
        desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
    },
    DeviceCodeExpired: {
        code: "device_code_expired",
        desc: "Device code is expired."
    },
    NoAccountInSilentRequest: {
        code: "no_account_in_silent_request",
        desc: "Please pass an account object, silent flow is not supported without account information"
    },
    invalidCacheRecord: {
        code: "invalid_cache_record",
        desc: "Cache record object was null or undefined."
    },
    invalidCacheEnvironment: {
        code: "invalid_cache_environment",
        desc: "Invalid environment when attempting to create cache entry"
    },
    noAccountFound: {
        code: "no_account_found",
        desc: "No account found in cache for given key."
    },
    CachePluginError: {
        code: "no cache plugin set on CacheManager",
        desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
    },
    noCryptoObj: {
        code: "no_crypto_object",
        desc: "No crypto object detected. This is required for the following operation: "
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    unexpectedAccountType: {
        code: "unexpected_account_type",
        desc: "Unexpected account type."
    },
    unexpectedCredentialType: {
        code: "unexpected_credential_type",
        desc: "Unexpected credential type."
    },
    invalidAssertion: {
        code: "invalid_assertion",
        desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
    },
    invalidClientCredential: {
        code: "invalid_client_credential",
        desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
    },
    tokenRefreshRequired: {
        code: "token_refresh_required",
        desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
    }
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */
var ClientAuthError = /** @class */ (function (_super) {
    __extends(ClientAuthError, _super);
    function ClientAuthError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientAuthError";
        Object.setPrototypeOf(_this, ClientAuthError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when client info object doesn't decode correctly.
     * @param caughtError
     */
    ClientAuthError.createClientInfoDecodingError = function (caughtError) {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
    };
    /**
     * Creates an error thrown if the client info is empty.
     * @param rawClientInfo
     */
    ClientAuthError.createClientInfoEmptyError = function (rawClientInfo) {
        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, ClientAuthErrorMessage.clientInfoEmptyError.desc + " Given Object: " + rawClientInfo);
    };
    /**
     * Creates an error thrown when the id token extraction errors out.
     * @param err
     */
    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {
        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
    };
    /**
     * Creates an error thrown when the id token string is null or empty.
     * @param invalidRawTokenString
     */
    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {
        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
    };
    /**
     * Creates an error thrown when the endpoint discovery doesn't complete correctly.
     */
    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {
        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
    };
    /**
     * Creates an error thrown when the hash cannot be deserialized.
     * @param hashParamObj
     */
    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {
        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
    };
    /**
     * Creates an error thrown when the state cannot be parsed.
     * @param invalidState
     */
    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {
        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
    };
    /**
     * Creates an error thrown when two states do not match.
     */
    ClientAuthError.createStateMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
    };
    /**
     * Creates an error thrown when the nonce does not match.
     */
    ClientAuthError.createNonceMismatchError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
    };
    /**
     * Creates an error thrown when the authorization code required for a token request is null or empty.
     */
    ClientAuthError.createNoTokensFoundError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);
    };
    /**
     * Throws error when multiple tokens are in cache for the given scope.
     * @param scope
     */
    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
    };
    /**
     * Throws error when multiple tokens are in cache for the given scope.
     * @param scope
     */
    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
    };
    /**
     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
     */
    ClientAuthError.createTokenRequestCannotBeMadeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */
    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {
        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append null or empty ScopeSet.
     * @param appendError
     */
    ClientAuthError.createAppendScopeSetError = function (appendError) {
        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
    };
    /**
     * Throws error if ScopeSet is null or undefined.
     * @param givenScopeSet
     */
    ClientAuthError.createEmptyInputScopeSetError = function (givenScopeSet) {
        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, ClientAuthErrorMessage.emptyInputScopeSetError.desc + " Given ScopeSet: " + givenScopeSet);
    };
    /**
     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
     */
    ClientAuthError.createDeviceCodeCancelledError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
    };
    /**
     * Throws error if device code is expired
     */
    ClientAuthError.createDeviceCodeExpiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
    };
    /**
     * Throws error when silent requests are made without an account object
     */
    ClientAuthError.createNoAccountInSilentRequestError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
    };
    /**
     * Throws error when cache record is null or undefined.
     */
    ClientAuthError.createNullOrUndefinedCacheRecord = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
    };
    /**
     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
     */
    ClientAuthError.createInvalidCacheEnvironmentError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
    };
    /**
     * Throws error when account is not found in cache.
     */
    ClientAuthError.createNoAccountFoundError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
    };
    /**
     * Throws error if ICachePlugin not set on CacheManager.
     */
    ClientAuthError.createCachePluginError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
    };
    /**
     * Throws error if crypto object not found.
     * @param operationName
     */
    ClientAuthError.createNoCryptoObjectError = function (operationName) {
        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
    };
    /**
     * Throws error if cache type is invalid.
     */
    ClientAuthError.createInvalidCacheTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Throws error if unexpected account type.
     */
    ClientAuthError.createUnexpectedAccountTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
    };
    /**
     * Throws error if unexpected credential type.
     */
    ClientAuthError.createUnexpectedCredentialTypeError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidAssertionError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */
    ClientAuthError.createInvalidCredentialError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
    };
    /**
     * Throws error if token cannot be retrieved from cache due to refresh being required.
     */
    ClientAuthError.createRefreshRequiredError = function () {
        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
    };
    return ClientAuthError;
}(AuthError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * @hidden
 */
var StringUtils = /** @class */ (function () {
    function StringUtils() {
    }
    /**
     * decode a JWT
     *
     * @param authToken
     */
    StringUtils.decodeAuthToken = function (authToken) {
        if (StringUtils.isEmpty(authToken)) {
            throw ClientAuthError.createTokenNullOrEmptyError(authToken);
        }
        var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
        var matches = tokenPartsRegex.exec(authToken);
        if (!matches || matches.length < 4) {
            throw ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
        }
        var crackedToken = {
            header: matches[1],
            JWSPayload: matches[2],
            JWSSig: matches[3]
        };
        return crackedToken;
    };
    /**
     * Check if a string is empty.
     *
     * @param str
     */
    StringUtils.isEmpty = function (str) {
        return (typeof str === "undefined" || !str || 0 === str.length);
    };
    StringUtils.startsWith = function (str, search) {
        return str.indexOf(search) === 0;
    };
    StringUtils.endsWith = function (str, search) {
        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));
    };
    /**
     * Parses string into an object.
     *
     * @param query
     */
    StringUtils.queryStringToObject = function (query) {
        var match; // Regex for replacing addition symbol with a space
        var pl = /\+/g;
        var search = /([^&=]+)=([^&]*)/g;
        var decode = function (s) { return decodeURIComponent(decodeURIComponent(s.replace(pl, " "))); };
        var obj = {};
        match = search.exec(query);
        while (match) {
            obj[decode(match[1])] = decode(match[2]);
            match = search.exec(query);
        }
        return obj;
    };
    /**
     * Trims entries in an array.
     *
     * @param arr
     */
    StringUtils.trimArrayEntries = function (arr) {
        return arr.map(function (entry) { return entry.trim(); });
    };
    /**
     * Removes empty strings from array
     * @param arr
     */
    StringUtils.removeEmptyStringsFromArray = function (arr) {
        return arr.filter(function (entry) {
            return !StringUtils.isEmpty(entry);
        });
    };
    /**
     * Attempts to parse a string into JSON
     * @param str
     */
    StringUtils.jsonParseHelper = function (str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            return null;
        }
    };
    return StringUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
})(exports.LogLevel || (exports.LogLevel = {}));
/**
 * Class which facilitates logging of messages to a specific place.
 */
var Logger = /** @class */ (function () {
    function Logger(loggerOptions) {
        // Current log level, defaults to info.
        this.level = exports.LogLevel.Info;
        if (loggerOptions) {
            this.localCallback = loggerOptions.loggerCallback;
            this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled;
            this.level = loggerOptions.logLevel;
        }
    }
    /**
     * Log message with required options.
     */
    Logger.prototype.logMessage = function (logMessage, options) {
        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {
            return;
        }
        var timestamp = new Date().toUTCString();
        var logHeader = StringUtils.isEmpty(this.correlationId) ? "[" + timestamp + "] : " : "[" + timestamp + "] : [" + this.correlationId + "]";
        var log = logHeader + " : " + pkg.version + " : " + exports.LogLevel[options.logLevel] + " - " + logMessage;
        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": ""}${options.context ? `:${options.context}` : ""}`)(logMessage);
        this.executeCallback(options.logLevel, log, options.containsPii);
    };
    /**
     * Execute callback with message.
     */
    Logger.prototype.executeCallback = function (level, message, containsPii) {
        if (this.localCallback) {
            this.localCallback(level, message, containsPii);
        }
    };
    /**
     * Logs error messages.
     */
    Logger.prototype.error = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Error,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs error messages with PII.
     */
    Logger.prototype.errorPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Error,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages.
     */
    Logger.prototype.warning = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Warning,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages with PII.
     */
    Logger.prototype.warningPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Warning,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages.
     */
    Logger.prototype.info = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Info,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages with PII.
     */
    Logger.prototype.infoPii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Info,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages.
     */
    Logger.prototype.verbose = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Verbose,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages with PII.
     */
    Logger.prototype.verbosePii = function (message, correlationId) {
        this.logMessage(message, {
            logLevel: exports.LogLevel.Verbose,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Returns whether PII Logging is enabled or not.
     */
    Logger.prototype.isPiiLoggingEnabled = function () {
        return this.piiLoggingEnabled || false;
    };
    return Logger;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var Constants = {
    LIBRARY_NAME: "MSAL.JS",
    SKU: "msal.js.common",
    // Prefix for all library cache entries
    CACHE_PREFIX: "msal",
    // default authority
    DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
    DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
    // ADFS String
    ADFS: "adfs",
    // Default AAD Instance Discovery Endpoint
    AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
    // Resource delimiter - used for certain cache entries
    RESOURCE_DELIM: "|",
    // Placeholder for non-existent account ids/objects
    NO_ACCOUNT: "NO_ACCOUNT",
    // Claims
    CLAIMS: "claims",
    // Consumer UTID
    CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
    // Default scopes
    OPENID_SCOPE: "openid",
    PROFILE_SCOPE: "profile",
    OFFLINE_ACCESS_SCOPE: "offline_access",
    // Default response type for authorization code flow
    CODE_RESPONSE_TYPE: "code",
    CODE_GRANT_TYPE: "authorization_code",
    RT_GRANT_TYPE: "refresh_token",
    FRAGMENT_RESPONSE_MODE: "fragment",
    S256_CODE_CHALLENGE_METHOD: "S256",
    URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
    AUTHORIZATION_PENDING: "authorization_pending",
    NOT_DEFINED: "not_defined"
};
/**
 * Request header names
 */
var HeaderNames;
(function (HeaderNames) {
    HeaderNames["CONTENT_TYPE"] = "Content-Type";
    HeaderNames["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
    HeaderNames["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
    HeaderNames["RETRY_AFTER"] = "Retry-After";
    HeaderNames["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
    HeaderNames["X_MS_LIB_CAPABILITY_VALUE"] = "retry-after, h429";
})(HeaderNames || (HeaderNames = {}));
(function (PersistentCacheKeys) {
    PersistentCacheKeys["ID_TOKEN"] = "idtoken";
    PersistentCacheKeys["CLIENT_INFO"] = "client.info";
    PersistentCacheKeys["ADAL_ID_TOKEN"] = "adal.idtoken";
    PersistentCacheKeys["ERROR"] = "error";
    PersistentCacheKeys["ERROR_DESC"] = "error.description";
})(exports.PersistentCacheKeys || (exports.PersistentCacheKeys = {}));
/**
 * String constants related to AAD Authority
 */
var AADAuthorityConstants;
(function (AADAuthorityConstants) {
    AADAuthorityConstants["COMMON"] = "common";
    AADAuthorityConstants["ORGANIZATIONS"] = "organizations";
    AADAuthorityConstants["CONSUMERS"] = "consumers";
})(AADAuthorityConstants || (AADAuthorityConstants = {}));
/**
 * Keys in the hashParams sent by AAD Server
 */
var AADServerParamKeys;
(function (AADServerParamKeys) {
    AADServerParamKeys["CLIENT_ID"] = "client_id";
    AADServerParamKeys["REDIRECT_URI"] = "redirect_uri";
    AADServerParamKeys["RESPONSE_TYPE"] = "response_type";
    AADServerParamKeys["RESPONSE_MODE"] = "response_mode";
    AADServerParamKeys["GRANT_TYPE"] = "grant_type";
    AADServerParamKeys["CLAIMS"] = "claims";
    AADServerParamKeys["SCOPE"] = "scope";
    AADServerParamKeys["ERROR"] = "error";
    AADServerParamKeys["ERROR_DESCRIPTION"] = "error_description";
    AADServerParamKeys["ACCESS_TOKEN"] = "access_token";
    AADServerParamKeys["ID_TOKEN"] = "id_token";
    AADServerParamKeys["REFRESH_TOKEN"] = "refresh_token";
    AADServerParamKeys["EXPIRES_IN"] = "expires_in";
    AADServerParamKeys["STATE"] = "state";
    AADServerParamKeys["NONCE"] = "nonce";
    AADServerParamKeys["PROMPT"] = "prompt";
    AADServerParamKeys["SESSION_STATE"] = "session_state";
    AADServerParamKeys["CLIENT_INFO"] = "client_info";
    AADServerParamKeys["CODE"] = "code";
    AADServerParamKeys["CODE_CHALLENGE"] = "code_challenge";
    AADServerParamKeys["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
    AADServerParamKeys["CODE_VERIFIER"] = "code_verifier";
    AADServerParamKeys["CLIENT_REQUEST_ID"] = "client-request-id";
    AADServerParamKeys["X_CLIENT_SKU"] = "x-client-SKU";
    AADServerParamKeys["X_CLIENT_VER"] = "x-client-VER";
    AADServerParamKeys["X_CLIENT_OS"] = "x-client-OS";
    AADServerParamKeys["X_CLIENT_CPU"] = "x-client-CPU";
    AADServerParamKeys["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
    AADServerParamKeys["DEVICE_CODE"] = "device_code";
    AADServerParamKeys["CLIENT_SECRET"] = "client_secret";
    AADServerParamKeys["CLIENT_ASSERTION"] = "client_assertion";
    AADServerParamKeys["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
    AADServerParamKeys["TOKEN_TYPE"] = "token_type";
    AADServerParamKeys["REQ_CNF"] = "req_cnf";
    AADServerParamKeys["OBO_ASSERTION"] = "assertion";
    AADServerParamKeys["REQUESTED_TOKEN_USE"] = "requested_token_use";
    AADServerParamKeys["ON_BEHALF_OF"] = "on_behalf_of";
    AADServerParamKeys["FOCI"] = "foci";
})(AADServerParamKeys || (AADServerParamKeys = {}));
/**
 * Claims request keys
 */
var ClaimsRequestKeys;
(function (ClaimsRequestKeys) {
    ClaimsRequestKeys["ACCESS_TOKEN"] = "access_token";
    ClaimsRequestKeys["XMS_CC"] = "xms_cc";
})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));
/**
 * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
 * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
 * internal partners too, hence the choice of generic "string" type instead of the "enum"
 */
var PromptValue = {
    LOGIN: "login",
    SELECT_ACCOUNT: "select_account",
    CONSENT: "consent",
    NONE: "none",
};
/**
 * SSO Types - generated to populate hints
 */
var SSOTypes;
(function (SSOTypes) {
    SSOTypes["ACCOUNT"] = "account";
    SSOTypes["SID"] = "sid";
    SSOTypes["LOGIN_HINT"] = "login_hint";
    SSOTypes["ID_TOKEN"] = "id_token";
    SSOTypes["DOMAIN_HINT"] = "domain_hint";
    SSOTypes["ORGANIZATIONS"] = "organizations";
    SSOTypes["CONSUMERS"] = "consumers";
    SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
    SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
})(SSOTypes || (SSOTypes = {}));
/**
 * Disallowed extra query parameters.
 */
var BlacklistedEQParams = [
    SSOTypes.SID,
    SSOTypes.LOGIN_HINT
];
/**
 * allowed values for codeVerifier
 */
var CodeChallengeMethodValues = {
    PLAIN: "plain",
    S256: "S256"
};
(function (ResponseMode) {
    ResponseMode["QUERY"] = "query";
    ResponseMode["FRAGMENT"] = "fragment";
    ResponseMode["FORM_POST"] = "form_post";
})(exports.ResponseMode || (exports.ResponseMode = {}));
/**
 * allowed grant_type
 */
var GrantType;
(function (GrantType) {
    GrantType["IMPLICIT_GRANT"] = "implicit";
    GrantType["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
    GrantType["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
    GrantType["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
    GrantType["REFRESH_TOKEN_GRANT"] = "refresh_token";
    GrantType["DEVICE_CODE_GRANT"] = "device_code";
    GrantType["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
})(GrantType || (GrantType = {}));
/**
 * Account types in Cache
 */
var CacheAccountType;
(function (CacheAccountType) {
    CacheAccountType["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
    CacheAccountType["ADFS_ACCOUNT_TYPE"] = "ADFS";
    CacheAccountType["MSAV1_ACCOUNT_TYPE"] = "MSA";
    CacheAccountType["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
})(CacheAccountType || (CacheAccountType = {}));
/**
 * Separators used in cache
 */
var Separators;
(function (Separators) {
    Separators["CACHE_KEY_SEPARATOR"] = "-";
    Separators["CLIENT_INFO_SEPARATOR"] = ".";
})(Separators || (Separators = {}));
(function (CredentialType) {
    CredentialType["ID_TOKEN"] = "IdToken";
    CredentialType["ACCESS_TOKEN"] = "AccessToken";
    CredentialType["REFRESH_TOKEN"] = "RefreshToken";
})(exports.CredentialType || (exports.CredentialType = {}));
(function (CacheSchemaType) {
    CacheSchemaType["ACCOUNT"] = "Account";
    CacheSchemaType["CREDENTIAL"] = "Credential";
    CacheSchemaType["ID_TOKEN"] = "IdToken";
    CacheSchemaType["ACCESS_TOKEN"] = "AccessToken";
    CacheSchemaType["REFRESH_TOKEN"] = "RefreshToken";
    CacheSchemaType["APP_METADATA"] = "AppMetadata";
    CacheSchemaType["TEMPORARY"] = "TempCache";
    CacheSchemaType["TELEMETRY"] = "Telemetry";
    CacheSchemaType["UNDEFINED"] = "Undefined";
    CacheSchemaType["THROTTLING"] = "Throttling";
})(exports.CacheSchemaType || (exports.CacheSchemaType = {}));
(function (CacheType) {
    CacheType[CacheType["ADFS"] = 1001] = "ADFS";
    CacheType[CacheType["MSA"] = 1002] = "MSA";
    CacheType[CacheType["MSSTS"] = 1003] = "MSSTS";
    CacheType[CacheType["GENERIC"] = 1004] = "GENERIC";
    CacheType[CacheType["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";
    CacheType[CacheType["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN";
    CacheType[CacheType["ID_TOKEN"] = 2003] = "ID_TOKEN";
    CacheType[CacheType["APP_METADATA"] = 3001] = "APP_METADATA";
    CacheType[CacheType["UNDEFINED"] = 9999] = "UNDEFINED";
})(exports.CacheType || (exports.CacheType = {}));
/**
 * More Cache related constants
 */
var APP_METADATA = "appmetadata";
var ClientInfo = "client_info";
var THE_FAMILY_ID = "1";
var SERVER_TELEM_CONSTANTS = {
    SCHEMA_VERSION: 2,
    MAX_HEADER_BYTES: 4000,
    CACHE_KEY: "server-telemetry",
    CATEGORY_SEPARATOR: "|",
    VALUE_SEPARATOR: ",",
    OVERFLOW_TRUE: "1",
    OVERFLOW_FALSE: "0"
};
(function (AuthenticationScheme) {
    AuthenticationScheme["POP"] = "pop";
    AuthenticationScheme["BEARER"] = "Bearer";
})(exports.AuthenticationScheme || (exports.AuthenticationScheme = {}));
/**
 * Constants related to throttling
 */
var ThrottlingConstants = {
    // Default time to throttle RequestThumbprint in seconds
    DEFAULT_THROTTLE_TIME_SECONDS: 60,
    // Default maximum time to throttle in seconds, overrides what the server sends back
    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
    // Prefix for storing throttling entries
    THROTTLING_PREFIX: "throttling"
};
var Errors = {
    INVALID_GRANT_ERROR: "invalid_grant",
    CLIENT_MISMATCH_ERROR: "client_mismatch",
};

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
 *
 * Key:Value Schema:
 *
 * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      oboAssertion: access token passed in as part of OBO request
 * }
 */
var CredentialEntity = /** @class */ (function () {
    function CredentialEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    CredentialEntity.prototype.generateAccountId = function () {
        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
    };
    /**
     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
     */
    CredentialEntity.prototype.generateCredentialId = function () {
        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.prototype.generateTarget = function () {
        return CredentialEntity.generateTargetForCacheKey(this.target);
    };
    /**
     * generates credential key
     */
    CredentialEntity.prototype.generateCredentialKey = function () {
        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);
    };
    /**
     * returns the type of the cache (in this case credential)
     */
    CredentialEntity.prototype.generateType = function () {
        switch (this.credentialType) {
            case exports.CredentialType.ID_TOKEN:
                return exports.CacheType.ID_TOKEN;
            case exports.CredentialType.ACCESS_TOKEN:
                return exports.CacheType.ACCESS_TOKEN;
            case exports.CredentialType.REFRESH_TOKEN:
                return exports.CacheType.REFRESH_TOKEN;
            default: {
                throw ClientAuthError.createUnexpectedCredentialTypeError();
            }
        }
    };
    /**
     * helper function to return `CredentialType`
     * @param key
     */
    CredentialEntity.getCredentialType = function (key) {
        if (key.indexOf(exports.CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {
            return exports.CredentialType.ACCESS_TOKEN;
        }
        else if (key.indexOf(exports.CredentialType.ID_TOKEN.toLowerCase()) !== -1) {
            return exports.CredentialType.ID_TOKEN;
        }
        else if (key.indexOf(exports.CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {
            return exports.CredentialType.REFRESH_TOKEN;
        }
        return Constants.NOT_DEFINED;
    };
    /**
     * generates credential key
     */
    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {
        var credentialKey = [
            this.generateAccountIdForCacheKey(homeAccountId, environment),
            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
            this.generateTargetForCacheKey(target),
        ];
        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * generates Account Id for keys
     * @param homeAccountId
     * @param environment
     */
    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {
        var accountId = [homeAccountId, environment];
        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generates Credential Id for keys
     * @param credentialType
     * @param realm
     * @param clientId
     * @param familyId
     */
    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {
        var clientOrFamilyId = credentialType === exports.CredentialType.REFRESH_TOKEN
            ? familyId || clientId
            : clientId;
        var credentialId = [
            credentialType,
            clientOrFamilyId,
            realm || "",
        ];
        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate target key component as per schema: <target>
     */
    CredentialEntity.generateTargetForCacheKey = function (scopes) {
        return (scopes || "").toLowerCase();
    };
    return CredentialEntity;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
 */
var ClientConfigurationErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    claimsRequestParsingError: {
        code: "claims_request_parsing_error",
        desc: "Could not parse the given claims request object."
    },
    authorityUriInsecure: {
        code: "authority_uri_insecure",
        desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
    },
    urlParseError: {
        code: "url_parse_error",
        desc: "URL could not be parsed into appropriate segments."
    },
    urlEmptyError: {
        code: "empty_url_error",
        desc: "URL was empty or null."
    },
    emptyScopesError: {
        code: "empty_input_scopes_error",
        desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
    },
    nonArrayScopesError: {
        code: "nonarray_input_scopes_error",
        desc: "Scopes cannot be passed as non-array."
    },
    clientIdSingleScopeError: {
        code: "clientid_input_scopes_error",
        desc: "Client ID can only be provided as a single scope."
    },
    invalidPrompt: {
        code: "invalid_prompt_value",
        desc: "Supported prompt values are 'login', 'select_account', 'consent' and 'none'.  Please see here for valid configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options",
    },
    invalidClaimsRequest: {
        code: "invalid_claims",
        desc: "Given claims parameter must be a stringified JSON object."
    },
    tokenRequestEmptyError: {
        code: "token_request_empty",
        desc: "Token request was empty and not found in cache."
    },
    logoutRequestEmptyError: {
        code: "logout_request_empty",
        desc: "The logout request was null or undefined."
    },
    invalidCodeChallengeMethod: {
        code: "invalid_code_challenge_method",
        desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
    },
    invalidCodeChallengeParams: {
        code: "pkce_params_missing",
        desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
    },
    knownAuthoritiesAndCloudDiscoveryMetadata: {
        code: "invalid_known_authorities",
        desc: "knownAuthorities and cloudDiscoveryMetadata cannot both be provided. Please provide cloudDiscoveryMetadata object for AAD, knownAuthorities otherwise."
    },
    invalidCloudDiscoveryMetadata: {
        code: "invalid_cloud_discovery_metadata",
        desc: "Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields"
    },
    untrustedAuthority: {
        code: "untrusted_authority",
        desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
    }
};
/**
 * Error thrown when there is an error in configuration of the MSAL.js library.
 */
var ClientConfigurationError = /** @class */ (function (_super) {
    __extends(ClientConfigurationError, _super);
    function ClientConfigurationError(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientConfigurationError";
        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */
    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the claims request could not be successfully parsed
     */
    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
    };
    /**
     * Creates an error thrown if authority uri is given an insecure protocol.
     * @param urlString
     */
    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
    };
    /**
     * Creates an error thrown if URL string does not parse into separate segments.
     * @param urlString
     */
    ClientConfigurationError.createUrlParseError = function (urlParseError) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
    };
    /**
     * Creates an error thrown if URL string is empty or null.
     * @param urlString
     */
    ClientConfigurationError.createUrlEmptyError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
    };
    /**
     * Error thrown when scopes are not an array
     * @param inputScopes
     */
    ClientConfigurationError.createScopesNonArrayError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopesError.code, ClientConfigurationErrorMessage.nonArrayScopesError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when scopes are empty.
     * @param scopesValue
     */
    ClientConfigurationError.createEmptyScopesArrayError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, ClientConfigurationErrorMessage.emptyScopesError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when client id scope is not provided as single scope.
     * @param inputScopes
     */
    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when prompt is not an allowed type.
     * @param promptValue
     */
    ClientConfigurationError.createInvalidPromptError = function (promptValue) {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
    };
    /**
     * Creates error thrown when claims parameter is not a stringified JSON object
     */
    ClientConfigurationError.createInvalidClaimsRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyLogoutRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */
    ClientConfigurationError.createEmptyTokenRequestError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
    };
    /**
     * Throws error when an invalid code_challenge_method is passed by the user
     */
    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
    };
    /**
     * Throws error when both params: code_challenge and code_challenge_method are not passed together
     */
    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
    };
    /**
     * Throws an error when the user passes both knownAuthorities and cloudDiscoveryMetadata
     */
    ClientConfigurationError.createKnownAuthoritiesCloudDiscoveryMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.knownAuthoritiesAndCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.knownAuthoritiesAndCloudDiscoveryMetadata.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */
    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
    };
    /**
     * Throws error when provided authority is not a member of the trusted host list
     */
    ClientConfigurationError.createUntrustedAuthorityError = function () {
        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
    };
    return ClientConfigurationError;
}(ClientAuthError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
 * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
 * to ensure uniqueness of strings.
 */
var ScopeSet = /** @class */ (function () {
    function ScopeSet(inputScopes) {
        var _this = this;
        // Filter empty string and null/undefined array items
        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];
        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
        // Validate and filter scopes (validate function throws if validation fails)
        this.validateInputScopes(filteredInput);
        this.scopes = new Set(); // Iterator in constructor not supported by IE11
        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });
    }
    /**
     * Factory method to create ScopeSet from space-delimited string
     * @param inputScopeString
     * @param appClientId
     * @param scopesRequired
     */
    ScopeSet.fromString = function (inputScopeString) {
        inputScopeString = inputScopeString || "";
        var inputScopes = inputScopeString.split(" ");
        return new ScopeSet(inputScopes);
    };
    /**
     * Used to validate the scopes input parameter requested  by the developer.
     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
     */
    ScopeSet.prototype.validateInputScopes = function (inputScopes) {
        // Check if scopes are required but not given or is an empty array
        if (!inputScopes || inputScopes.length < 1) {
            throw ClientConfigurationError.createEmptyScopesArrayError(inputScopes);
        }
    };
    /**
     * Check if a given scope is present in this set of scopes.
     * @param scope
     */
    ScopeSet.prototype.containsScope = function (scope) {
        var lowerCaseScopes = this.printScopesLowerCase().split(" ");
        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
        // compare lowercase scopes
        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
    };
    /**
     * Check if a set of scopes is present in this set of scopes.
     * @param scopeSet
     */
    ScopeSet.prototype.containsScopeSet = function (scopeSet) {
        var _this = this;
        if (!scopeSet || scopeSet.scopes.size <= 0) {
            return false;
        }
        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));
    };
    /**
     * Check if set of scopes contains only the defaults
     */
    ScopeSet.prototype.containsOnlyDefaultScopes = function () {
        var defaultScopeCount = 0;
        if (this.containsScope(Constants.OPENID_SCOPE)) {
            defaultScopeCount += 1;
        }
        if (this.containsScope(Constants.PROFILE_SCOPE)) {
            defaultScopeCount += 1;
        }
        if (this.containsScope(Constants.OFFLINE_ACCESS_SCOPE)) {
            defaultScopeCount += 1;
        }
        return this.scopes.size === defaultScopeCount;
    };
    /**
     * Appends single scope if passed
     * @param newScope
     */
    ScopeSet.prototype.appendScope = function (newScope) {
        if (!StringUtils.isEmpty(newScope)) {
            this.scopes.add(newScope.trim());
        }
    };
    /**
     * Appends multiple scopes if passed
     * @param newScopes
     */
    ScopeSet.prototype.appendScopes = function (newScopes) {
        var _this = this;
        try {
            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });
        }
        catch (e) {
            throw ClientAuthError.createAppendScopeSetError(e);
        }
    };
    /**
     * Removes element from set of scopes.
     * @param scope
     */
    ScopeSet.prototype.removeScope = function (scope) {
        if (StringUtils.isEmpty(scope)) {
            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
        }
        this.scopes.delete(scope.trim());
    };
    /**
     * Removes default scopes from set of scopes
     * Primarily used to prevent cache misses if the default scopes are not returned from the server
     */
    ScopeSet.prototype.removeDefaultScopes = function () {
        this.scopes.delete(Constants.OFFLINE_ACCESS_SCOPE);
        this.scopes.delete(Constants.OPENID_SCOPE);
        this.scopes.delete(Constants.PROFILE_SCOPE);
    };
    /**
     * Combines an array of scopes with the current set of scopes.
     * @param otherScopes
     */
    ScopeSet.prototype.unionScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
        }
        var unionScopes = new Set(); // Iterator in constructor not supported in IE11
        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
        return unionScopes;
    };
    /**
     * Check if scopes intersect between this set and another.
     * @param otherScopes
     */
    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {
        if (!otherScopes) {
            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);
        }
        var unionScopes = this.unionScopeSets(otherScopes);
        // Do not allow default scopes to be the only intersecting scopes
        if (!otherScopes.containsOnlyDefaultScopes()) {
            otherScopes.removeDefaultScopes();
        }
        var sizeOtherScopes = otherScopes.getScopeCount();
        var sizeThisScopes = this.getScopeCount();
        var sizeUnionScopes = unionScopes.size;
        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);
    };
    /**
     * Returns size of set of scopes.
     */
    ScopeSet.prototype.getScopeCount = function () {
        return this.scopes.size;
    };
    /**
     * Returns the scopes as an array of string values
     */
    ScopeSet.prototype.asArray = function () {
        var array = [];
        this.scopes.forEach(function (val) { return array.push(val); });
        return array;
    };
    /**
     * Prints scopes into a space-delimited string
     */
    ScopeSet.prototype.printScopes = function () {
        if (this.scopes) {
            var scopeArr = this.asArray();
            return scopeArr.join(" ");
        }
        return "";
    };
    /**
     * Prints scopes into a space-delimited lower-case string (used for caching)
     */
    ScopeSet.prototype.printScopesLowerCase = function () {
        return this.printScopes().toLowerCase();
    };
    return ScopeSet;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
(function (AuthorityType) {
    AuthorityType[AuthorityType["Default"] = 0] = "Default";
    AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
})(exports.AuthorityType || (exports.AuthorityType = {}));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Url object class which can perform various transformations on url strings.
 */
var UrlString = /** @class */ (function () {
    function UrlString(url) {
        this._urlString = url;
        if (StringUtils.isEmpty(this._urlString)) {
            // Throws error if url is empty
            throw ClientConfigurationError.createUrlEmptyError();
        }
        if (StringUtils.isEmpty(this.getHash())) {
            this._urlString = UrlString.canonicalizeUri(url);
        }
    }
    Object.defineProperty(UrlString.prototype, "urlString", {
        get: function () {
            return this._urlString;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Ensure urls are lower case and end with a / character.
     * @param url
     */
    UrlString.canonicalizeUri = function (url) {
        if (url) {
            url = url.toLowerCase();
        }
        if (url && !StringUtils.endsWith(url, "/")) {
            url += "/";
        }
        return url;
    };
    /**
     * Throws if urlString passed is not a valid authority URI string.
     */
    UrlString.prototype.validateAsUri = function () {
        // Attempts to parse url for uri components
        var components;
        try {
            components = this.getUrlComponents();
        }
        catch (e) {
            throw ClientConfigurationError.createUrlParseError(e);
        }
        // Throw error if URI or path segments are not parseable.
        if (!components.HostNameAndPort || !components.PathSegments) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Throw error if uri is insecure.
        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
        }
    };
    /**
     * Function to remove query string params from url. Returns the new url.
     * @param url
     * @param name
     */
    UrlString.prototype.urlRemoveQueryStringParameter = function (name) {
        var regex = new RegExp("(\\&" + name + "=)[^\&]+");
        this._urlString = this.urlString.replace(regex, "");
        // name=value&
        regex = new RegExp("(" + name + "=)[^\&]+&");
        this._urlString = this.urlString.replace(regex, "");
        // name=value
        regex = new RegExp("(" + name + "=)[^\&]+");
        this._urlString = this.urlString.replace(regex, "");
        return this.urlString;
    };
    UrlString.removeHashFromUrl = function (url) {
        return UrlString.canonicalizeUri(url.split("#")[0]);
    };
    /**
     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
     * @param href The url
     * @param tenantId The tenant id to replace
     */
    UrlString.prototype.replaceTenantPath = function (tenantId) {
        var urlObject = this.getUrlComponents();
        var pathArray = urlObject.PathSegments;
        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {
            pathArray[0] = tenantId;
        }
        return UrlString.constructAuthorityUriFromObject(urlObject);
    };
    /**
     * Returns the anchor part(#) of the URL
     */
    UrlString.prototype.getHash = function () {
        return UrlString.parseHash(this.urlString);
    };
    /**
     * Parses out the components from a url string.
     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
     */
    UrlString.prototype.getUrlComponents = function () {
        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
        var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        // If url string does not match regEx, we throw an error
        var match = this.urlString.match(regEx);
        if (!match) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        }
        // Url component object
        var urlComponents = {
            Protocol: match[1],
            HostNameAndPort: match[4],
            AbsolutePath: match[5],
            QueryString: match[7]
        };
        var pathSegments = urlComponents.AbsolutePath.split("/");
        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
        urlComponents.PathSegments = pathSegments;
        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) {
            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
        }
        return urlComponents;
    };
    UrlString.getDomainFromUrl = function (url) {
        var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
        var match = url.match(regEx);
        if (!match) {
            throw ClientConfigurationError.createUrlParseError("Given url string: " + url);
        }
        return match[2];
    };
    /**
     * Parses hash string from given string. Returns empty string if no hash symbol is found.
     * @param hashString
     */
    UrlString.parseHash = function (hashString) {
        var hashIndex1 = hashString.indexOf("#");
        var hashIndex2 = hashString.indexOf("#/");
        if (hashIndex2 > -1) {
            return hashString.substring(hashIndex2 + 2);
        }
        else if (hashIndex1 > -1) {
            return hashString.substring(hashIndex1 + 1);
        }
        return "";
    };
    UrlString.constructAuthorityUriFromObject = function (urlObject) {
        return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
    };
    /**
     * Returns URL hash as server auth code response object.
     */
    UrlString.getDeserializedHash = function (hash) {
        // Check if given hash is empty
        if (StringUtils.isEmpty(hash)) {
            return {};
        }
        // Strip the # symbol if present
        var parsedHash = UrlString.parseHash(hash);
        // If # symbol was not present, above will return empty string, so give original hash value
        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
        // Check if deserialization didn't work
        if (!deserializedHash) {
            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
        }
        return deserializedHash;
    };
    /**
     * Check if the hash of the URL string contains known properties
     */
    UrlString.hashContainsKnownProperties = function (hash) {
        if (StringUtils.isEmpty(hash)) {
            return false;
        }
        var parameters = UrlString.getDeserializedHash(hash);
        return !!(parameters.code ||
            parameters.error_description ||
            parameters.error ||
            parameters.state);
    };
    return UrlString;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var TrustedAuthority = /** @class */ (function () {
    function TrustedAuthority() {
    }
    /**
     * Set the CloudDiscoveryMetadata object from knownAuthorities or cloudDiscoveryMetadata passed into the app config
     * @param knownAuthorities
     * @param cloudDiscoveryMetadata
     */
    TrustedAuthority.setTrustedAuthoritiesFromConfig = function (knownAuthorities, cloudDiscoveryMetadata) {
        if (!this.getTrustedHostList().length) {
            if (knownAuthorities.length > 0 && !StringUtils.isEmpty(cloudDiscoveryMetadata)) {
                throw ClientConfigurationError.createKnownAuthoritiesCloudDiscoveryMetadataError();
            }
            this.createCloudDiscoveryMetadataFromKnownAuthorities(knownAuthorities);
            try {
                if (cloudDiscoveryMetadata) {
                    var parsedMetadata = JSON.parse(cloudDiscoveryMetadata);
                    this.saveCloudDiscoveryMetadata(parsedMetadata.metadata);
                }
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
            }
        }
    };
    /**
     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
     * @param networkInterface
     */
    TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, networkInterface) {
        return __awaiter(this, void 0, void 0, function () {
            var instanceDiscoveryEndpoint, response, metadata, e_1, host;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        instanceDiscoveryEndpoint = "" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + authorityToVerify.urlString + "oauth2/v2.0/authorize";
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];
                    case 2:
                        response = _a.sent();
                        metadata = response.body.metadata;
                        this.saveCloudDiscoveryMetadata(metadata);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/];
                    case 4:
                        host = authorityToVerify.getUrlComponents().HostNameAndPort;
                        if (this.getTrustedHostList().length > 0 && !this.IsInTrustedHostList(host)) {
                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded 
                            this.createCloudDiscoveryMetadataFromKnownAuthorities([host]);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * @param metadata
     */
    TrustedAuthority.saveCloudDiscoveryMetadata = function (metadata) {
        metadata.forEach(function (entry) {
            var authorities = entry.aliases;
            authorities.forEach(function (authority) {
                TrustedAuthority.TrustedHostList[authority.toLowerCase()] = entry;
            });
        });
    };
    /**
     * Create a generic metadata object for each host passed to knownAuthorities.
     * This is mostly useful for B2C or ADFS scenarios
     * @param knownAuthorities
     */
    TrustedAuthority.createCloudDiscoveryMetadataFromKnownAuthorities = function (knownAuthorities) {
        var _this = this;
        knownAuthorities.forEach(function (authority) {
            var authorityDomain = UrlString.getDomainFromUrl(authority).toLowerCase();
            _this.TrustedHostList[authorityDomain] = {
                preferred_cache: authorityDomain,
                preferred_network: authorityDomain,
                aliases: [authorityDomain]
            };
        });
    };
    TrustedAuthority.getTrustedHostList = function () {
        return Object.keys(this.TrustedHostList);
    };
    /**
     * Get metadata for the provided host
     * @param host
     */
    TrustedAuthority.getCloudDiscoveryMetadata = function (host) {
        return this.TrustedHostList[host.toLowerCase()] || null;
    };
    /**
     * Checks to see if the host is in a list of trusted hosts
     * @param host
     */
    TrustedAuthority.IsInTrustedHostList = function (host) {
        return Object.keys(this.TrustedHostList).indexOf(host.toLowerCase()) > -1;
    };
    TrustedAuthority.TrustedHostList = {};
    return TrustedAuthority;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
(function (ProtocolMode) {
    ProtocolMode["AAD"] = "AAD";
    ProtocolMode["OIDC"] = "OIDC";
})(exports.ProtocolMode || (exports.ProtocolMode = {}));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
 * endpoint. It will store the pertinent config data in this object for use during token calls.
 */
var Authority = /** @class */ (function () {
    function Authority(authority, networkInterface, protocolMode) {
        this.canonicalAuthority = authority;
        this._canonicalAuthority.validateAsUri();
        this.networkInterface = networkInterface;
        this.authorityProtocolMode = protocolMode;
    }
    Object.defineProperty(Authority.prototype, "authorityType", {
        // See above for AuthorityType
        get: function () {
            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
            if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {
                return exports.AuthorityType.Adfs;
            }
            return exports.AuthorityType.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "protocolMode", {
        /**
         * ProtocolMode enum representing the way endpoints are constructed.
         */
        get: function () {
            return this.authorityProtocolMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthority", {
        /**
         * A URL that is the authority set by the developer
         */
        get: function () {
            return this._canonicalAuthority.urlString;
        },
        /**
         * Sets canonical authority.
         */
        set: function (url) {
            this._canonicalAuthority = new UrlString(url);
            this._canonicalAuthority.validateAsUri();
            this._canonicalAuthorityUrlComponents = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "canonicalAuthorityUrlComponents", {
        /**
         * Get authority components.
         */
        get: function () {
            if (!this._canonicalAuthorityUrlComponents) {
                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
            }
            return this._canonicalAuthorityUrlComponents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tenant", {
        /**
         * Get tenant for authority.
         */
        get: function () {
            return this.canonicalAuthorityUrlComponents.PathSegments[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "authorizationEndpoint", {
        /**
         * OAuth /authorize endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                return this.replaceTenant(this.tenantDiscoveryResponse.authorization_endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "tokenEndpoint", {
        /**
         * OAuth /token endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                return this.replaceTenant(this.tenantDiscoveryResponse.token_endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "deviceCodeEndpoint", {
        get: function () {
            if (this.discoveryComplete()) {
                return this.tenantDiscoveryResponse.token_endpoint.replace("/token", "/devicecode");
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "endSessionEndpoint", {
        /**
         * OAuth logout endpoint for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                return this.replaceTenant(this.tenantDiscoveryResponse.end_session_endpoint);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authority.prototype, "selfSignedJwtAudience", {
        /**
         * OAuth issuer for requests
         */
        get: function () {
            if (this.discoveryComplete()) {
                return this.replaceTenant(this.tenantDiscoveryResponse.issuer);
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Replaces tenant in url path with current tenant. Defaults to common.
     * @param urlString
     */
    Authority.prototype.replaceTenant = function (urlString) {
        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
    };
    Object.defineProperty(Authority.prototype, "defaultOpenIdConfigurationEndpoint", {
        /**
         * The default open id configuration endpoint for any canonical authority.
         */
        get: function () {
            if (this.authorityType === exports.AuthorityType.Adfs || this.protocolMode === exports.ProtocolMode.OIDC) {
                return this.canonicalAuthority + ".well-known/openid-configuration";
            }
            return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Boolean that returns whethr or not tenant discovery has been completed.
     */
    Authority.prototype.discoveryComplete = function () {
        return !!this.tenantDiscoveryResponse;
    };
    /**
     * Gets OAuth endpoints from the given OpenID configuration endpoint.
     * @param openIdConfigurationEndpoint
     */
    Authority.prototype.discoverEndpoints = function (openIdConfigurationEndpoint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint)];
            });
        });
    };
    Object.defineProperty(Authority.prototype, "aadInstanceDiscoveryEndpointUrl", {
        // Default AAD Instance Discovery Endpoint
        get: function () {
            return "" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + "oauth2/v2.0/authorize";
        },
        enumerable: true,
        configurable: true
    });
    Authority.prototype.validateAndSetPreferredNetwork = function () {
        return __awaiter(this, void 0, void 0, function () {
            var host, preferredNetwork;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        host = this.canonicalAuthorityUrlComponents.HostNameAndPort;
                        if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, TrustedAuthority.setTrustedAuthoritiesFromNetwork(this._canonicalAuthority, this.networkInterface)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!TrustedAuthority.IsInTrustedHostList(host)) {
                            throw ClientConfigurationError.createUntrustedAuthorityError();
                        }
                        preferredNetwork = TrustedAuthority.getCloudDiscoveryMetadata(host).preferred_network;
                        if (host !== preferredNetwork) {
                            this.canonicalAuthority = this.canonicalAuthority.replace(host, preferredNetwork);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Perform endpoint discovery to discover the /authorize, /token and logout endpoints.
     */
    Authority.prototype.resolveEndpointsAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var openIdConfigEndpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateAndSetPreferredNetwork()];
                    case 1:
                        _a.sent();
                        openIdConfigEndpoint = this.defaultOpenIdConfigurationEndpoint;
                        return [4 /*yield*/, this.discoverEndpoints(openIdConfigEndpoint)];
                    case 2:
                        response = _a.sent();
                        this.tenantDiscoveryResponse = response.body;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * helper function to generate environment from authority object
     * @param authority
     */
    Authority.generateEnvironmentFromAuthority = function (authority) {
        var reqEnvironment = authority.canonicalAuthorityUrlComponents.HostNameAndPort;
        return TrustedAuthority.getCloudDiscoveryMetadata(reqEnvironment) ? TrustedAuthority.getCloudDiscoveryMetadata(reqEnvironment).preferred_cache : "";
    };
    return Authority;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Function to build a client info object
 * @param rawClientInfo
 * @param crypto
 */
function buildClientInfo(rawClientInfo, crypto) {
    if (StringUtils.isEmpty(rawClientInfo)) {
        throw ClientAuthError.createClientInfoEmptyError(rawClientInfo);
    }
    try {
        var decodedClientInfo = crypto.base64Decode(rawClientInfo);
        return JSON.parse(decodedClientInfo);
    }
    catch (e) {
        throw ClientAuthError.createClientInfoDecodingError(e);
    }
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
 *
 * Key : Value Schema
 *
 * Key: <home_account_id>-<environment>-<realm*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
 *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
 *      authorityType: Accounts authority type as a string
 *      name: Full name for the account, including given name and family name,
 *      clientInfo: Full base64 encoded client info received from ESTS
 *      lastModificationTime: last time this entity was modified in the cache
 *      lastModificationApp:
 *      oboAssertion: access token passed in as part of OBO request
 * }
 */
var AccountEntity = /** @class */ (function () {
    function AccountEntity() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */
    AccountEntity.prototype.generateAccountId = function () {
        var accountId = [this.homeAccountId, this.environment];
        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
     */
    AccountEntity.prototype.generateAccountKey = function () {
        return AccountEntity.generateAccountCacheKey({
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username
        });
    };
    /**
     * returns the type of the cache (in this case account)
     */
    AccountEntity.prototype.generateType = function () {
        switch (this.authorityType) {
            case CacheAccountType.ADFS_ACCOUNT_TYPE:
                return exports.CacheType.ADFS;
            case CacheAccountType.MSAV1_ACCOUNT_TYPE:
                return exports.CacheType.MSA;
            case CacheAccountType.MSSTS_ACCOUNT_TYPE:
                return exports.CacheType.MSSTS;
            case CacheAccountType.GENERIC_ACCOUNT_TYPE:
                return exports.CacheType.GENERIC;
            default: {
                throw ClientAuthError.createUnexpectedAccountTypeError();
            }
        }
    };
    /**
     * Returns the AccountInfo interface for this account.
     */
    AccountEntity.prototype.getAccountInfo = function () {
        return {
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            name: this.name
        };
    };
    /**
     * Generates account key from interface
     * @param accountInterface
     */
    AccountEntity.generateAccountCacheKey = function (accountInterface) {
        var accountKey = [
            accountInterface.homeAccountId,
            accountInterface.environment || "",
            accountInterface.tenantId || "",
        ];
        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
     * @param clientInfo
     * @param authority
     * @param idToken
     * @param policy
     */
    AccountEntity.createAccount = function (clientInfo, authority, idToken, crypto, oboAssertion) {
        var account = new AccountEntity();
        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;
        account.clientInfo = clientInfo;
        var clientInfoObj = buildClientInfo(clientInfo, crypto);
        account.homeAccountId = "" + clientInfoObj.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfoObj.utid;
        var env = Authority.generateEnvironmentFromAuthority(authority);
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        account.environment = env;
        // non AAD scenarios can have empty realm
        account.realm = idToken.claims.tid || "";
        account.oboAssertion = oboAssertion;
        if (idToken) {
            // How do you account for MSA CID here?
            var localAccountId = !StringUtils.isEmpty(idToken.claims.oid)
                ? idToken.claims.oid
                : idToken.claims.sid;
            account.localAccountId = localAccountId;
            /*
             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.
             * This field should not be relied upon if a custom policy is configured to return more than 1 email.
             */
            account.username = idToken.claims.preferred_username || (idToken.claims.emails ? idToken.claims.emails[0] : "");
            account.name = idToken.claims.name;
        }
        return account;
    };
    /**
     * Builds non-AAD/ADFS account.
     * @param authority
     * @param idToken
     */
    AccountEntity.createGenericAccount = function (authority, idToken, oboAssertion) {
        var account = new AccountEntity();
        account.authorityType = (authority.authorityType === exports.AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;
        account.homeAccountId = idToken.claims.sub;
        // non AAD scenarios can have empty realm
        account.realm = "";
        account.oboAssertion = oboAssertion;
        var env = Authority.generateEnvironmentFromAuthority(authority);
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        account.environment = env;
        account.username = idToken.claims.upn;
        /*
         * add uniqueName to claims
         * account.name = idToken.claims.uniqueName;
         */
        return account;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccountEntity.isAccountEntity = function (entity) {
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("localAccountId") &&
            entity.hasOwnProperty("username") &&
            entity.hasOwnProperty("authorityType"));
    };
    return AccountEntity;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * APP_METADATA Cache
 *
 * Key:Value Schema:
 *
 * Key: appmetadata-<environment>-<client_id>
 *
 * Value:
 * {
 *      clientId: client ID of the application
 *      environment: entity that issued the token, represented as a full host
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 * }
 */
var AppMetadataEntity = /** @class */ (function () {
    function AppMetadataEntity() {
    }
    /**
     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
     */
    AppMetadataEntity.prototype.generateAppMetadataKey = function () {
        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);
    };
    /**
     * Generate AppMetadata Cache Key
     */
    AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {
        var appMetaDataKeyArray = [
            APP_METADATA,
            environment,
            clientId,
        ];
        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Creates AppMetadataEntity
     * @param clientId
     * @param environment
     * @param familyId
     */
    AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {
        var appMetadata = new AppMetadataEntity();
        appMetadata.clientId = clientId;
        appMetadata.environment = environment;
        if (familyId) {
            appMetadata.familyId = familyId;
        }
        return appMetadata;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AppMetadataEntity.isAppMetadataEntity = function (key, entity) {
        return (key.indexOf(APP_METADATA) === 0 &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("environment"));
    };
    return AppMetadataEntity;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
 */
var CacheManager = /** @class */ (function () {
    function CacheManager() {
    }
    /**
     * Returns all accounts in cache
     */
    CacheManager.prototype.getAllAccounts = function () {
        var currentAccounts = this.getAccountsFilteredBy();
        var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });
        var numAccounts = accountValues.length;
        if (numAccounts < 1) {
            return [];
        }
        else {
            var allAccounts = accountValues.map(function (value) {
                var accountObj = new AccountEntity();
                accountObj = CacheManager.toObject(accountObj, value);
                return accountObj.getAccountInfo();
            });
            return allAccounts;
        }
    };
    /**
     * saves a cache record
     * @param cacheRecord
     */
    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {
        if (!cacheRecord) {
            throw ClientAuthError.createNullOrUndefinedCacheRecord();
        }
        if (!!cacheRecord.account) {
            this.saveAccount(cacheRecord.account);
        }
        if (!!cacheRecord.idToken) {
            this.saveCredential(cacheRecord.idToken);
        }
        if (!!cacheRecord.accessToken) {
            this.saveAccessToken(cacheRecord.accessToken);
        }
        if (!!cacheRecord.refreshToken) {
            this.saveCredential(cacheRecord.refreshToken);
        }
    };
    /**
     * saves account into cache
     * @param account
     */
    CacheManager.prototype.saveAccount = function (account) {
        var key = account.generateAccountKey();
        this.setItem(key, account, exports.CacheSchemaType.ACCOUNT);
    };
    /**
     * saves credential - accessToken, idToken or refreshToken into cache
     * @param credential
     */
    CacheManager.prototype.saveCredential = function (credential) {
        var key = credential.generateCredentialKey();
        this.setItem(key, credential, exports.CacheSchemaType.CREDENTIAL);
    };
    /**
     * saves access token credential
     * @param credential
     */
    CacheManager.prototype.saveAccessToken = function (credential) {
        var _this = this;
        var currentTokenCache = this.getCredentialsFilteredBy({
            clientId: credential.clientId,
            credentialType: exports.CredentialType.ACCESS_TOKEN,
            environment: credential.environment,
            homeAccountId: credential.homeAccountId,
            realm: credential.realm,
        });
        var currentScopes = ScopeSet.fromString(credential.target);
        var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });
        if (currentAccessTokens) {
            currentAccessTokens.forEach(function (tokenEntity) {
                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);
                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {
                    _this.removeCredential(tokenEntity);
                }
            });
        }
        this.saveCredential(credential);
    };
    /**
     * retrieve an account entity given the cache key
     * @param key
     */
    CacheManager.prototype.getAccount = function (key) {
        // don't parse any non-account type cache entities
        if (CredentialEntity.getCredentialType(key) !== Constants.NOT_DEFINED || this.isAppMetadata(key)) {
            return null;
        }
        // Attempt retrieval
        var entity;
        try {
            entity = this.getItem(key, exports.CacheSchemaType.ACCOUNT);
        }
        catch (e) {
            return null;
        }
        // Authority type is required for accounts, return if it is not available (not an account entity)
        if (!entity || StringUtils.isEmpty(entity.authorityType)) {
            return null;
        }
        return entity;
    };
    /**
     * retrieve a credential - accessToken, idToken or refreshToken; given the cache key
     * @param key
     */
    CacheManager.prototype.getCredential = function (key) {
        return this.getItem(key, exports.CacheSchemaType.CREDENTIAL);
    };
    /**
     * retrieve an appmetadata entity given the cache key
     * @param key
     */
    CacheManager.prototype.getAppMetadata = function (key) {
        return this.getItem(key, exports.CacheSchemaType.APP_METADATA);
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {
        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : "", accountFilter ? accountFilter.environment : "", accountFilter ? accountFilter.realm : "");
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */
    CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAccounts = {};
        allCacheKeys.forEach(function (cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) {
                return null;
            }
            if (!StringUtils.isEmpty(homeAccountId) && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!StringUtils.isEmpty(environment) && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!StringUtils.isEmpty(realm) && !_this.matchRealm(entity, realm)) {
                return;
            }
            matchingAccounts[cacheKey] = entity;
        });
        return matchingAccounts;
    };
    /**
     * retrieve credentails matching all provided filters; if no filter is set, get all credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */
    CacheManager.prototype.getCredentialsFilteredBy = function (filter) {
        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);
    };
    /**
     * Support function to help match credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */
    CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingCredentials = {
            idTokens: {},
            accessTokens: {},
            refreshTokens: {},
        };
        allCacheKeys.forEach(function (cacheKey) {
            var entity;
            // don't parse any non-credential type cache entities
            var credType = CredentialEntity.getCredentialType(cacheKey);
            if (credType === Constants.NOT_DEFINED) {
                return;
            }
            // Attempt retrieval
            try {
                entity = _this.getItem(cacheKey, exports.CacheSchemaType.CREDENTIAL);
            }
            catch (e) {
                return;
            }
            if (!StringUtils.isEmpty(oboAssertion) && !_this.matchOboAssertion(entity, oboAssertion)) {
                return;
            }
            if (!StringUtils.isEmpty(homeAccountId) && !_this.matchHomeAccountId(entity, homeAccountId)) {
                return;
            }
            if (!StringUtils.isEmpty(environment) && !_this.matchEnvironment(entity, environment)) {
                return;
            }
            if (!StringUtils.isEmpty(realm) && !_this.matchRealm(entity, realm)) {
                return;
            }
            if (!StringUtils.isEmpty(credentialType) && !_this.matchCredentialType(entity, credentialType)) {
                return;
            }
            if (!StringUtils.isEmpty(clientId) && !_this.matchClientId(entity, clientId)) {
                return;
            }
            if (!StringUtils.isEmpty(familyId) && !_this.matchFamilyId(entity, familyId)) {
                return;
            }
            /*
             * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
             * Resource specific refresh tokens case will be added when the support is deemed necessary
             */
            if (!StringUtils.isEmpty(target) && !_this.matchTarget(entity, target)) {
                return;
            }
            switch (credType) {
                case exports.CredentialType.ID_TOKEN:
                    matchingCredentials.idTokens[cacheKey] = entity;
                    break;
                case exports.CredentialType.ACCESS_TOKEN:
                    matchingCredentials.accessTokens[cacheKey] = entity;
                    break;
                case exports.CredentialType.REFRESH_TOKEN:
                    matchingCredentials.refreshTokens[cacheKey] = entity;
                    break;
            }
        });
        return matchingCredentials;
    };
    /**
     * Removes all accounts and related tokens from cache.
     */
    CacheManager.prototype.removeAllAccounts = function () {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function (cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) {
                return;
            }
            _this.removeAccount(cacheKey);
        });
        return true;
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccount = function (accountKey) {
        var account = this.getAccount(accountKey);
        if (!account) {
            throw ClientAuthError.createNoAccountFoundError();
        }
        return (this.removeAccountContext(account) && this.removeItem(accountKey, exports.CacheSchemaType.ACCOUNT));
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */
    CacheManager.prototype.removeAccountContext = function (account) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var accountId = account.generateAccountId();
        allCacheKeys.forEach(function (cacheKey) {
            // don't parse any non-credential type cache entities
            if (CredentialEntity.getCredentialType(cacheKey) === Constants.NOT_DEFINED) {
                return;
            }
            var cacheEntity = _this.getItem(cacheKey, exports.CacheSchemaType.CREDENTIAL);
            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {
                _this.removeCredential(cacheEntity);
            }
        });
        return true;
    };
    /**
     * returns a boolean if the given credential is removed
     * @param credential
     */
    CacheManager.prototype.removeCredential = function (credential) {
        var key = credential.generateCredentialKey();
        return this.removeItem(key, exports.CacheSchemaType.CREDENTIAL);
    };
    /**
     * Removes all app metadata objects from cache.
     */
    CacheManager.prototype.removeAppMetadata = function () {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function (cacheKey) {
            if (_this.isAppMetadata(cacheKey)) {
                _this.removeItem(cacheKey, exports.CacheSchemaType.APP_METADATA);
            }
        });
        return true;
    };
    /**
     * Retrieve the cached credentials into a cacherecord
     * @param account
     * @param clientId
     * @param scopes
     * @param environment
     */
    CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment) {
        var cachedAccount = this.readAccountFromCache(account);
        var cachedIdToken = this.readIdTokenFromCache(clientId, account);
        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes);
        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);
        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);
        return {
            account: cachedAccount,
            idToken: cachedIdToken,
            accessToken: cachedAccessToken,
            refreshToken: cachedRefreshToken,
            appMetadata: cachedAppMetadata,
        };
    };
    /**
     * Retrieve AccountEntity from cache
     * @param account
     */
    CacheManager.prototype.readAccountFromCache = function (account) {
        var accountKey = AccountEntity.generateAccountCacheKey(account);
        return this.getAccount(accountKey);
    };
    /**
     * Retrieve IdTokenEntity from cache
     * @param clientId
     * @param account
     * @param inputRealm
     */
    CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {
        var idTokenKey = CredentialEntity.generateCredentialCacheKey(account.homeAccountId, account.environment, exports.CredentialType.ID_TOKEN, clientId, account.tenantId);
        return this.getCredential(idTokenKey);
    };
    /**
     * Retrieve AccessTokenEntity from cache
     * @param clientId
     * @param account
     * @param scopes
     * @param inputRealm
     */
    CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes) {
        var accessTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: exports.CredentialType.ACCESS_TOKEN,
            clientId: clientId,
            realm: account.tenantId,
            target: scopes.printScopesLowerCase(),
        };
        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
        var numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) {
            return null;
        }
        else if (numAccessTokens > 1) {
            throw ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return accessTokens[0];
    };
    /**
     * Helper to retrieve the appropriate refresh token from cache
     * @param clientId
     * @param account
     * @param familyRT
     */
    CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {
        var id = familyRT ? THE_FAMILY_ID : null;
        var refreshTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: exports.CredentialType.REFRESH_TOKEN,
            clientId: clientId,
            familyId: id
        };
        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);
        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });
        var numRefreshTokens = refreshTokens.length;
        if (numRefreshTokens < 1) {
            return null;
        }
        // address the else case after remove functions address environment aliases
        return refreshTokens[0];
    };
    /**
     * Retrieve AppMetadataEntity from cache
     */
    CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {
        var cacheKey = AppMetadataEntity.generateAppMetadataCacheKey(environment, clientId);
        return this.getAppMetadata(cacheKey);
    };
    /**
     * Return the family_id value associated  with FOCI
     * @param environment
     * @param clientId
     */
    CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {
        var appMetadata = this.readAppMetadataFromCache(environment, clientId);
        return appMetadata && appMetadata.familyId === THE_FAMILY_ID;
    };
    /**
     * helper to match account ids
     * @param value
     * @param homeAccountId
     */
    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {
        return entity.homeAccountId && homeAccountId === entity.homeAccountId;
    };
    /**
     * helper to match assertion
     * @param value
     * @param oboAssertion
     */
    CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {
        return entity.oboAssertion && oboAssertion === entity.oboAssertion;
    };
    /**
     * helper to match environment
     * @param value
     * @param environment
     */
    CacheManager.prototype.matchEnvironment = function (entity, environment) {
        var cloudMetadata = TrustedAuthority.getCloudDiscoveryMetadata(environment);
        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {
            return true;
        }
        return false;
    };
    /**
     * helper to match credential type
     * @param entity
     * @param credentialType
     */
    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {
        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());
    };
    /**
     * helper to match client ids
     * @param entity
     * @param clientId
     */
    CacheManager.prototype.matchClientId = function (entity, clientId) {
        return entity.clientId && clientId === entity.clientId;
    };
    /**
     * helper to match family ids
     * @param entity
     * @param familyId
     */
    CacheManager.prototype.matchFamilyId = function (entity, familyId) {
        return entity.familyId && familyId === entity.familyId;
    };
    /**
     * helper to match realm
     * @param entity
     * @param realm
     */
    CacheManager.prototype.matchRealm = function (entity, realm) {
        return entity.realm && realm === entity.realm;
    };
    /**
     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
     * @param entity
     * @param target
     */
    CacheManager.prototype.matchTarget = function (entity, target) {
        if (entity.credentialType !== exports.CredentialType.ACCESS_TOKEN || StringUtils.isEmpty(entity.target)) {
            return false;
        }
        var entityScopeSet = ScopeSet.fromString(entity.target);
        var requestTargetScopeSet = ScopeSet.fromString(target);
        if (!requestTargetScopeSet.containsOnlyDefaultScopes()) {
            requestTargetScopeSet.removeDefaultScopes(); // ignore default scopes
        }
        return entityScopeSet.containsScopeSet(requestTargetScopeSet);
    };
    /**
     * returns if a given cache entity is of the type appmetadata
     * @param key
     */
    CacheManager.prototype.isAppMetadata = function (key) {
        return key.indexOf(APP_METADATA) !== -1;
    };
    /**
     * Helper to convert serialized data to object
     * @param obj
     * @param json
     */
    CacheManager.toObject = function (obj, json) {
        for (var propertyName in json) {
            obj[propertyName] = json[propertyName];
        }
        return obj;
    };
    return CacheManager;
}());
var DefaultStorageClass = /** @class */ (function (_super) {
    __extends(DefaultStorageClass, _super);
    function DefaultStorageClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultStorageClass.prototype.setItem = function () {
        var notImplErr = "Storage interface - setItem() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getItem = function () {
        var notImplErr = "Storage interface - getItem() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.removeItem = function () {
        var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.containsKey = function () {
        var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.getKeys = function () {
        var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass.prototype.clear = function () {
        var notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
        throw AuthError.createUnexpectedError(notImplErr);
    };
    return DefaultStorageClass;
}(CacheManager));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Token renewal offset default in seconds
var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
var DEFAULT_AUTH_OPTIONS = {
    clientId: "",
    authority: null,
    knownAuthorities: [],
    cloudDiscoveryMetadata: "",
    clientCapabilities: [],
    protocolMode: exports.ProtocolMode.AAD
};
var DEFAULT_SYSTEM_OPTIONS = {
    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC
};
var DEFAULT_LOGGER_IMPLEMENTATION = {
    loggerCallback: function () {
        // allow users to not set loggerCallback
    },
    piiLoggingEnabled: false,
    logLevel: exports.LogLevel.Info
};
var DEFAULT_NETWORK_IMPLEMENTATION = {
    sendGetRequestAsync: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    sendPostRequestAsync: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};
var DEFAULT_CRYPTO_IMPLEMENTATION = {
    createNewGuid: function () {
        var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    base64Decode: function () {
        var notImplErr = "Crypto interface - base64Decode() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    base64Encode: function () {
        var notImplErr = "Crypto interface - base64Encode() has not been implemented";
        throw AuthError.createUnexpectedError(notImplErr);
    },
    generatePkceCodes: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    getPublicKeyThumbprint: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    signJwt: function () {
        return __awaiter(this, void 0, void 0, function () {
            var notImplErr;
            return __generator(this, function (_a) {
                notImplErr = "Crypto interface - signJwt() has not been implemented";
                throw AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};
var DEFAULT_LIBRARY_INFO = {
    sku: Constants.SKU,
    version: version,
    cpu: "",
    os: ""
};
var DEFAULT_CLIENT_CREDENTIALS = {
    clientSecret: "",
    clientAssertion: null
};
/**
 * Function that sets the default options when not explicitly configured from app developer
 *
 * @param Configuration
 *
 * @returns Configuration
 */
function buildClientConfiguration(_a) {
    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
    return {
        authOptions: __assign(__assign({}, DEFAULT_AUTH_OPTIONS), userAuthOptions),
        systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
        loggerOptions: __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption),
        storageInterface: storageImplementation || new DefaultStorageClass(),
        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,
        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
        libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),
        serverTelemetryManager: serverTelemetryManager || null,
        persistencePlugin: persistencePlugin || null,
        serializableCache: serializableCache || null
    };
}

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Error thrown when there is an error with the server code, for example, unavailability.
 */
var ServerError = /** @class */ (function (_super) {
    __extends(ServerError, _super);
    function ServerError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ServerError";
        _this.subError = subError;
        Object.setPrototypeOf(_this, ServerError.prototype);
        return _this;
    }
    return ServerError;
}(AuthError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingUtils = /** @class */ (function () {
    function ThrottlingUtils() {
    }
    /**
     * Prepares a RequestThumbprint to be stored as a key.
     * @param thumbprint
     */
    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {
        return ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
    };
    /**
     * Performs necessary throttling checks before a network request.
     * @param cacheManager
     * @param thumbprint
     */
    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {
        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
        var value = cacheManager.getItem(key, exports.CacheSchemaType.THROTTLING);
        if (value) {
            if (value.throttleTime < Date.now()) {
                cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);
                return;
            }
            throw new ServerError(value.errorCodes.join(" "), value.errorMessage, value.subError);
        }
    };
    /**
     * Performs necessary throttling checks after a network request.
     * @param cacheManager
     * @param thumbprint
     * @param response
     */
    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {
        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
            var thumbprintValue = {
                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),
                error: response.body.error,
                errorCodes: response.body.error_codes,
                errorMessage: response.body.error_description,
                subError: response.body.suberror
            };
            cacheManager.setItem(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue, exports.CacheSchemaType.THROTTLING);
        }
    };
    /**
     * Checks a NetworkResponse object's status codes against 429 or 5xx
     * @param response
     */
    ThrottlingUtils.checkResponseStatus = function (response) {
        return response.status == 429 || response.status >= 500 && response.status < 600;
    };
    /**
     * Checks a NetworkResponse object's RetryAfter header
     * @param response
     */
    ThrottlingUtils.checkResponseForRetryAfter = function (response) {
        if (response.headers) {
            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
        }
        return false;
    };
    /**
     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
     * @param throttleTime
     */
    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {
        if (throttleTime <= 0) {
            throttleTime = null;
        }
        var currentSeconds = Date.now() / 1000;
        return Math.floor(Math.min(currentSeconds + (throttleTime || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
    };
    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {
        var thumbprint = {
            clientId: clientId,
            authority: authority,
            scopes: scopes,
            homeAccountIdentifier: homeAccountIdentifier
        };
        var key = this.generateThrottlingStorageKey(thumbprint);
        return cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);
    };
    return ThrottlingUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var NetworkManager = /** @class */ (function () {
    function NetworkManager(networkClient, cacheManager) {
        this.networkClient = networkClient;
        this.cacheManager = cacheManager;
    }
    /**
     * Wraps sendPostRequestAsync with necessary preflight and postflight logic
     * @param thumbprint
     * @param tokenEndpoint
     * @param options
     */
    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];
                    case 1:
                        response = _a.sent();
                        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                        // Placeholder for Telemetry hook
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return NetworkManager;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 */
var BaseClient = /** @class */ (function () {
    function BaseClient(configuration) {
        // Set the configuration
        this.config = buildClientConfiguration(configuration);
        // Initialize the logger
        this.logger = new Logger(this.config.loggerOptions);
        // Initialize crypto
        this.cryptoUtils = this.config.cryptoInterface;
        // Initialize storage interface
        this.cacheManager = this.config.storageInterface;
        // Set the network interface
        this.networkClient = this.config.networkInterface;
        // Set the NetworkManager
        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);
        // Set TelemetryManager
        this.serverTelemetryManager = this.config.serverTelemetryManager;
        TrustedAuthority.setTrustedAuthoritiesFromConfig(this.config.authOptions.knownAuthorities, this.config.authOptions.cloudDiscoveryMetadata);
        this.authority = this.config.authOptions.authority;
    }
    /**
     * Creates default headers for requests to token endpoint
     */
    BaseClient.prototype.createDefaultTokenRequestHeaders = function () {
        var headers = this.createDefaultLibraryHeaders();
        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;
        headers[HeaderNames.X_MS_LIB_CAPABILITY] = HeaderNames.X_MS_LIB_CAPABILITY_VALUE;
        if (this.serverTelemetryManager) {
            headers[HeaderNames.X_CLIENT_CURR_TELEM] = this.serverTelemetryManager.generateCurrentRequestHeaderValue();
            headers[HeaderNames.X_CLIENT_LAST_TELEM] = this.serverTelemetryManager.generateLastRequestHeaderValue();
        }
        return headers;
    };
    /**
     * addLibraryData
     */
    BaseClient.prototype.createDefaultLibraryHeaders = function () {
        var headers = {};
        // client info headers
        headers[AADServerParamKeys.X_CLIENT_SKU] = this.config.libraryInfo.sku;
        headers[AADServerParamKeys.X_CLIENT_VER] = this.config.libraryInfo.version;
        headers[AADServerParamKeys.X_CLIENT_OS] = this.config.libraryInfo.os;
        headers[AADServerParamKeys.X_CLIENT_CPU] = this.config.libraryInfo.cpu;
        return headers;
    };
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */
    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];
                    case 1:
                        response = _a.sent();
                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {
                            // Telemetry data successfully logged by server, clear Telemetry cache
                            this.config.serverTelemetryManager.clearTelemetryCache();
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return BaseClient;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Validates server consumable params from the "request" objects
 */
var RequestValidator = /** @class */ (function () {
    function RequestValidator() {
    }
    /**
     * Utility to check if the `redirectUri` in the request is a non-null value
     * @param redirectUri
     */
    RequestValidator.validateRedirectUri = function (redirectUri) {
        if (StringUtils.isEmpty(redirectUri)) {
            throw ClientConfigurationError.createRedirectUriEmptyError();
        }
    };
    /**
     * Utility to validate prompt sent by the user in the request
     * @param prompt
     */
    RequestValidator.validatePrompt = function (prompt) {
        if ([
            PromptValue.LOGIN,
            PromptValue.SELECT_ACCOUNT,
            PromptValue.CONSENT,
            PromptValue.NONE
        ].indexOf(prompt) < 0) {
            throw ClientConfigurationError.createInvalidPromptError(prompt);
        }
    };
    RequestValidator.validateClaims = function (claims) {
        try {
            JSON.parse(claims);
        }
        catch (e) {
            throw ClientConfigurationError.createInvalidClaimsRequestError();
        }
    };
    /**
     * Utility to validate code_challenge and code_challenge_method
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {
            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
        else {
            this.validateCodeChallengeMethod(codeChallengeMethod);
        }
    };
    /**
     * Utility to validate code_challenge_method
     * @param codeChallengeMethod
     */
    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
        if ([
            CodeChallengeMethodValues.PLAIN,
            CodeChallengeMethodValues.S256
        ].indexOf(codeChallengeMethod) < 0) {
            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();
        }
    };
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */
    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
        if (!eQParams) {
            return null;
        }
        // Remove any query parameters already included in SSO params
        queryParams.forEach(function (value, key) {
            if (eQParams[key]) {
                delete eQParams[key];
            }
        });
        return eQParams;
    };
    return RequestValidator;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var RequestParameterBuilder = /** @class */ (function () {
    function RequestParameterBuilder() {
        this.parameters = new Map();
    }
    /**
     * add response_type = code
     */
    RequestParameterBuilder.prototype.addResponseTypeCode = function () {
        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));
    };
    /**
     * add response_mode. defaults to query.
     * @param responseMode
     */
    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : exports.ResponseMode.QUERY));
    };
    /**
     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
     * @param scopeSet
     * @param addOidcScopes
     */
    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
        if (addOidcScopes === void 0) { addOidcScopes = true; }
        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE]) : scopes || [];
        var scopeSet = new ScopeSet(requestScopes);
        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
    };
    /**
     * add clientId
     * @param clientId
     */
    RequestParameterBuilder.prototype.addClientId = function (clientId) {
        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
    };
    /**
     * add redirect_uri
     * @param redirectUri
     */
    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {
        RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add domain_hint
     * @param domainHint
     */
    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
    };
    /**
     * add login_hint
     * @param loginHint
     */
    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
    };
    /**
     * add sid
     * @param sid
     */
    RequestParameterBuilder.prototype.addSid = function (sid) {
        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));
    };
    /**
     * add claims
     * @param claims
     */
    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
        RequestValidator.validateClaims(mergedClaims);
        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
    };
    /**
     * add correlationId
     * @param correlationId
     */
    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
    };
    /**
     * add library info query params
     * @param libraryInfo
     */
    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
        // Telemetry Info
        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
    };
    /**
     * add prompt
     * @param prompt
     */
    RequestParameterBuilder.prototype.addPrompt = function (prompt) {
        RequestValidator.validatePrompt(prompt);
        this.parameters.set("" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
    };
    /**
     * add state
     * @param state
     */
    RequestParameterBuilder.prototype.addState = function (state) {
        if (!StringUtils.isEmpty(state)) {
            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));
        }
    };
    /**
     * add nonce
     * @param nonce
     */
    RequestParameterBuilder.prototype.addNonce = function (nonce) {
        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));
    };
    /**
     * add code_challenge and code_challenge_method
     * - throw if either of them are not passed
     * @param codeChallenge
     * @param codeChallengeMethod
     */
    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
        if (codeChallenge && codeChallengeMethod) {
            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
        }
        else {
            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
        }
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */
    RequestParameterBuilder.prototype.addDeviceCode = function (code) {
        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
    };
    /**
     * add the `refreshToken` passed by the user
     * @param refreshToken
     */
    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
    };
    /**
     * add the `code_verifier` passed by the user to exchange for a token
     * @param codeVerifier
     */
    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
    };
    /**
     * add client_secret
     * @param clientSecret
     */
    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
    };
    /**
     * add clientAssertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
    };
    /**
     * add clientAssertionType for confidential client flows
     * @param clientAssertionType
     */
    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
    };
    /**
     * add OBO assertion for confidential client flows
     * @param clientAssertion
     */
    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
    };
    /**
     * add grant type
     * @param grantType
     */
    RequestParameterBuilder.prototype.addGrantType = function (grantType) {
        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
    };
    /**
     * add client info
     *
     */
    RequestParameterBuilder.prototype.addClientInfo = function () {
        this.parameters.set(ClientInfo, "1");
    };
    /**
     * add extraQueryParams
     * @param eQparams
     */
    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {
        var _this = this;
        RequestValidator.sanitizeEQParams(eQparams, this.parameters);
        Object.keys(eQparams).forEach(function (key) {
            _this.parameters.set(key, eQparams[key]);
        });
    };
    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
        var mergedClaims;
        // Parse provided claims into JSON object or initialize empty object
        if (StringUtils.isEmpty(claims)) {
            mergedClaims = {};
        }
        else {
            try {
                mergedClaims = JSON.parse(claims);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidClaimsRequestError();
            }
        }
        if (clientCapabilities && clientCapabilities.length > 0) {
            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {
                // Add access_token key to claims object
                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};
            }
            // Add xms_cc claim with provided clientCapabilities to access_token key
            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {
                values: clientCapabilities
            };
        }
        return JSON.stringify(mergedClaims);
    };
    /**
     * add pop_jwk to query params
     * @param cnfString
     */
    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
        if (!StringUtils.isEmpty(cnfString)) {
            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);
            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
        }
    };
    /**
     * Utility to create a URL from the params map
     */
    RequestParameterBuilder.prototype.createQueryString = function () {
        var queryParameterArray = new Array();
        this.parameters.forEach(function (value, key) {
            queryParameterArray.push(key + "=" + value);
        });
        return queryParameterArray.join("&");
    };
    return RequestParameterBuilder;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * JWT Token representation class. Parses token string and generates claims object.
 */
var AuthToken = /** @class */ (function () {
    function AuthToken(rawToken, crypto) {
        if (StringUtils.isEmpty(rawToken)) {
            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);
        }
        this.rawToken = rawToken;
        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);
    }
    /**
     * Extract token by decoding the rawToken
     *
     * @param encodedToken
     */
    AuthToken.extractTokenClaims = function (encodedToken, crypto) {
        // token will be decoded to get the username
        var decodedToken = StringUtils.decodeAuthToken(encodedToken);
        if (!decodedToken) {
            return null;
        }
        try {
            var base64TokenPayload = decodedToken.JWSPayload;
            // base64Decode() should throw an error if there is an issue
            var base64Decoded = crypto.base64Decode(base64TokenPayload);
            return JSON.parse(base64Decoded);
        }
        catch (err) {
            throw ClientAuthError.createTokenParsingError(err);
        }
    };
    return AuthToken;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Utility class which exposes functions for managing date and time operations.
 */
var TimeUtils = /** @class */ (function () {
    function TimeUtils() {
    }
    /**
     * return the current time in Unix time (seconds).
     */
    TimeUtils.nowSeconds = function () {
        // Date.getTime() returns in milliseconds.
        return Math.round(new Date().getTime() / 1000.0);
    };
    /**
     * check if a token is expired based on given UTC time in seconds.
     * @param expiresOn
     */
    TimeUtils.isTokenExpired = function (expiresOn, offset) {
        // check for access token expiry
        var expirationSec = Number(expiresOn) || 0;
        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;
        // If current time + offset is greater than token expiration time, then token is expired.
        return (offsetCurrentTimeSec > expirationSec);
    };
    return TimeUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ID_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      realm: Full tenant or organizational identifier that the account belongs to
 * }
 */
var IdTokenEntity = /** @class */ (function (_super) {
    __extends(IdTokenEntity, _super);
    function IdTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create IdTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {
        var idTokenEntity = new IdTokenEntity();
        idTokenEntity.credentialType = exports.CredentialType.ID_TOKEN;
        idTokenEntity.homeAccountId = homeAccountId;
        idTokenEntity.environment = environment;
        idTokenEntity.clientId = clientId;
        idTokenEntity.secret = idToken;
        idTokenEntity.realm = tenantId;
        idTokenEntity.oboAssertion = oboAssertion;
        return idTokenEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    IdTokenEntity.isIdTokenEntity = function (entity) {
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === exports.CredentialType.ID_TOKEN);
    };
    return IdTokenEntity;
}(CredentialEntity));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * ACCESS_TOKEN Credential Type
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      cachedAt: Absolute device time when entry was created in the cache.
 *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
 *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
 *      keyId: used for POP and SSH tokenTypes
 *      tokenType: Type of the token issued. Usually "Bearer"
 * }
 */
var AccessTokenEntity = /** @class */ (function (_super) {
    __extends(AccessTokenEntity, _super);
    function AccessTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create AccessTokenEntity
     * @param homeAccountId
     * @param environment
     * @param accessToken
     * @param clientId
     * @param tenantId
     * @param scopes
     * @param expiresOn
     * @param extExpiresOn
     */
    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, tokenType, oboAssertion) {
        var atEntity = new AccessTokenEntity();
        atEntity.homeAccountId = homeAccountId;
        atEntity.credentialType = exports.CredentialType.ACCESS_TOKEN;
        atEntity.secret = accessToken;
        var currentTime = TimeUtils.nowSeconds();
        atEntity.cachedAt = currentTime.toString();
        /*
         * Token expiry time.
         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
         */
        atEntity.expiresOn = expiresOn.toString();
        atEntity.extendedExpiresOn = extExpiresOn.toString();
        atEntity.environment = environment;
        atEntity.clientId = clientId;
        atEntity.realm = tenantId;
        atEntity.target = scopes;
        atEntity.oboAssertion = oboAssertion;
        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? exports.AuthenticationScheme.BEARER : tokenType;
        return atEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    AccessTokenEntity.isAccessTokenEntity = function (entity) {
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("realm") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity.hasOwnProperty("target") &&
            entity["credentialType"] === exports.CredentialType.ACCESS_TOKEN);
    };
    return AccessTokenEntity;
}(CredentialEntity));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * REFRESH_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
 *
 * Value:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 * }
 */
var RefreshTokenEntity = /** @class */ (function (_super) {
    __extends(RefreshTokenEntity, _super);
    function RefreshTokenEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create RefreshTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */
    RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {
        var rtEntity = new RefreshTokenEntity();
        rtEntity.clientId = clientId;
        rtEntity.credentialType = exports.CredentialType.REFRESH_TOKEN;
        rtEntity.environment = environment;
        rtEntity.homeAccountId = homeAccountId;
        rtEntity.secret = refreshToken;
        rtEntity.oboAssertion = oboAssertion;
        if (familyId)
            rtEntity.familyId = familyId;
        return rtEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */
    RefreshTokenEntity.isRefreshTokenEntity = function (entity) {
        return (entity.hasOwnProperty("homeAccountId") &&
            entity.hasOwnProperty("environment") &&
            entity.hasOwnProperty("credentialType") &&
            entity.hasOwnProperty("clientId") &&
            entity.hasOwnProperty("secret") &&
            entity["credentialType"] === exports.CredentialType.REFRESH_TOKEN);
    };
    return RefreshTokenEntity;
}(CredentialEntity));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * InteractionRequiredAuthErrorMessage class containing string constants used by error codes and messages.
 */
var InteractionRequiredAuthErrorMessage = [
    "interaction_required",
    "consent_required",
    "login_required"
];
var InteractionRequiredAuthSubErrorMessage = [
    "message_only",
    "additional_action",
    "basic_action",
    "user_password_expired",
    "consent_required"
];
/**
 * Error thrown when user interaction is required at the auth server.
 */
var InteractionRequiredAuthError = /** @class */ (function (_super) {
    __extends(InteractionRequiredAuthError, _super);
    function InteractionRequiredAuthError(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "InteractionRequiredAuthError";
        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
        return _this;
    }
    InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {
        var isInteractionRequiredErrorCode = !StringUtils.isEmpty(errorCode) && InteractionRequiredAuthErrorMessage.indexOf(errorCode) > -1;
        var isInteractionRequiredSubError = !StringUtils.isEmpty(subError) && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
        var isInteractionRequiredErrorDesc = !StringUtils.isEmpty(errorString) && InteractionRequiredAuthErrorMessage.some(function (irErrorCode) {
            return errorString.indexOf(irErrorCode) > -1;
        });
        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
    };
    return InteractionRequiredAuthError;
}(ServerError));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var CacheRecord = /** @class */ (function () {
    function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
        this.account = accountEntity;
        this.idToken = idTokenEntity;
        this.accessToken = accessTokenEntity;
        this.refreshToken = refreshTokenEntity;
        this.appMetadata = appMetadataEntity;
    }
    return CacheRecord;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which provides helpers for OAuth 2.0 protocol specific values
 */
var ProtocolUtils = /** @class */ (function () {
    function ProtocolUtils() {
    }
    /**
     * Appends user state with random guid, or returns random guid.
     * @param userState
     * @param randomGuid
     */
    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {
        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
        return !StringUtils.isEmpty(userState) ? "" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;
    };
    /**
     * Generates the state value used by the common library.
     * @param randomGuid
     * @param cryptoObj
     */
    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {
        if (!cryptoObj) {
            throw ClientAuthError.createNoCryptoObjectError("generateLibraryState");
        }
        // Create a state object containing a unique id and the timestamp of the request creation
        var stateObj = {
            id: cryptoObj.createNewGuid(),
            ts: TimeUtils.nowSeconds()
        };
        if (meta) {
            stateObj.meta = meta;
        }
        var stateString = JSON.stringify(stateObj);
        return cryptoObj.base64Encode(stateString);
    };
    /**
     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
     * @param state
     * @param cryptoObj
     */
    ProtocolUtils.parseRequestState = function (cryptoObj, state) {
        if (!cryptoObj) {
            throw ClientAuthError.createNoCryptoObjectError("parseRequestState");
        }
        if (StringUtils.isEmpty(state)) {
            throw ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
        }
        try {
            // Split the state between library state and user passed state and decode them separately
            var splitState = decodeURIComponent(state).split(Constants.RESOURCE_DELIM);
            var libraryState = splitState[0];
            var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : "";
            var libraryStateString = cryptoObj.base64Decode(libraryState);
            var libraryStateObj = JSON.parse(libraryStateString);
            return {
                userRequestState: !StringUtils.isEmpty(userState) ? userState : "",
                libraryState: libraryStateObj
            };
        }
        catch (e) {
            throw ClientAuthError.createInvalidStateError(state, e);
        }
    };
    return ProtocolUtils;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var KeyLocation;
(function (KeyLocation) {
    KeyLocation["SW"] = "sw";
    KeyLocation["UHW"] = "uhw";
})(KeyLocation || (KeyLocation = {}));
var PopTokenGenerator = /** @class */ (function () {
    function PopTokenGenerator(cryptoUtils) {
        this.cryptoUtils = cryptoUtils;
    }
    PopTokenGenerator.prototype.generateCnf = function (resourceRequestMethod, resourceRequestUri) {
        return __awaiter(this, void 0, void 0, function () {
            var kidThumbprint, reqCnf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(resourceRequestMethod, resourceRequestUri)];
                    case 1:
                        kidThumbprint = _a.sent();
                        reqCnf = {
                            kid: kidThumbprint,
                            xms_ksl: KeyLocation.SW
                        };
                        return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];
                }
            });
        });
    };
    PopTokenGenerator.prototype.signPopToken = function (accessToken, resourceRequestMethod, resourceRequestUri) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenClaims, resourceUrlString, resourceUrlComponents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);
                        resourceUrlString = new UrlString(resourceRequestUri);
                        resourceUrlComponents = resourceUrlString.getUrlComponents();
                        return [4 /*yield*/, this.cryptoUtils.signJwt({
                                at: accessToken,
                                ts: "" + TimeUtils.nowSeconds(),
                                m: resourceRequestMethod.toUpperCase(),
                                u: resourceUrlComponents.HostNameAndPort || "",
                                nonce: this.cryptoUtils.createNewGuid(),
                                p: resourceUrlComponents.AbsolutePath,
                                q: [[], resourceUrlComponents.QueryString],
                            }, tokenClaims.cnf.kid)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return PopTokenGenerator;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var TokenCacheContext = /** @class */ (function () {
    function TokenCacheContext(tokenCache, hasChanged) {
        this.cache = tokenCache;
        this.hasChanged = hasChanged;
    }
    Object.defineProperty(TokenCacheContext.prototype, "cacheHasChanged", {
        get: function () {
            return this.hasChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenCacheContext.prototype, "tokenCache", {
        get: function () {
            return this.cache;
        },
        enumerable: true,
        configurable: true
    });
    return TokenCacheContext;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class that handles response parsing.
 */
var ResponseHandler = /** @class */ (function () {
    function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
        this.clientId = clientId;
        this.cacheStorage = cacheStorage;
        this.cryptoObj = cryptoObj;
        this.logger = logger;
        this.serializableCache = serializableCache;
        this.persistencePlugin = persistencePlugin;
    }
    /**
     * Function which validates server authorization code response.
     * @param serverResponseHash
     * @param cachedState
     * @param cryptoObj
     */
    ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
            throw ClientAuthError.createStateMismatchError();
        }
        // Check for error
        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                throw new InteractionRequiredAuthError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            throw new ServerError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror);
        }
        if (serverResponseHash.client_info) {
            buildClientInfo(serverResponseHash.client_info, cryptoObj);
        }
    };
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     */
    ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
        // Check for error
        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
            }
            var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
            throw new ServerError(serverResponse.error, errString);
        }
    };
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authority
     */
    ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, resourceRequestMethod, resourceRequestUri, cachedNonce, cachedState, requestScopes, oboAssertion, handlingRefreshTokenResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // generate homeAccountId
                        if (serverTokenResponse.client_info) {
                            this.clientInfo = buildClientInfo(serverTokenResponse.client_info, this.cryptoObj);
                            if (!StringUtils.isEmpty(this.clientInfo.uid) && !StringUtils.isEmpty(this.clientInfo.utid)) {
                                this.homeAccountIdentifier = this.clientInfo.uid + "." + this.clientInfo.utid;
                            }
                        }
                        else {
                            this.logger.verbose("No client info in response");
                            this.homeAccountIdentifier = "";
                        }
                        idTokenObj = null;
                        if (!StringUtils.isEmpty(serverTokenResponse.id_token)) {
                            // create an idToken object (not entity)
                            idTokenObj = new AuthToken(serverTokenResponse.id_token, this.cryptoObj);
                            // token nonce check (TODO: Add a warning if no nonce is given?)
                            if (!StringUtils.isEmpty(cachedNonce)) {
                                if (idTokenObj.claims.nonce !== cachedNonce) {
                                    throw ClientAuthError.createNonceMismatchError();
                                }
                            }
                        }
                        requestStateObj = null;
                        if (!StringUtils.isEmpty(cachedState)) {
                            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, cachedState);
                        }
                        cacheRecord = this.generateCacheRecord(serverTokenResponse, idTokenObj, authority, requestStateObj && requestStateObj.libraryState, requestScopes, oboAssertion);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 4, 7]);
                        if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                        this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                        cacheContext = new TokenCacheContext(this.serializableCache, true);
                        return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        /*
                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                         * If not present, we should return null, as it's the case that another application called removeAccount in between
                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                         */
                        if (handlingRefreshTokenResponse && cacheRecord.account) {
                            key = cacheRecord.account.generateAccountKey();
                            account = this.cacheStorage.getAccount(key);
                            if (!account) {
                                this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                return [2 /*return*/, null];
                            }
                        }
                        this.cacheStorage.saveCacheRecord(cacheRecord);
                        return [3 /*break*/, 7];
                    case 4:
                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 6];
                        this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                        return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, cacheRecord, idTokenObj, false, requestStateObj, resourceRequestMethod, resourceRequestUri)];
                }
            });
        });
    };
    /**
     * Generates CacheRecord
     * @param serverTokenResponse
     * @param idTokenObj
     * @param authority
     */
    ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, idTokenObj, authority, libraryState, requestScopes, oboAssertion) {
        var env = Authority.generateEnvironmentFromAuthority(authority);
        if (StringUtils.isEmpty(env)) {
            throw ClientAuthError.createInvalidCacheEnvironmentError();
        }
        // IdToken: non AAD scenarios can have empty realm
        var cachedIdToken = null;
        var cachedAccount = null;
        if (!StringUtils.isEmpty(serverTokenResponse.id_token)) {
            cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, idTokenObj.claims.tid || "", oboAssertion);
            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion);
        }
        // AccessToken
        var cachedAccessToken = null;
        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {
            // If scopes not returned in server response, use request scopes
            var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);
            // Expiration calculation
            var currentTime = TimeUtils.nowSeconds();
            // If the request timestamp was sent in the library state, use that timestamp to calculate expiration. Otherwise, use current time.
            var timestamp = libraryState ? libraryState.ts : currentTime;
            var tokenExpirationSeconds = timestamp + serverTokenResponse.expires_in;
            var extendedTokenExpirationSeconds = tokenExpirationSeconds + serverTokenResponse.ext_expires_in;
            // non AAD scenarios can have empty realm
            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, idTokenObj ? idTokenObj.claims.tid || "" : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, serverTokenResponse.token_type, oboAssertion);
        }
        // refreshToken
        var cachedRefreshToken = null;
        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, oboAssertion);
        }
        // appMetadata
        var cachedAppMetadata = null;
        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {
            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
        }
        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
    };
    /**
     * Generate Account
     * @param serverTokenResponse
     * @param idToken
     * @param authority
     */
    ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion) {
        var authorityType = authority.authorityType;
        // ADFS does not require client_info in the response
        if (authorityType === exports.AuthorityType.Adfs) {
            this.logger.verbose("Authority type is ADFS, creating ADFS account");
            return AccountEntity.createGenericAccount(authority, idToken, oboAssertion);
        }
        // This fallback applies to B2C as well as they fall under an AAD account type.
        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
            throw ClientAuthError.createClientInfoEmptyError(serverTokenResponse.client_info);
        }
        return serverTokenResponse.client_info ?
            AccountEntity.createAccount(serverTokenResponse.client_info, authority, idToken, this.cryptoObj, oboAssertion) :
            AccountEntity.createGenericAccount(authority, idToken, oboAssertion);
    };
    /**
     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
     *
     * Optionally takes a state string that is set as-is in the response.
     *
     * @param cacheRecord
     * @param idTokenObj
     * @param fromTokenCache
     * @param stateString
     */
    ResponseHandler.generateAuthenticationResult = function (cryptoObj, cacheRecord, idTokenObj, fromTokenCache, requestState, resourceRequestMethod, resourceRequestUri) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        accessToken = "";
                        responseScopes = [];
                        expiresOn = null;
                        extExpiresOn = null;
                        familyId = null;
                        if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                        if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(cryptoObj);
                        return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, resourceRequestMethod, resourceRequestUri)];
                    case 1:
                        accessToken = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        accessToken = cacheRecord.accessToken.secret;
                        _a.label = 3;
                    case 3:
                        responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                        _a.label = 4;
                    case 4:
                        if (cacheRecord.appMetadata) {
                            familyId = cacheRecord.appMetadata.familyId || null;
                        }
                        uid = idTokenObj ? idTokenObj.claims.oid || idTokenObj.claims.sub : "";
                        tid = idTokenObj ? idTokenObj.claims.tid : "";
                        return [2 /*return*/, {
                                uniqueId: uid,
                                tenantId: tid,
                                scopes: responseScopes,
                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                idToken: idTokenObj ? idTokenObj.rawToken : "",
                                idTokenClaims: idTokenObj ? idTokenObj.claims : null,
                                accessToken: accessToken,
                                fromCache: fromTokenCache,
                                expiresOn: expiresOn,
                                extExpiresOn: extExpiresOn,
                                familyId: familyId,
                                tokenType: cacheRecord.accessToken ? cacheRecord.accessToken.tokenType : "",
                                state: requestState ? requestState.userRequestState : ""
                            }];
                }
            });
        });
    };
    return ResponseHandler;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Oauth2.0 Authorization Code client
 */
var AuthorizationCodeClient = /** @class */ (function (_super) {
    __extends(AuthorizationCodeClient, _super);
    function AuthorizationCodeClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Creates the URL of the authorization request letting the user input credentials and consent to the
     * application. The URL target the /authorize endpoint of the authority configured in the
     * application object.
     *
     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
     * acquireToken(AuthorizationCodeRequest)
     * @param request
     */
    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var queryString;
            return __generator(this, function (_a) {
                queryString = this.createAuthCodeUrlQueryString(request);
                return [2 /*return*/, this.authority.authorizationEndpoint + "?" + queryString];
            });
        });
    };
    /**
     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
     * authorization_code_grant
     * @param request
     */
    AuthorizationCodeClient.prototype.acquireToken = function (request, cachedNonce, cachedState) {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.info("in acquireToken call");
                        if (!request || StringUtils.isEmpty(request.code)) {
                            throw ClientAuthError.createTokenRequestCannotBeMadeError();
                        }
                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        // Validate response. This function throws a server error if an error is returned by the server.
                        responseHandler.validateTokenResponse(response.body);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, cachedNonce, cachedState)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */
    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {
        // Handle responses.
        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger);
        // Create UrlString object to remove leading # using getHash()
        var hashUrlString = new UrlString(hashFragment);
        // Deserialize hash fragment response parameters.
        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());
        // Get code response
        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
        return serverParams.code;
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */
    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {
        // Throw error if logoutRequest is null/undefined
        if (!logoutRequest) {
            throw ClientConfigurationError.createEmptyLogoutRequestError();
        }
        if (logoutRequest.account) {
            // Clear given account.
            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));
        }
        else {
            // Clear all accounts and tokens
            this.cacheManager.clear();
        }
        // Get postLogoutRedirectUri.
        var postLogoutUriParam = logoutRequest.postLogoutRedirectUri ?
            "?" + AADServerParamKeys.POST_LOGOUT_URI + "=" + encodeURIComponent(logoutRequest.postLogoutRedirectUri) : "";
        var correlationIdParam = logoutRequest.correlationId ?
            "&" + AADServerParamKeys.CLIENT_REQUEST_ID + "=" + encodeURIComponent(logoutRequest.correlationId) : "";
        // Construct logout URI.
        var logoutUri = "" + this.authority.endSessionEndpoint + postLogoutUriParam + correlationIdParam;
        return logoutUri;
    };
    /**
     * Executes POST request to token endpoint
     * @param authority
     * @param request
     */
    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {
        return __awaiter(this, void 0, void 0, function () {
            var thumbprint, requestBody, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes
                        };
                        return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        headers = this.createDefaultTokenRequestHeaders();
                        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Generates a map for all the params to be sent to the service
     * @param request
     */
    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parameterBuilder = new RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        // validate the redirectUri (to be a non null value)
                        parameterBuilder.addRedirectUri(request.redirectUri);
                        // Add scope array, parameter builder will add default scopes and dedupe
                        parameterBuilder.addScopes(request.scopes);
                        // add code: user set, not validated
                        parameterBuilder.addAuthorizationCode(request.code);
                        // add code_verifier if passed
                        if (request.codeVerifier) {
                            parameterBuilder.addCodeVerifier(request.codeVerifier);
                        }
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);
                        parameterBuilder.addClientInfo();
                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request.resourceRequestMethod, request.resourceRequestUri)];
                    case 1:
                        cnfString = _a.sent();
                        parameterBuilder.addPopToken(cnfString);
                        _a.label = 2;
                    case 2:
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    /**
     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
     * @param request
     */
    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);
        parameterBuilder.addScopes(requestScopes);
        // validate the redirectUri (to be a non null value)
        parameterBuilder.addRedirectUri(request.redirectUri);
        // generate the correlationId if not set by the user and add
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        // add response_mode. If not passed in it defaults to query.
        parameterBuilder.addResponseMode(request.responseMode);
        // add response_type = code
        parameterBuilder.addResponseTypeCode();
        // add library info parameters
        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
        // add client_info=1
        parameterBuilder.addClientInfo();
        if (request.codeChallenge) {
            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
        }
        if (request.prompt) {
            parameterBuilder.addPrompt(request.prompt);
        }
        if (request.domainHint) {
            parameterBuilder.addDomainHint(request.domainHint);
        }
        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
        if (request.sid) {
            parameterBuilder.addSid(request.sid);
        }
        else if (request.loginHint) {
            parameterBuilder.addLoginHint(request.loginHint);
        }
        else if (request.account && request.account.username) {
            parameterBuilder.addLoginHint(request.account.username);
        }
        if (request.nonce) {
            parameterBuilder.addNonce(request.nonce);
        }
        if (request.state) {
            parameterBuilder.addState(request.state);
        }
        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        if (request.extraQueryParameters) {
            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        }
        return parameterBuilder.createQueryString();
    };
    return AuthorizationCodeClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * OAuth2.0 Device code client
 */
var DeviceCodeClient = /** @class */ (function (_super) {
    __extends(DeviceCodeClient, _super);
    function DeviceCodeClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Gets device code from device code endpoint, calls back to with device code response, and
     * polls token endpoint to exchange device code for tokens
     * @param request
     */
    DeviceCodeClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var deviceCodeResponse, response, responseHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];
                    case 1:
                        deviceCodeResponse = _a.sent();
                        request.deviceCodeCallback(deviceCodeResponse);
                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];
                    case 2:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        // Validate response. This function throws a server error if an error is returned by the server.
                        responseHandler.validateTokenResponse(response);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, request.resourceRequestMethod, request.resourceRequestUri)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Creates device code request and executes http GET
     * @param request
     */
    DeviceCodeClient.prototype.getDeviceCode = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var queryString, headers, thumbprint;
            return __generator(this, function (_a) {
                queryString = this.createQueryString(request);
                headers = this.createDefaultLibraryHeaders();
                thumbprint = {
                    clientId: this.config.authOptions.clientId,
                    authority: request.authority,
                    scopes: request.scopes
                };
                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];
            });
        });
    };
    /**
     * Executes POST request to device code endpoint
     * @param deviceCodeEndpoint
     * @param queryString
     * @param headers
     */
    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {
                            body: queryString,
                            headers: headers
                        })];
                    case 1:
                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;
                        return [2 /*return*/, {
                                userCode: userCode,
                                deviceCode: deviceCode,
                                verificationUri: verificationUri,
                                expiresIn: expiresIn,
                                interval: interval,
                                message: message
                            }];
                }
            });
        });
    };
    /**
     * Create device code endpoint query parameters and returns string
     */
    DeviceCodeClient.prototype.createQueryString = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        parameterBuilder.addScopes(request.scopes);
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        return parameterBuilder.createQueryString();
    };
    /**
     * Creates token request with device code response and polls token endpoint at interval set by the device code
     * response
     * @param request
     * @param deviceCodeResponse
     */
    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, headers, deviceCodeExpirationTime, pollingIntervalMilli;
            var _this = this;
            return __generator(this, function (_a) {
                requestBody = this.createTokenRequestBody(request, deviceCodeResponse);
                headers = this.createDefaultTokenRequestHeaders();
                deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;
                pollingIntervalMilli = deviceCodeResponse.interval * 1000;
                /*
                 * Poll token endpoint while (device code is not expired AND operation has not been cancelled by
                 * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli
                 */
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var intervalId = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                            var thumbprint, response, error_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 5, , 6]);
                                        if (!request.cancel) return [3 /*break*/, 1];
                                        this.logger.error("Token request cancelled by setting DeviceCodeRequest.cancel = true");
                                        clearInterval(intervalId);
                                        reject(ClientAuthError.createDeviceCodeCancelledError());
                                        return [3 /*break*/, 4];
                                    case 1:
                                        if (!(TimeUtils.nowSeconds() > deviceCodeExpirationTime)) return [3 /*break*/, 2];
                                        this.logger.error("Device code expired. Expiration time of device code was " + deviceCodeExpirationTime);
                                        clearInterval(intervalId);
                                        reject(ClientAuthError.createDeviceCodeExpiredError());
                                        return [3 /*break*/, 4];
                                    case 2:
                                        thumbprint = {
                                            clientId: this.config.authOptions.clientId,
                                            authority: request.authority,
                                            scopes: request.scopes
                                        };
                                        return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];
                                    case 3:
                                        response = _a.sent();
                                        if (response.body && response.body.error == Constants.AUTHORIZATION_PENDING) {
                                            // user authorization is pending. Sleep for polling interval and try again
                                            this.logger.info(response.body.error_description);
                                        }
                                        else {
                                            clearInterval(intervalId);
                                            resolve(response.body);
                                        }
                                        _a.label = 4;
                                    case 4: return [3 /*break*/, 6];
                                    case 5:
                                        error_1 = _a.sent();
                                        clearInterval(intervalId);
                                        reject(error_1);
                                        return [3 /*break*/, 6];
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); }, pollingIntervalMilli);
                    })];
            });
        });
    };
    /**
     * Creates query parameters and converts to string.
     * @param request
     * @param deviceCodeResponse
     */
    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {
        var requestParameters = new RequestParameterBuilder();
        requestParameters.addScopes(request.scopes);
        requestParameters.addClientId(this.config.authOptions.clientId);
        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);
        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        requestParameters.addCorrelationId(correlationId);
        requestParameters.addClientInfo();
        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        return requestParameters.createQueryString();
    };
    return DeviceCodeClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * OAuth2.0 refresh token client
 */
var RefreshTokenClient = /** @class */ (function (_super) {
    __extends(RefreshTokenClient, _super);
    function RefreshTokenClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    RefreshTokenClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, null, null, null, null, true)];
                }
            });
        });
    };
    /**
     * Gets cached refresh token and attaches to request, then calls acquireToken API
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
            return __generator(this, function (_a) {
                // Cannot renew token if no request object is given.
                if (!request) {
                    throw ClientConfigurationError.createEmptyTokenRequestError();
                }
                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                if (!request.account) {
                    throw ClientAuthError.createNoAccountInSilentRequestError();
                }
                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);
                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                if (isFOCI) {
                    try {
                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];
                    }
                    catch (e) {
                        noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;
                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;
                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                            // throw in all other cases
                        }
                        else {
                            throw e;
                        }
                    }
                }
                // fall back to application refresh token acquisition
                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
            });
        });
    };
    /**
     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
     * @param request
     */
    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {
        return __awaiter(this, void 0, void 0, function () {
            var refreshToken, refreshTokenRequest;
            return __generator(this, function (_a) {
                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);
                // no refresh Token
                if (!refreshToken) {
                    throw ClientAuthError.createNoTokensFoundError();
                }
                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret });
                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
            });
        });
    };
    /**
     * Constructs the network message and makes a NW call to the underlying secure token service
     * @param request
     * @param authority
     */
    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, headers, thumbprint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];
                    case 1:
                        requestBody = _a.sent();
                        headers = this.createDefaultTokenRequestHeaders();
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes
                        };
                        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                }
            });
        });
    };
    /**
     * Helper function to create the token request body
     * @param request
     */
    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        parameterBuilder = new RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        parameterBuilder.addScopes(request.scopes);
                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);
                        parameterBuilder.addClientInfo();
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        parameterBuilder.addRefreshToken(request.refreshToken);
                        if (this.config.clientCredentials.clientSecret) {
                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        }
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                        _b = (_a = parameterBuilder).addPopToken;
                        return [4 /*yield*/, popTokenGenerator.generateCnf(request.resourceRequestMethod, request.resourceRequestUri)];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 2;
                    case 2:
                        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        }
                        return [2 /*return*/, parameterBuilder.createQueryString()];
                }
            });
        });
    };
    return RefreshTokenClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * OAuth2.0 client credential grant
 */
var ClientCredentialClient = /** @class */ (function (_super) {
    __extends(ClientCredentialClient, _super);
    function ClientCredentialClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    ClientCredentialClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAuthenticationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scopeSet = new ScopeSet(request.scopes || []);
                        if (!request.skipCache) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult()];
                    case 3:
                        cachedAuthenticationResult = _a.sent();
                        if (!(cachedAuthenticationResult != null)) return [3 /*break*/, 4];
                        return [2 /*return*/, cachedAuthenticationResult];
                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientCredentialClient.prototype.getCachedAuthenticationResult = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAccessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedAccessToken = this.readAccessTokenFromCache();
                        if (!cachedAccessToken ||
                            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, {
                                account: null,
                                accessToken: cachedAccessToken,
                                idToken: null,
                                refreshToken: null,
                                appMetadata: null
                            }, null, true)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {
        var accessTokenFilter = {
            homeAccountId: "",
            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
            credentialType: exports.CredentialType.ACCESS_TOKEN,
            clientId: this.config.authOptions.clientId,
            realm: this.authority.tenant,
            target: this.scopeSet.printScopesLowerCase()
        };
        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
        if (accessTokens.length < 1) {
            return null;
        }
        else if (accessTokens.length > 1) {
            throw ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return accessTokens[0];
    };
    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, headers, thumbprint, response, responseHandler, tokenResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestBody = this.createTokenRequestBody(request);
                        headers = this.createDefaultTokenRequestHeaders();
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: request.authority,
                            scopes: request.scopes
                        };
                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, null, null, request.scopes)];
                    case 2:
                        tokenResponse = _a.sent();
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        parameterBuilder.addScopes(request.scopes, false);
        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        if (this.config.clientCredentials.clientSecret) {
            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
        }
        if (this.config.clientCredentials.clientAssertion) {
            var clientAssertion = this.config.clientCredentials.clientAssertion;
            parameterBuilder.addClientAssertion(clientAssertion.assertion);
            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
        }
        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        }
        return parameterBuilder.createQueryString();
    };
    return ClientCredentialClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * On-Behalf-Of client
 */
var OnBehalfOfClient = /** @class */ (function (_super) {
    __extends(OnBehalfOfClient, _super);
    function OnBehalfOfClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    OnBehalfOfClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAuthenticationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.scopeSet = new ScopeSet(request.scopes || []);
                        if (!request.skipCache) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        cachedAuthenticationResult = this.getCachedAuthenticationResult(request);
                        if (!(cachedAuthenticationResult != null)) return [3 /*break*/, 3];
                        return [2 /*return*/, cachedAuthenticationResult];
                    case 3: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, accountKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedAccessToken = this.readAccessTokenFromCache(request);
                        if (!cachedAccessToken ||
                            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                            return [2 /*return*/, null];
                        }
                        cachedIdToken = this.readIdTokenFromCache(request);
                        idTokenObject = null;
                        cachedAccount = null;
                        if (cachedIdToken) {
                            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);
                            accountKey = AccountEntity.generateAccountCacheKey({
                                homeAccountId: cachedIdToken.homeAccountId,
                                environment: cachedIdToken.environment,
                                tenantId: cachedIdToken.realm,
                                username: null
                            });
                            cachedAccount = this.cacheManager.getAccount(accountKey);
                        }
                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, {
                                account: cachedAccount,
                                accessToken: cachedAccessToken,
                                idToken: cachedIdToken,
                                refreshToken: null,
                                appMetadata: null,
                            }, idTokenObject, true)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OnBehalfOfClient.prototype.readAccessTokenFromCache = function (request) {
        var accessTokenFilter = {
            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
            credentialType: exports.CredentialType.ACCESS_TOKEN,
            clientId: this.config.authOptions.clientId,
            realm: this.authority.tenant,
            target: this.scopeSet.printScopesLowerCase(),
            oboAssertion: request.oboAssertion
        };
        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });
        var numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) {
            return null;
        }
        else if (numAccessTokens > 1) {
            throw ClientAuthError.createMultipleMatchingTokensInCacheError();
        }
        return accessTokens[0];
    };
    OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {
        var idTokenFilter = {
            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,
            credentialType: exports.CredentialType.ID_TOKEN,
            clientId: this.config.authOptions.clientId,
            realm: this.authority.tenant,
            oboAssertion: request.oboAssertion
        };
        var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);
        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });
        // When acquiring a token on behalf of an application, there might not be an id token in the cache
        if (idTokens.length < 1) {
            return null;
        }
        return idTokens[0];
    };
    OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {
        return __awaiter(this, void 0, void 0, function () {
            var requestBody, headers, thumbprint, response, responseHandler, tokenResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestBody = this.createTokenRequestBody(request);
                        headers = this.createDefaultTokenRequestHeaders();
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: request.authority,
                            scopes: request.scopes
                        };
                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];
                    case 1:
                        response = _a.sent();
                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, request.resourceRequestMethod, request.resourceRequestUri, null, null, request.scopes, request.oboAssertion)];
                    case 2:
                        tokenResponse = _a.sent();
                        return [2 /*return*/, tokenResponse];
                }
            });
        });
    };
    OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {
        var parameterBuilder = new RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        parameterBuilder.addScopes(request.scopes);
        parameterBuilder.addGrantType(GrantType.JWT_BEARER);
        parameterBuilder.addClientInfo();
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);
        parameterBuilder.addOboAssertion(request.oboAssertion);
        if (this.config.clientCredentials.clientSecret) {
            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
        }
        if (this.config.clientCredentials.clientAssertion) {
            var clientAssertion = this.config.clientCredentials.clientAssertion;
            parameterBuilder.addClientAssertion(clientAssertion.assertion);
            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
        }
        return parameterBuilder.createQueryString();
    };
    return OnBehalfOfClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var SilentFlowClient = /** @class */ (function (_super) {
    __extends(SilentFlowClient, _super);
    function SilentFlowClient(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token
     * @param request
     */
    SilentFlowClient.prototype.acquireToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, refreshTokenClient;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.acquireCachedToken(request)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {
                            refreshTokenClient = new RefreshTokenClient(this.config);
                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];
                        }
                        else {
                            throw e_1;
                        }
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */
    SilentFlowClient.prototype.acquireCachedToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var requestScopes, environment, cacheRecord;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Cannot renew token if no request object is given.
                        if (!request) {
                            throw ClientConfigurationError.createEmptyTokenRequestError();
                        }
                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                        if (!request.account) {
                            throw ClientAuthError.createNoAccountInSilentRequestError();
                        }
                        requestScopes = new ScopeSet(request.scopes || []);
                        environment = request.authority || Authority.generateEnvironmentFromAuthority(this.authority);
                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment);
                        if (!this.isRefreshRequired(request, cacheRecord.accessToken)) return [3 /*break*/, 1];
                        throw ClientAuthError.createRefreshRequiredError();
                    case 1:
                        if (this.config.serverTelemetryManager) {
                            this.config.serverTelemetryManager.incrementCacheHits();
                        }
                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request.resourceRequestMethod, request.resourceRequestUri)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */
    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, resourceRequestMethod, resourceRequestUri) {
        return __awaiter(this, void 0, void 0, function () {
            var idTokenObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, cacheRecord, idTokenObj, true, null, resourceRequestMethod, resourceRequestUri)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Given a request object and an accessTokenEntity determine if the accessToken needs to be refreshed
     * @param request
     * @param cachedAccessToken
     */
    SilentFlowClient.prototype.isRefreshRequired = function (request, cachedAccessToken) {
        if (request.forceRefresh || request.claims) {
            // Must refresh due to request parameters
            return true;
        }
        else if (!cachedAccessToken || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
            // Must refresh due to expired or non-existent access_token
            return true;
        }
        return false;
    };
    return SilentFlowClient;
}(BaseClient));

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var AuthorityFactory = /** @class */ (function () {
    function AuthorityFactory() {
    }
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Also performs endpoint discovery.
     *
     * @param authorityUri
     * @param networkClient
     * @param protocolMode
     */
    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, protocolMode) {
        return __awaiter(this, void 0, void 0, function () {
            var acquireTokenAuthority, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, protocolMode);
                        if (acquireTokenAuthority.discoveryComplete()) {
                            return [2 /*return*/, acquireTokenAuthority];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, acquireTokenAuthority];
                    case 3:
                        e_1 = _a.sent();
                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Does not perform endpoint discovery.
     *
     * @param authorityUrl
     * @param networkInterface
     * @param protocolMode
     */
    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, protocolMode) {
        // Throw error if authority url is empty
        if (StringUtils.isEmpty(authorityUrl)) {
            throw ClientConfigurationError.createUrlEmptyError();
        }
        return new Authority(authorityUrl, networkInterface, protocolMode);
    };
    return AuthorityFactory;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryEntity = /** @class */ (function () {
    function ServerTelemetryEntity() {
        this.failedRequests = [];
        this.errors = [];
        this.cacheHits = 0;
    }
    /**
     * validates if a given cache entry is "Telemetry", parses <key,value>
     * @param key
     * @param entity
     */
    ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {
        var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
        var validateEntity = true;
        if (entity) {
            validateEntity =
                entity.hasOwnProperty("failedRequests") &&
                    entity.hasOwnProperty("errors") &&
                    entity.hasOwnProperty("errorCount") &&
                    entity.hasOwnProperty("cacheHits");
        }
        return validateKey && validateEntity;
    };
    return ServerTelemetryEntity;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ThrottlingEntity = /** @class */ (function () {
    function ThrottlingEntity() {
    }
    /**
     * validates if a given cache entry is "Throttling", parses <key,value>
     * @param key
     * @param entity
     */
    ThrottlingEntity.isThrottlingEntity = function (key, entity) {
        var validateKey = false;
        if (key) {
            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;
        }
        var validateEntity = true;
        if (entity) {
            validateEntity = entity.hasOwnProperty("throttleTime");
        }
        return validateKey && validateEntity;
    };
    return ThrottlingEntity;
}());

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var ServerTelemetryManager = /** @class */ (function () {
    function ServerTelemetryManager(telemetryRequest, cacheManager) {
        this.cacheManager = cacheManager;
        this.apiId = telemetryRequest.apiId;
        this.correlationId = telemetryRequest.correlationId;
        this.forceRefresh = telemetryRequest.forceRefresh || false;
        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
    }
    /**
     * API to add MSER Telemetry to request
     */
    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {
        var forceRefreshInt = this.forceRefresh ? 1 : 0;
        var request = "" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + forceRefreshInt;
        var platformFields = ""; // TODO: Determine what we want to include
        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, request, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to add MSER Telemetry for the last failed request
     */
    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {
        var lastRequests = this.getLastRequests();
        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errorCount = lastRequests.errors.length;
        // Indicate whether this header contains all data or partial data
        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */
    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {
        var lastRequests = this.getLastRequests();
        lastRequests.failedRequests.push(this.apiId, this.correlationId);
        lastRequests.errors.push(StringUtils.isEmpty(error.suberror) ? error.errorCode : error.suberror);
        this.cacheManager.setItem(this.telemetryCacheKey, lastRequests, exports.CacheSchemaType.TELEMETRY);
        return;
    };
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */
    ServerTelemetryManager.prototype.incrementCacheHits = function () {
        var lastRequests = this.getLastRequests();
        lastRequests.cacheHits += 1;
        this.cacheManager.setItem(this.telemetryCacheKey, lastRequests, exports.CacheSchemaType.TELEMETRY);
        return lastRequests.cacheHits;
    };
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */
    ServerTelemetryManager.prototype.getLastRequests = function () {
        var initialValue = new ServerTelemetryEntity();
        var lastRequests = this.cacheManager.getItem(this.telemetryCacheKey, exports.CacheSchemaType.TELEMETRY);
        return lastRequests || initialValue;
    };
    /**
     * Remove server telemetry cache entry
     */
    ServerTelemetryManager.prototype.clearTelemetryCache = function () {
        var lastRequests = this.getLastRequests();
        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        var errorCount = lastRequests.errors.length;
        if (numErrorsFlushed === errorCount) {
            // All errors were sent on last request, clear Telemetry cache
            this.cacheManager.removeItem(this.telemetryCacheKey);
        }
        else {
            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
            var serverTelemEntity = new ServerTelemetryEntity();
            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
            this.cacheManager.setItem(this.telemetryCacheKey, serverTelemEntity, exports.CacheSchemaType.TELEMETRY);
        }
    };
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */
    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {
        var i;
        var maxErrors = 0;
        var dataSize = 0;
        var errorCount = serverTelemetryEntity.errors.length;
        for (i = 0; i < errorCount; i++) {
            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
            var apiId = serverTelemetryEntity.failedRequests[2 * i];
            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1];
            var errorCode = serverTelemetryEntity.errors[i];
            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_HEADER_BYTES) {
                // Adding this entry to the header would still keep header size below the limit
                maxErrors += 1;
            }
            else {
                break;
            }
        }
        return maxErrors;
    };
    return ServerTelemetryManager;
}());

exports.AccessTokenEntity = AccessTokenEntity;
exports.AccountEntity = AccountEntity;
exports.AppMetadataEntity = AppMetadataEntity;
exports.AuthError = AuthError;
exports.AuthErrorMessage = AuthErrorMessage;
exports.AuthToken = AuthToken;
exports.Authority = Authority;
exports.AuthorityFactory = AuthorityFactory;
exports.AuthorizationCodeClient = AuthorizationCodeClient;
exports.CacheManager = CacheManager;
exports.ClientAuthError = ClientAuthError;
exports.ClientAuthErrorMessage = ClientAuthErrorMessage;
exports.ClientConfigurationError = ClientConfigurationError;
exports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;
exports.ClientCredentialClient = ClientCredentialClient;
exports.Constants = Constants;
exports.CredentialEntity = CredentialEntity;
exports.DEFAULT_SYSTEM_OPTIONS = DEFAULT_SYSTEM_OPTIONS;
exports.DeviceCodeClient = DeviceCodeClient;
exports.IdToken = AuthToken;
exports.IdTokenEntity = IdTokenEntity;
exports.InteractionRequiredAuthError = InteractionRequiredAuthError;
exports.Logger = Logger;
exports.NetworkManager = NetworkManager;
exports.OnBehalfOfClient = OnBehalfOfClient;
exports.PromptValue = PromptValue;
exports.ProtocolUtils = ProtocolUtils;
exports.RefreshTokenClient = RefreshTokenClient;
exports.RefreshTokenEntity = RefreshTokenEntity;
exports.ServerError = ServerError;
exports.ServerTelemetryEntity = ServerTelemetryEntity;
exports.ServerTelemetryManager = ServerTelemetryManager;
exports.SilentFlowClient = SilentFlowClient;
exports.StringUtils = StringUtils;
exports.ThrottlingEntity = ThrottlingEntity;
exports.ThrottlingUtils = ThrottlingUtils;
exports.TimeUtils = TimeUtils;
exports.TokenCacheContext = TokenCacheContext;
exports.TrustedAuthority = TrustedAuthority;
exports.UrlString = UrlString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvci9BdXRoRXJyb3IudHMiLCIuLi9zcmMvZXJyb3IvQ2xpZW50QXV0aEVycm9yLnRzIiwiLi4vc3JjL3V0aWxzL1N0cmluZ1V0aWxzLnRzIiwiLi4vc3JjL2xvZ2dlci9Mb2dnZXIudHMiLCIuLi9zcmMvdXRpbHMvQ29uc3RhbnRzLnRzIiwiLi4vc3JjL2NhY2hlL2VudGl0aWVzL0NyZWRlbnRpYWxFbnRpdHkudHMiLCIuLi9zcmMvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLnRzIiwiLi4vc3JjL3JlcXVlc3QvU2NvcGVTZXQudHMiLCIuLi9zcmMvYXV0aG9yaXR5L0F1dGhvcml0eVR5cGUudHMiLCIuLi9zcmMvdXJsL1VybFN0cmluZy50cyIsIi4uL3NyYy9hdXRob3JpdHkvVHJ1c3RlZEF1dGhvcml0eS50cyIsIi4uL3NyYy9hdXRob3JpdHkvUHJvdG9jb2xNb2RlLnRzIiwiLi4vc3JjL2F1dGhvcml0eS9BdXRob3JpdHkudHMiLCIuLi9zcmMvYWNjb3VudC9DbGllbnRJbmZvLnRzIiwiLi4vc3JjL2NhY2hlL2VudGl0aWVzL0FjY291bnRFbnRpdHkudHMiLCIuLi9zcmMvY2FjaGUvZW50aXRpZXMvQXBwTWV0YWRhdGFFbnRpdHkudHMiLCIuLi9zcmMvY2FjaGUvQ2FjaGVNYW5hZ2VyLnRzIiwiLi4vc3JjL2NvbmZpZy9DbGllbnRDb25maWd1cmF0aW9uLnRzIiwiLi4vc3JjL2Vycm9yL1NlcnZlckVycm9yLnRzIiwiLi4vc3JjL25ldHdvcmsvVGhyb3R0bGluZ1V0aWxzLnRzIiwiLi4vc3JjL25ldHdvcmsvTmV0d29ya01hbmFnZXIudHMiLCIuLi9zcmMvY2xpZW50L0Jhc2VDbGllbnQudHMiLCIuLi9zcmMvcmVxdWVzdC9SZXF1ZXN0VmFsaWRhdG9yLnRzIiwiLi4vc3JjL3JlcXVlc3QvUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIudHMiLCIuLi9zcmMvYWNjb3VudC9BdXRoVG9rZW4udHMiLCIuLi9zcmMvdXRpbHMvVGltZVV0aWxzLnRzIiwiLi4vc3JjL2NhY2hlL2VudGl0aWVzL0lkVG9rZW5FbnRpdHkudHMiLCIuLi9zcmMvY2FjaGUvZW50aXRpZXMvQWNjZXNzVG9rZW5FbnRpdHkudHMiLCIuLi9zcmMvY2FjaGUvZW50aXRpZXMvUmVmcmVzaFRva2VuRW50aXR5LnRzIiwiLi4vc3JjL2Vycm9yL0ludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IudHMiLCIuLi9zcmMvY2FjaGUvZW50aXRpZXMvQ2FjaGVSZWNvcmQudHMiLCIuLi9zcmMvdXRpbHMvUHJvdG9jb2xVdGlscy50cyIsIi4uL3NyYy9jcnlwdG8vUG9wVG9rZW5HZW5lcmF0b3IudHMiLCIuLi9zcmMvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQudHMiLCIuLi9zcmMvcmVzcG9uc2UvUmVzcG9uc2VIYW5kbGVyLnRzIiwiLi4vc3JjL2NsaWVudC9BdXRob3JpemF0aW9uQ29kZUNsaWVudC50cyIsIi4uL3NyYy9jbGllbnQvRGV2aWNlQ29kZUNsaWVudC50cyIsIi4uL3NyYy9jbGllbnQvUmVmcmVzaFRva2VuQ2xpZW50LnRzIiwiLi4vc3JjL2NsaWVudC9DbGllbnRDcmVkZW50aWFsQ2xpZW50LnRzIiwiLi4vc3JjL2NsaWVudC9PbkJlaGFsZk9mQ2xpZW50LnRzIiwiLi4vc3JjL2NsaWVudC9TaWxlbnRGbG93Q2xpZW50LnRzIiwiLi4vc3JjL2F1dGhvcml0eS9BdXRob3JpdHlGYWN0b3J5LnRzIiwiLi4vc3JjL2NhY2hlL2VudGl0aWVzL1NlcnZlclRlbGVtZXRyeUVudGl0eS50cyIsIi4uL3NyYy9jYWNoZS9lbnRpdGllcy9UaHJvdHRsaW5nRW50aXR5LnRzIiwiLi4vc3JjL3RlbGVtZXRyeS9zZXJ2ZXIvU2VydmVyVGVsZW1ldHJ5TWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBdXRoRXJyb3JNZXNzYWdlIGNsYXNzIGNvbnRhaW5pbmcgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBBdXRoRXJyb3JNZXNzYWdlID0ge1xyXG4gICAgdW5leHBlY3RlZEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJ1bmV4cGVjdGVkX2Vycm9yXCIsXHJcbiAgICAgICAgZGVzYzogXCJVbmV4cGVjdGVkIGVycm9yIGluIGF1dGhlbnRpY2F0aW9uLlwiXHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogR2VuZXJhbCBlcnJvciBjbGFzcyB0aHJvd24gYnkgdGhlIE1TQUwuanMgbGlicmFyeS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblxyXG4gICAgLy8gU2hvcnQgc3RyaW5nIGRlbm90aW5nIGVycm9yXHJcbiAgICBlcnJvckNvZGU6IHN0cmluZztcclxuICAgIC8vIERldGFpbGVkIGRlc2NyaXB0aW9uIG9mIGVycm9yXHJcbiAgICBlcnJvck1lc3NhZ2U6IHN0cmluZztcclxuICAgIHN1YmVycm9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9yTWVzc2FnZT86IHN0cmluZywgc3ViZXJyb3I/OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBlcnJvclN0cmluZyA9IGVycm9yTWVzc2FnZSA/IGAke2Vycm9yQ29kZX06ICR7ZXJyb3JNZXNzYWdlfWAgOiBlcnJvckNvZGU7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JTdHJpbmcpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuXHJcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XHJcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5zdWJlcnJvciA9IHN1YmVycm9yO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQXV0aEVycm9yXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRoYXQgaXMgdGhyb3duIHdoZW4gc29tZXRoaW5nIHVuZXhwZWN0ZWQgaGFwcGVucyBpbiB0aGUgbGlicmFyeS5cclxuICAgICAqIEBwYXJhbSBlcnJEZXNjIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlVW5leHBlY3RlZEVycm9yKGVyckRlc2M6IHN0cmluZyk6IEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRoRXJyb3IoQXV0aEVycm9yTWVzc2FnZS51bmV4cGVjdGVkRXJyb3IuY29kZSwgYCR7QXV0aEVycm9yTWVzc2FnZS51bmV4cGVjdGVkRXJyb3IuZGVzY306ICR7ZXJyRGVzY31gKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gXCIuL0F1dGhFcnJvclwiO1xyXG5pbXBvcnQgeyBTY29wZVNldCB9IGZyb20gXCIuLi9yZXF1ZXN0L1Njb3BlU2V0XCI7XHJcblxyXG4vKipcclxuICogQ2xpZW50QXV0aEVycm9yTWVzc2FnZSBjbGFzcyBjb250YWluaW5nIHN0cmluZyBjb25zdGFudHMgdXNlZCBieSBlcnJvciBjb2RlcyBhbmQgbWVzc2FnZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ2xpZW50QXV0aEVycm9yTWVzc2FnZSA9IHtcclxuICAgIGNsaWVudEluZm9EZWNvZGluZ0Vycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJjbGllbnRfaW5mb19kZWNvZGluZ19lcnJvclwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhlIGNsaWVudCBpbmZvIGNvdWxkIG5vdCBiZSBwYXJzZWQvZGVjb2RlZCBjb3JyZWN0bHkuIFBsZWFzZSByZXZpZXcgdGhlIHRyYWNlIHRvIGRldGVybWluZSB0aGUgcm9vdCBjYXVzZS5cIlxyXG4gICAgfSxcclxuICAgIGNsaWVudEluZm9FbXB0eUVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJjbGllbnRfaW5mb19lbXB0eV9lcnJvclwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhlIGNsaWVudCBpbmZvIHdhcyBlbXB0eS4gUGxlYXNlIHJldmlldyB0aGUgdHJhY2UgdG8gZGV0ZXJtaW5lIHRoZSByb290IGNhdXNlLlwiXHJcbiAgICB9LFxyXG4gICAgdG9rZW5QYXJzaW5nRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcInRva2VuX3BhcnNpbmdfZXJyb3JcIixcclxuICAgICAgICBkZXNjOiBcIlRva2VuIGNhbm5vdCBiZSBwYXJzZWQuIFBsZWFzZSByZXZpZXcgc3RhY2sgdHJhY2UgdG8gZGV0ZXJtaW5lIHJvb3QgY2F1c2UuXCJcclxuICAgIH0sXHJcbiAgICBudWxsT3JFbXB0eVRva2VuOiB7XHJcbiAgICAgICAgY29kZTogXCJudWxsX29yX2VtcHR5X3Rva2VuXCIsXHJcbiAgICAgICAgZGVzYzogXCJUaGUgdG9rZW4gaXMgbnVsbCBvciBlbXB0eS4gUGxlYXNlIHJldmlldyB0aGUgdHJhY2UgdG8gZGV0ZXJtaW5lIHRoZSByb290IGNhdXNlLlwiXHJcbiAgICB9LFxyXG4gICAgZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcImVuZHBvaW50c19yZXNvbHV0aW9uX2Vycm9yXCIsXHJcbiAgICAgICAgZGVzYzogXCJFcnJvcjogY291bGQgbm90IHJlc29sdmUgZW5kcG9pbnRzLiBQbGVhc2UgY2hlY2sgbmV0d29yayBhbmQgdHJ5IGFnYWluLlwiXHJcbiAgICB9LFxyXG4gICAgaGFzaE5vdERlc2VyaWFsaXplZDoge1xyXG4gICAgICAgIGNvZGU6IFwiaGFzaF9ub3RfZGVzZXJpYWxpemVkXCIsXHJcbiAgICAgICAgZGVzYzogXCJUaGUgaGFzaCBwYXJhbWV0ZXJzIGNvdWxkIG5vdCBiZSBkZXNlcmlhbGl6ZWQuIFBsZWFzZSByZXZpZXcgdGhlIHRyYWNlIHRvIGRldGVybWluZSB0aGUgcm9vdCBjYXVzZS5cIlxyXG4gICAgfSxcclxuICAgIGJsYW5rR3VpZEdlbmVyYXRlZDoge1xyXG4gICAgICAgIGNvZGU6IFwiYmxhbmtfZ3VpZF9nZW5lcmF0ZWRcIixcclxuICAgICAgICBkZXNjOiBcIlRoZSBndWlkIGdlbmVyYXRlZCB3YXMgYmxhbmsuIFBsZWFzZSByZXZpZXcgdGhlIHRyYWNlIHRvIGRldGVybWluZSB0aGUgcm9vdCBjYXVzZS5cIlxyXG4gICAgfSxcclxuICAgIGludmFsaWRTdGF0ZUVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX3N0YXRlXCIsXHJcbiAgICAgICAgZGVzYzogXCJTdGF0ZSB3YXMgbm90IHRoZSBleHBlY3RlZCBmb3JtYXQuIFBsZWFzZSBjaGVjayB0aGUgbG9ncyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgcmVxdWVzdCB3YXMgc2VudCB1c2luZyBQcm90b2NvbFV0aWxzLnNldFJlcXVlc3RTdGF0ZSgpLlwiXHJcbiAgICB9LFxyXG4gICAgc3RhdGVNaXNtYXRjaEVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJzdGF0ZV9taXNtYXRjaFwiLFxyXG4gICAgICAgIGRlc2M6IFwiU3RhdGUgbWlzbWF0Y2ggZXJyb3IuIFBsZWFzZSBjaGVjayB5b3VyIG5ldHdvcmsuIENvbnRpbnVlZCByZXF1ZXN0cyBtYXkgY2F1c2UgY2FjaGUgb3ZlcmZsb3cuXCJcclxuICAgIH0sXHJcbiAgICBub25jZU1pc21hdGNoRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcIm5vbmNlX21pc21hdGNoXCIsXHJcbiAgICAgICAgZGVzYzogXCJOb25jZSBtaXNtYXRjaCBlcnJvci4gVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IGEgcmFjZSBjb25kaXRpb24gaW4gY29uY3VycmVudCByZXF1ZXN0cy5cIlxyXG4gICAgfSxcclxuICAgIG5vVG9rZW5zRm91bmRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwibm9fdG9rZW5zX2ZvdW5kXCIsXHJcbiAgICAgICAgZGVzYzogXCJObyB0b2tlbnMgd2VyZSBmb3VuZCBmb3IgdGhlIGdpdmVuIHNjb3BlcywgYW5kIG5vIGF1dGhvcml6YXRpb24gY29kZSB3YXMgcGFzc2VkIHRvIGFjcXVpcmVUb2tlbi4gWW91IG11c3QgcmV0cmlldmUgYW4gYXV0aG9yaXphdGlvbiBjb2RlIGJlZm9yZSBtYWtpbmcgYSBjYWxsIHRvIGFjcXVpcmVUb2tlbigpLlwiXHJcbiAgICB9LFxyXG4gICAgbXVsdGlwbGVNYXRjaGluZ1Rva2Vuczoge1xyXG4gICAgICAgIGNvZGU6IFwibXVsdGlwbGVfbWF0Y2hpbmdfdG9rZW5zXCIsXHJcbiAgICAgICAgZGVzYzogXCJUaGUgY2FjaGUgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zIHNhdGlzZnlpbmcgdGhlIHJlcXVpcmVtZW50cy4gXCIgK1xyXG4gICAgICAgICAgICBcIkNhbGwgQWNxdWlyZVRva2VuIGFnYWluIHByb3ZpZGluZyBtb3JlIHJlcXVpcmVtZW50cyBzdWNoIGFzIGF1dGhvcml0eSBvciBhY2NvdW50LlwiXHJcbiAgICB9LFxyXG4gICAgbXVsdGlwbGVNYXRjaGluZ0FjY291bnRzOiB7XHJcbiAgICAgICAgY29kZTogXCJtdWx0aXBsZV9tYXRjaGluZ19hY2NvdW50c1wiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhlIGNhY2hlIGNvbnRhaW5zIG11bHRpcGxlIGFjY291bnRzIHNhdGlzZnlpbmcgdGhlIGdpdmVuIHBhcmFtZXRlcnMuIFBsZWFzZSBwYXNzIG1vcmUgaW5mbyB0byBvYnRhaW4gdGhlIGNvcnJlY3QgYWNjb3VudFwiXHJcbiAgICB9LFxyXG4gICAgdG9rZW5SZXF1ZXN0Q2Fubm90QmVNYWRlOiB7XHJcbiAgICAgICAgY29kZTogXCJyZXF1ZXN0X2Nhbm5vdF9iZV9tYWRlXCIsXHJcbiAgICAgICAgZGVzYzogXCJUb2tlbiByZXF1ZXN0IGNhbm5vdCBiZSBtYWRlIHdpdGhvdXQgYXV0aG9yaXphdGlvbiBjb2RlIG9yIHJlZnJlc2ggdG9rZW4uXCJcclxuICAgIH0sXHJcbiAgICBhcHBlbmRFbXB0eVNjb3BlRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcImNhbm5vdF9hcHBlbmRfZW1wdHlfc2NvcGVcIixcclxuICAgICAgICBkZXNjOiBcIkNhbm5vdCBhcHBlbmQgbnVsbCBvciBlbXB0eSBzY29wZSB0byBTY29wZVNldC4gUGxlYXNlIGNoZWNrIHRoZSBzdGFjayB0cmFjZSBmb3IgbW9yZSBpbmZvLlwiXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRW1wdHlTY29wZUVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJjYW5ub3RfcmVtb3ZlX2VtcHR5X3Njb3BlXCIsXHJcbiAgICAgICAgZGVzYzogXCJDYW5ub3QgcmVtb3ZlIG51bGwgb3IgZW1wdHkgc2NvcGUgZnJvbSBTY29wZVNldC4gUGxlYXNlIGNoZWNrIHRoZSBzdGFjayB0cmFjZSBmb3IgbW9yZSBpbmZvLlwiXHJcbiAgICB9LFxyXG4gICAgYXBwZW5kU2NvcGVTZXRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwiY2Fubm90X2FwcGVuZF9zY29wZXNldFwiLFxyXG4gICAgICAgIGRlc2M6IFwiQ2Fubm90IGFwcGVuZCBTY29wZVNldCBkdWUgdG8gZXJyb3IuXCJcclxuICAgIH0sXHJcbiAgICBlbXB0eUlucHV0U2NvcGVTZXRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwiZW1wdHlfaW5wdXRfc2NvcGVzZXRcIixcclxuICAgICAgICBkZXNjOiBcIkVtcHR5IGlucHV0IFNjb3BlU2V0IGNhbm5vdCBiZSBwcm9jZXNzZWQuXCJcclxuICAgIH0sXHJcbiAgICBEZXZpY2VDb2RlUG9sbGluZ0NhbmNlbGxlZDoge1xyXG4gICAgICAgIGNvZGU6IFwiZGV2aWNlX2NvZGVfcG9sbGluZ19jYW5jZWxsZWRcIixcclxuICAgICAgICBkZXNjOiBcIkNhbGxlciBoYXMgY2FuY2VsbGVkIHRva2VuIGVuZHBvaW50IHBvbGxpbmcgZHVyaW5nIGRldmljZSBjb2RlIGZsb3cgYnkgc2V0dGluZyBEZXZpY2VDb2RlUmVxdWVzdC5jYW5jZWwgPSB0cnVlLlwiXHJcbiAgICB9LFxyXG4gICAgRGV2aWNlQ29kZUV4cGlyZWQ6IHtcclxuICAgICAgICBjb2RlOiBcImRldmljZV9jb2RlX2V4cGlyZWRcIixcclxuICAgICAgICBkZXNjOiBcIkRldmljZSBjb2RlIGlzIGV4cGlyZWQuXCJcclxuICAgIH0sXHJcbiAgICBOb0FjY291bnRJblNpbGVudFJlcXVlc3Q6IHtcclxuICAgICAgICBjb2RlOiBcIm5vX2FjY291bnRfaW5fc2lsZW50X3JlcXVlc3RcIixcclxuICAgICAgICBkZXNjOiBcIlBsZWFzZSBwYXNzIGFuIGFjY291bnQgb2JqZWN0LCBzaWxlbnQgZmxvdyBpcyBub3Qgc3VwcG9ydGVkIHdpdGhvdXQgYWNjb3VudCBpbmZvcm1hdGlvblwiXHJcbiAgICB9LFxyXG4gICAgaW52YWxpZENhY2hlUmVjb3JkOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2NhY2hlX3JlY29yZFwiLFxyXG4gICAgICAgIGRlc2M6IFwiQ2FjaGUgcmVjb3JkIG9iamVjdCB3YXMgbnVsbCBvciB1bmRlZmluZWQuXCJcclxuICAgIH0sXHJcbiAgICBpbnZhbGlkQ2FjaGVFbnZpcm9ubWVudDoge1xyXG4gICAgICAgIGNvZGU6IFwiaW52YWxpZF9jYWNoZV9lbnZpcm9ubWVudFwiLFxyXG4gICAgICAgIGRlc2M6IFwiSW52YWxpZCBlbnZpcm9ubWVudCB3aGVuIGF0dGVtcHRpbmcgdG8gY3JlYXRlIGNhY2hlIGVudHJ5XCJcclxuICAgIH0sXHJcbiAgICBub0FjY291bnRGb3VuZDoge1xyXG4gICAgICAgIGNvZGU6IFwibm9fYWNjb3VudF9mb3VuZFwiLFxyXG4gICAgICAgIGRlc2M6IFwiTm8gYWNjb3VudCBmb3VuZCBpbiBjYWNoZSBmb3IgZ2l2ZW4ga2V5LlwiXHJcbiAgICB9LFxyXG4gICAgQ2FjaGVQbHVnaW5FcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwibm8gY2FjaGUgcGx1Z2luIHNldCBvbiBDYWNoZU1hbmFnZXJcIixcclxuICAgICAgICBkZXNjOiBcIklDYWNoZVBsdWdpbiBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIHVzaW5nIHJlYWRGcm9tU3RvcmFnZSBvciB3cml0ZUZyb21TdG9yYWdlXCJcclxuICAgIH0sXHJcbiAgICBub0NyeXB0b09iajoge1xyXG4gICAgICAgIGNvZGU6IFwibm9fY3J5cHRvX29iamVjdFwiLFxyXG4gICAgICAgIGRlc2M6IFwiTm8gY3J5cHRvIG9iamVjdCBkZXRlY3RlZC4gVGhpcyBpcyByZXF1aXJlZCBmb3IgdGhlIGZvbGxvd2luZyBvcGVyYXRpb246IFwiXHJcbiAgICB9LFxyXG4gICAgaW52YWxpZENhY2hlVHlwZToge1xyXG4gICAgICAgIGNvZGU6IFwiaW52YWxpZF9jYWNoZV90eXBlXCIsXHJcbiAgICAgICAgZGVzYzogXCJJbnZhbGlkIGNhY2hlIHR5cGVcIlxyXG4gICAgfSxcclxuICAgIHVuZXhwZWN0ZWRBY2NvdW50VHlwZToge1xyXG4gICAgICAgIGNvZGU6IFwidW5leHBlY3RlZF9hY2NvdW50X3R5cGVcIixcclxuICAgICAgICBkZXNjOiBcIlVuZXhwZWN0ZWQgYWNjb3VudCB0eXBlLlwiXHJcbiAgICB9LFxyXG4gICAgdW5leHBlY3RlZENyZWRlbnRpYWxUeXBlOiB7XHJcbiAgICAgICAgY29kZTogXCJ1bmV4cGVjdGVkX2NyZWRlbnRpYWxfdHlwZVwiLFxyXG4gICAgICAgIGRlc2M6IFwiVW5leHBlY3RlZCBjcmVkZW50aWFsIHR5cGUuXCJcclxuICAgIH0sXHJcbiAgICBpbnZhbGlkQXNzZXJ0aW9uOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2Fzc2VydGlvblwiLFxyXG4gICAgICAgIGRlc2M6IFwiQ2xpZW50IGFzc2VydGlvbiBtdXN0IG1lZXQgcmVxdWlyZW1lbnRzIGRlc2NyaWJlZCBpbiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzUxNVwiXHJcbiAgICB9LFxyXG4gICAgaW52YWxpZENsaWVudENyZWRlbnRpYWw6IHtcclxuICAgICAgICBjb2RlOiBcImludmFsaWRfY2xpZW50X2NyZWRlbnRpYWxcIixcclxuICAgICAgICBkZXNjOiBcIkNsaWVudCBjcmVkZW50aWFsIChzZWNyZXQsIGNlcnRpZmljYXRlLCBvciBhc3NlcnRpb24pIG11c3Qgbm90IGJlIGVtcHR5IHdoZW4gY3JlYXRpbmcgYSBjb25maWRlbnRpYWwgY2xpZW50LiBBbiBhcHBsaWNhdGlvbiBzaG91bGQgYXQgbW9zdCBoYXZlIG9uZSBjcmVkZW50aWFsXCJcclxuICAgIH0sXHJcbiAgICB0b2tlblJlZnJlc2hSZXF1aXJlZDoge1xyXG4gICAgICAgIGNvZGU6IFwidG9rZW5fcmVmcmVzaF9yZXF1aXJlZFwiLFxyXG4gICAgICAgIGRlc2M6IFwiQ2Fubm90IHJldHVybiB0b2tlbiBmcm9tIGNhY2hlIGJlY2F1c2UgaXQgbXVzdCBiZSByZWZyZXNoZWQuIFRoaXMgbWF5IGJlIGR1ZSB0byBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOiBmb3JjZVJlZnJlc2ggcGFyYW1ldGVyIGlzIHNldCB0byB0cnVlLCBjbGFpbXMgaGF2ZSBiZWVuIHJlcXVlc3RlZCwgdGhlcmUgaXMgbm8gY2FjaGVkIGFjY2VzcyB0b2tlbiBvciBpdCBpcyBleHBpcmVkLlwiXHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogRXJyb3IgdGhyb3duIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3IgaW4gdGhlIGNsaWVudCBjb2RlIHJ1bm5pbmcgb24gdGhlIGJyb3dzZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2xpZW50QXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGU6IHN0cmluZywgZXJyb3JNZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2xpZW50QXV0aEVycm9yXCI7XHJcblxyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDbGllbnRBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgdGhyb3duIHdoZW4gY2xpZW50IGluZm8gb2JqZWN0IGRvZXNuJ3QgZGVjb2RlIGNvcnJlY3RseS5cclxuICAgICAqIEBwYXJhbSBjYXVnaHRFcnJvclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlQ2xpZW50SW5mb0RlY29kaW5nRXJyb3IoY2F1Z2h0RXJyb3I6IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5jbGllbnRJbmZvRGVjb2RpbmdFcnJvci5jb2RlLFxyXG4gICAgICAgICAgICBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmNsaWVudEluZm9EZWNvZGluZ0Vycm9yLmRlc2N9IEZhaWxlZCB3aXRoIGVycm9yOiAke2NhdWdodEVycm9yfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gaWYgdGhlIGNsaWVudCBpbmZvIGlzIGVtcHR5LlxyXG4gICAgICogQHBhcmFtIHJhd0NsaWVudEluZm9cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUNsaWVudEluZm9FbXB0eUVycm9yKHJhd0NsaWVudEluZm86IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5jbGllbnRJbmZvRW1wdHlFcnJvci5jb2RlLFxyXG4gICAgICAgICAgICBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmNsaWVudEluZm9FbXB0eUVycm9yLmRlc2N9IEdpdmVuIE9iamVjdDogJHtyYXdDbGllbnRJbmZvfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgaWQgdG9rZW4gZXh0cmFjdGlvbiBlcnJvcnMgb3V0LlxyXG4gICAgICogQHBhcmFtIGVyclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlVG9rZW5QYXJzaW5nRXJyb3IoY2F1Z2h0RXh0cmFjdGlvbkVycm9yOiBzdHJpbmcpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2UudG9rZW5QYXJzaW5nRXJyb3IuY29kZSxcclxuICAgICAgICAgICAgYCR7Q2xpZW50QXV0aEVycm9yTWVzc2FnZS50b2tlblBhcnNpbmdFcnJvci5kZXNjfSBGYWlsZWQgd2l0aCBlcnJvcjogJHtjYXVnaHRFeHRyYWN0aW9uRXJyb3J9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRocm93biB3aGVuIHRoZSBpZCB0b2tlbiBzdHJpbmcgaXMgbnVsbCBvciBlbXB0eS5cclxuICAgICAqIEBwYXJhbSBpbnZhbGlkUmF3VG9rZW5TdHJpbmdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVRva2VuTnVsbE9yRW1wdHlFcnJvcihpbnZhbGlkUmF3VG9rZW5TdHJpbmc6IHN0cmluZykgOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2UubnVsbE9yRW1wdHlUb2tlbi5jb2RlLFxyXG4gICAgICAgICAgICBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLm51bGxPckVtcHR5VG9rZW4uZGVzY30gUmF3IFRva2VuIFZhbHVlOiAke2ludmFsaWRSYXdUb2tlblN0cmluZ31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgdGhyb3duIHdoZW4gdGhlIGVuZHBvaW50IGRpc2NvdmVyeSBkb2Vzbid0IGNvbXBsZXRlIGNvcnJlY3RseS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUVuZHBvaW50RGlzY292ZXJ5SW5jb21wbGV0ZUVycm9yKGVyckRldGFpbDogc3RyaW5nKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmVuZHBvaW50UmVzb2x1dGlvbkVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IuZGVzY30gRGV0YWlsOiAke2VyckRldGFpbH1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgdGhyb3duIHdoZW4gdGhlIGhhc2ggY2Fubm90IGJlIGRlc2VyaWFsaXplZC5cclxuICAgICAqIEBwYXJhbSBoYXNoUGFyYW1PYmpcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUhhc2hOb3REZXNlcmlhbGl6ZWRFcnJvcihoYXNoUGFyYW1PYmo6IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5oYXNoTm90RGVzZXJpYWxpemVkLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuaGFzaE5vdERlc2VyaWFsaXplZC5kZXNjfSBHaXZlbiBPYmplY3Q6ICR7aGFzaFBhcmFtT2JqfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgc3RhdGUgY2Fubm90IGJlIHBhcnNlZC5cclxuICAgICAqIEBwYXJhbSBpbnZhbGlkU3RhdGVcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUludmFsaWRTdGF0ZUVycm9yKGludmFsaWRTdGF0ZTogc3RyaW5nLCBlcnJvclN0cmluZz86IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkU3RhdGVFcnJvci5jb2RlLFxyXG4gICAgICAgICAgICBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmludmFsaWRTdGF0ZUVycm9yLmRlc2N9IEludmFsaWQgU3RhdGU6ICR7aW52YWxpZFN0YXRlfSwgUm9vdCBFcnI6ICR7ZXJyb3JTdHJpbmd9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRocm93biB3aGVuIHR3byBzdGF0ZXMgZG8gbm90IG1hdGNoLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlU3RhdGVNaXNtYXRjaEVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5zdGF0ZU1pc21hdGNoRXJyb3IuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5zdGF0ZU1pc21hdGNoRXJyb3IuZGVzYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRocm93biB3aGVuIHRoZSBub25jZSBkb2VzIG5vdCBtYXRjaC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZU5vbmNlTWlzbWF0Y2hFcnJvcigpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9uY2VNaXNtYXRjaEVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9uY2VNaXNtYXRjaEVycm9yLmRlc2MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIHJlcXVpcmVkIGZvciBhIHRva2VuIHJlcXVlc3QgaXMgbnVsbCBvciBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZU5vVG9rZW5zRm91bmRFcnJvcigpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9Ub2tlbnNGb3VuZEVycm9yLmNvZGUsIENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9Ub2tlbnNGb3VuZEVycm9yLmRlc2MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gbXVsdGlwbGUgdG9rZW5zIGFyZSBpbiBjYWNoZSBmb3IgdGhlIGdpdmVuIHNjb3BlLlxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVNdWx0aXBsZU1hdGNoaW5nVG9rZW5zSW5DYWNoZUVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5tdWx0aXBsZU1hdGNoaW5nVG9rZW5zLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UubXVsdGlwbGVNYXRjaGluZ1Rva2Vucy5kZXNjfS5gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIG11bHRpcGxlIHRva2VucyBhcmUgaW4gY2FjaGUgZm9yIHRoZSBnaXZlbiBzY29wZS5cclxuICAgICAqIEBwYXJhbSBzY29wZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlTXVsdGlwbGVNYXRjaGluZ0FjY291bnRzSW5DYWNoZUVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5tdWx0aXBsZU1hdGNoaW5nQWNjb3VudHMuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5tdWx0aXBsZU1hdGNoaW5nQWNjb3VudHMuZGVzYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgZXJyb3Igd2hlbiBubyBhdXRoIGNvZGUgb3IgcmVmcmVzaCB0b2tlbiBpcyBnaXZlbiB0byBTZXJ2ZXJUb2tlblJlcXVlc3RQYXJhbWV0ZXJzLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlVG9rZW5SZXF1ZXN0Q2Fubm90QmVNYWRlRXJyb3IoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnRva2VuUmVxdWVzdENhbm5vdEJlTWFkZS5jb2RlLCBDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnRva2VuUmVxdWVzdENhbm5vdEJlTWFkZS5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYXBwZW5kIGEgbnVsbCwgdW5kZWZpbmVkIG9yIGVtcHR5IHNjb3BlIHRvIGEgc2V0XHJcbiAgICAgKiBAcGFyYW0gZ2l2ZW5TY29wZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlQXBwZW5kRW1wdHlTY29wZVRvU2V0RXJyb3IoZ2l2ZW5TY29wZTogc3RyaW5nKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmFwcGVuZEVtcHR5U2NvcGVFcnJvci5jb2RlLCBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmFwcGVuZEVtcHR5U2NvcGVFcnJvci5kZXNjfSBHaXZlbiBTY29wZTogJHtnaXZlblNjb3BlfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gYXR0ZW1wdGluZyB0byBhcHBlbmQgYSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkgc2NvcGUgdG8gYSBzZXRcclxuICAgICAqIEBwYXJhbSBnaXZlblNjb3BlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVSZW1vdmVFbXB0eVNjb3BlRnJvbVNldEVycm9yKGdpdmVuU2NvcGU6IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5yZW1vdmVFbXB0eVNjb3BlRXJyb3IuY29kZSwgYCR7Q2xpZW50QXV0aEVycm9yTWVzc2FnZS5yZW1vdmVFbXB0eVNjb3BlRXJyb3IuZGVzY30gR2l2ZW4gU2NvcGU6ICR7Z2l2ZW5TY29wZX1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYXBwZW5kIG51bGwgb3IgZW1wdHkgU2NvcGVTZXQuXHJcbiAgICAgKiBAcGFyYW0gYXBwZW5kRXJyb3JcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUFwcGVuZFNjb3BlU2V0RXJyb3IoYXBwZW5kRXJyb3I6IHN0cmluZyk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5hcHBlbmRTY29wZVNldEVycm9yLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuYXBwZW5kU2NvcGVTZXRFcnJvci5kZXNjfSBEZXRhaWwgRXJyb3I6ICR7YXBwZW5kRXJyb3J9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgZXJyb3IgaWYgU2NvcGVTZXQgaXMgbnVsbCBvciB1bmRlZmluZWQuXHJcbiAgICAgKiBAcGFyYW0gZ2l2ZW5TY29wZVNldFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlRW1wdHlJbnB1dFNjb3BlU2V0RXJyb3IoZ2l2ZW5TY29wZVNldDogU2NvcGVTZXQpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2UuZW1wdHlJbnB1dFNjb3BlU2V0RXJyb3IuY29kZSwgYCR7Q2xpZW50QXV0aEVycm9yTWVzc2FnZS5lbXB0eUlucHV0U2NvcGVTZXRFcnJvci5kZXNjfSBHaXZlbiBTY29wZVNldDogJHtnaXZlblNjb3BlU2V0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHVzZXIgc2V0cyBDYW5jZWxsYXRpb25Ub2tlbi5jYW5jZWwgPSB0cnVlIGR1cmluZyBwb2xsaW5nIG9mIHRva2VuIGVuZHBvaW50IGR1cmluZyBkZXZpY2UgY29kZSBmbG93XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVEZXZpY2VDb2RlQ2FuY2VsbGVkRXJyb3IoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLkRldmljZUNvZGVQb2xsaW5nQ2FuY2VsbGVkLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuRGV2aWNlQ29kZVBvbGxpbmdDYW5jZWxsZWQuZGVzY31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciBpZiBkZXZpY2UgY29kZSBpcyBleHBpcmVkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVEZXZpY2VDb2RlRXhwaXJlZEVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5EZXZpY2VDb2RlRXhwaXJlZC5jb2RlLCBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLkRldmljZUNvZGVFeHBpcmVkLmRlc2N9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgZXJyb3Igd2hlbiBzaWxlbnQgcmVxdWVzdHMgYXJlIG1hZGUgd2l0aG91dCBhbiBhY2NvdW50IG9iamVjdFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlTm9BY2NvdW50SW5TaWxlbnRSZXF1ZXN0RXJyb3IoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLk5vQWNjb3VudEluU2lsZW50UmVxdWVzdC5jb2RlLCBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLk5vQWNjb3VudEluU2lsZW50UmVxdWVzdC5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gY2FjaGUgcmVjb3JkIGlzIG51bGwgb3IgdW5kZWZpbmVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlTnVsbE9yVW5kZWZpbmVkQ2FjaGVSZWNvcmQoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmludmFsaWRDYWNoZVJlY29yZC5jb2RlLCBDbGllbnRBdXRoRXJyb3JNZXNzYWdlLmludmFsaWRDYWNoZVJlY29yZC5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIHByb3ZpZGVkIGVudmlyb25tZW50IGlzIG5vdCBwYXJ0IG9mIHRoZSBDbG91ZERpc2NvdmVyeU1ldGFkYXRhIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW52YWxpZENhY2hlRW52aXJvbm1lbnRFcnJvcigpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2UuaW52YWxpZENhY2hlRW52aXJvbm1lbnQuY29kZSwgQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkQ2FjaGVFbnZpcm9ubWVudC5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIGFjY291bnQgaXMgbm90IGZvdW5kIGluIGNhY2hlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlTm9BY2NvdW50Rm91bmRFcnJvcigpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9BY2NvdW50Rm91bmQuY29kZSwgQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5ub0FjY291bnRGb3VuZC5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciBpZiBJQ2FjaGVQbHVnaW4gbm90IHNldCBvbiBDYWNoZU1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVDYWNoZVBsdWdpbkVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5DYWNoZVBsdWdpbkVycm9yLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuQ2FjaGVQbHVnaW5FcnJvci5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIGNyeXB0byBvYmplY3Qgbm90IGZvdW5kLlxyXG4gICAgICogQHBhcmFtIG9wZXJhdGlvbk5hbWVcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZU5vQ3J5cHRvT2JqZWN0RXJyb3Iob3BlcmF0aW9uTmFtZTogc3RyaW5nKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLm5vQ3J5cHRvT2JqLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9DcnlwdG9PYmouZGVzY30ke29wZXJhdGlvbk5hbWV9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgZXJyb3IgaWYgY2FjaGUgdHlwZSBpcyBpbnZhbGlkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW52YWxpZENhY2hlVHlwZUVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkQ2FjaGVUeXBlLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuaW52YWxpZENhY2hlVHlwZS5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHVuZXhwZWN0ZWQgYWNjb3VudCB0eXBlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlVW5leHBlY3RlZEFjY291bnRUeXBlRXJyb3IoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnVuZXhwZWN0ZWRBY2NvdW50VHlwZS5jb2RlLCBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnVuZXhwZWN0ZWRBY2NvdW50VHlwZS5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHVuZXhwZWN0ZWQgY3JlZGVudGlhbCB0eXBlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlVW5leHBlY3RlZENyZWRlbnRpYWxUeXBlRXJyb3IoKTogQ2xpZW50QXV0aEVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudEF1dGhFcnJvcihDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnVuZXhwZWN0ZWRDcmVkZW50aWFsVHlwZS5jb2RlLCBgJHtDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnVuZXhwZWN0ZWRDcmVkZW50aWFsVHlwZS5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIGNsaWVudCBhc3NlcnRpb24gaXMgbm90IHZhbGlkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW52YWxpZEFzc2VydGlvbkVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkQXNzZXJ0aW9uLmNvZGUsIGAke0NsaWVudEF1dGhFcnJvck1lc3NhZ2UuaW52YWxpZEFzc2VydGlvbi5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIGNsaWVudCBhc3NlcnRpb24gaXMgbm90IHZhbGlkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW52YWxpZENyZWRlbnRpYWxFcnJvcigpOiBDbGllbnRBdXRoRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvck1lc3NhZ2UuaW52YWxpZENsaWVudENyZWRlbnRpYWwuY29kZSwgYCR7Q2xpZW50QXV0aEVycm9yTWVzc2FnZS5pbnZhbGlkQ2xpZW50Q3JlZGVudGlhbC5kZXNjfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHRva2VuIGNhbm5vdCBiZSByZXRyaWV2ZWQgZnJvbSBjYWNoZSBkdWUgdG8gcmVmcmVzaCBiZWluZyByZXF1aXJlZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVJlZnJlc2hSZXF1aXJlZEVycm9yKCk6IENsaWVudEF1dGhFcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRBdXRoRXJyb3IoQ2xpZW50QXV0aEVycm9yTWVzc2FnZS50b2tlblJlZnJlc2hSZXF1aXJlZC5jb2RlLCBDbGllbnRBdXRoRXJyb3JNZXNzYWdlLnRva2VuUmVmcmVzaFJlcXVpcmVkLmRlc2MpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRGVjb2RlZEF1dGhUb2tlbiB9IGZyb20gXCIuLi9hY2NvdW50L0RlY29kZWRBdXRoVG9rZW5cIjtcclxuaW1wb3J0IHsgQ2xpZW50QXV0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudEF1dGhFcnJvclwiO1xyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdVdGlscyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBkZWNvZGUgYSBKV1RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXV0aFRva2VuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkZWNvZGVBdXRoVG9rZW4oYXV0aFRva2VuOiBzdHJpbmcpOiBEZWNvZGVkQXV0aFRva2VuIHtcclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShhdXRoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVUb2tlbk51bGxPckVtcHR5RXJyb3IoYXV0aFRva2VuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9rZW5QYXJ0c1JlZ2V4ID0gL14oW15cXC5cXHNdKilcXC4oW15cXC5cXHNdKylcXC4oW15cXC5cXHNdKikkLztcclxuICAgICAgICBjb25zdCBtYXRjaGVzID0gdG9rZW5QYXJ0c1JlZ2V4LmV4ZWMoYXV0aFRva2VuKTtcclxuICAgICAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPCA0KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVUb2tlblBhcnNpbmdFcnJvcihgR2l2ZW4gdG9rZW4gaXMgbWFsZm9ybWVkOiAke0pTT04uc3RyaW5naWZ5KGF1dGhUb2tlbil9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNyYWNrZWRUb2tlbjogRGVjb2RlZEF1dGhUb2tlbiA9IHtcclxuICAgICAgICAgICAgaGVhZGVyOiBtYXRjaGVzWzFdLFxyXG4gICAgICAgICAgICBKV1NQYXlsb2FkOiBtYXRjaGVzWzJdLFxyXG4gICAgICAgICAgICBKV1NTaWc6IG1hdGNoZXNbM11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjcmFja2VkVG9rZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIHN0cmluZyBpcyBlbXB0eS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0VtcHR5KHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2Ygc3RyID09PSBcInVuZGVmaW5lZFwiIHx8ICFzdHIgfHwgMCA9PT0gc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHN0YXJ0c1dpdGgoc3RyOiBzdHJpbmcsIHNlYXJjaDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCkgPT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGVuZHNXaXRoKHN0cjogc3RyaW5nLCBzZWFyY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoc3RyLmxlbmd0aCA+PSBzZWFyY2gubGVuZ3RoKSAmJiAoc3RyLmxhc3RJbmRleE9mKHNlYXJjaCkgPT09IChzdHIubGVuZ3RoIC0gc2VhcmNoLmxlbmd0aCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHN0cmluZyBpbnRvIGFuIG9iamVjdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcXVlcnlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHF1ZXJ5U3RyaW5nVG9PYmplY3Q8VD4ocXVlcnk6IHN0cmluZyk6IFQge1xyXG4gICAgICAgIGxldCBtYXRjaDogQXJyYXk8c3RyaW5nPjsgLy8gUmVnZXggZm9yIHJlcGxhY2luZyBhZGRpdGlvbiBzeW1ib2wgd2l0aCBhIHNwYWNlXHJcbiAgICAgICAgY29uc3QgcGwgPSAvXFwrL2c7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gLyhbXiY9XSspPShbXiZdKikvZztcclxuICAgICAgICBjb25zdCBkZWNvZGUgPSAoczogc3RyaW5nKTogc3RyaW5nID0+IGRlY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsLCBcIiBcIikpKTtcclxuICAgICAgICBjb25zdCBvYmo6IHt9ID0ge307XHJcbiAgICAgICAgbWF0Y2ggPSBzZWFyY2guZXhlYyhxdWVyeSk7XHJcbiAgICAgICAgd2hpbGUgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIG9ialtkZWNvZGUobWF0Y2hbMV0pXSA9IGRlY29kZShtYXRjaFsyXSk7XHJcbiAgICAgICAgICAgIG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqIGFzIFQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmltcyBlbnRyaWVzIGluIGFuIGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcnJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRyaW1BcnJheUVudHJpZXMoYXJyOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoZW50cnkgPT4gZW50cnkudHJpbSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgZW1wdHkgc3RyaW5ncyBmcm9tIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gYXJyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByZW1vdmVFbXB0eVN0cmluZ3NGcm9tQXJyYXkoYXJyOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5maWx0ZXIoZW50cnkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gIVN0cmluZ1V0aWxzLmlzRW1wdHkoZW50cnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdHMgdG8gcGFyc2UgYSBzdHJpbmcgaW50byBKU09OXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBqc29uUGFyc2VIZWxwZXI8VD4oc3RyOiBzdHJpbmcpOiBUIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpIGFzIFQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgcGtnIGZyb20gXCIuLi8uLi9wYWNrYWdlLmpzb25cIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgTG9nZ2VyT3B0aW9ucyB9IGZyb20gXCIuLi9jb25maWcvQ2xpZW50Q29uZmlndXJhdGlvblwiO1xyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIGxvZ2dlciBtZXNzYWdlcy5cclxuICovXHJcbmV4cG9ydCB0eXBlIExvZ2dlck1lc3NhZ2VPcHRpb25zID0ge1xyXG4gICAgbG9nTGV2ZWw6IExvZ0xldmVsLFxyXG4gICAgY29ycmVsYXRpb25JZD86IHN0cmluZyxcclxuICAgIGNvbnRhaW5zUGlpPzogYm9vbGVhbixcclxuICAgIGNvbnRleHQ/OiBzdHJpbmdcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb2cgbWVzc2FnZSBsZXZlbC5cclxuICovXHJcbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcclxuICAgIEVycm9yLFxyXG4gICAgV2FybmluZyxcclxuICAgIEluZm8sXHJcbiAgICBWZXJib3NlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsYmFjayB0byBzZW5kIHRoZSBtZXNzYWdlcyB0by5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2dlckNhbGxiYWNrIHtcclxuICAgIChsZXZlbDogTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZywgY29udGFpbnNQaWk6IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3Mgd2hpY2ggZmFjaWxpdGF0ZXMgbG9nZ2luZyBvZiBtZXNzYWdlcyB0byBhIHNwZWNpZmljIHBsYWNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XHJcblxyXG4gICAgLy8gQ29ycmVsYXRpb24gSUQgZm9yIHJlcXVlc3QsIHVzdWFsbHkgc2V0IGJ5IHVzZXIuXHJcbiAgICBwcml2YXRlIGNvcnJlbGF0aW9uSWQ6IHN0cmluZztcclxuXHJcbiAgICAvLyBDdXJyZW50IGxvZyBsZXZlbCwgZGVmYXVsdHMgdG8gaW5mby5cclxuICAgIHByaXZhdGUgbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuSW5mbztcclxuXHJcbiAgICAvLyBCb29sZWFuIGRlc2NyaWJpbmcgd2hldGhlciBQSUkgbG9nZ2luZyBpcyBhbGxvd2VkLlxyXG4gICAgcHJpdmF0ZSBwaWlMb2dnaW5nRW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICAvLyBDYWxsYmFjayB0byBzZW5kIG1lc3NhZ2VzIHRvLlxyXG4gICAgcHJpdmF0ZSBsb2NhbENhbGxiYWNrOiBJTG9nZ2VyQ2FsbGJhY2s7XHJcblxyXG4gICAgY29uc3RydWN0b3IobG9nZ2VyT3B0aW9uczogTG9nZ2VyT3B0aW9ucykge1xyXG4gICAgICAgIGlmIChsb2dnZXJPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxDYWxsYmFjayA9IGxvZ2dlck9wdGlvbnMubG9nZ2VyQ2FsbGJhY2s7XHJcbiAgICAgICAgICAgIHRoaXMucGlpTG9nZ2luZ0VuYWJsZWQgPSBsb2dnZXJPcHRpb25zLnBpaUxvZ2dpbmdFbmFibGVkO1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsID0gbG9nZ2VyT3B0aW9ucy5sb2dMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2cgbWVzc2FnZSB3aXRoIHJlcXVpcmVkIG9wdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbG9nTWVzc2FnZShsb2dNZXNzYWdlOiBzdHJpbmcsIG9wdGlvbnM6IExvZ2dlck1lc3NhZ2VPcHRpb25zKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKChvcHRpb25zLmxvZ0xldmVsID4gdGhpcy5sZXZlbCkgfHwgKCF0aGlzLnBpaUxvZ2dpbmdFbmFibGVkICYmIG9wdGlvbnMuY29udGFpbnNQaWkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgIGNvbnN0IGxvZ0hlYWRlcjogc3RyaW5nID0gU3RyaW5nVXRpbHMuaXNFbXB0eSh0aGlzLmNvcnJlbGF0aW9uSWQpID8gYFske3RpbWVzdGFtcH1dIDogYCA6IGBbJHt0aW1lc3RhbXB9XSA6IFske3RoaXMuY29ycmVsYXRpb25JZH1dYDtcclxuICAgICAgICBjb25zdCBsb2cgPSBgJHtsb2dIZWFkZXJ9IDogJHtwa2cudmVyc2lvbn0gOiAke0xvZ0xldmVsW29wdGlvbnMubG9nTGV2ZWxdfSAtICR7bG9nTWVzc2FnZX1gO1xyXG4gICAgICAgIC8vIGRlYnVnKGBtc2FsOiR7TG9nTGV2ZWxbb3B0aW9ucy5sb2dMZXZlbF19JHtvcHRpb25zLmNvbnRhaW5zUGlpID8gXCItUGlpXCI6IFwiXCJ9JHtvcHRpb25zLmNvbnRleHQgPyBgOiR7b3B0aW9ucy5jb250ZXh0fWAgOiBcIlwifWApKGxvZ01lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZUNhbGxiYWNrKG9wdGlvbnMubG9nTGV2ZWwsIGxvZywgb3B0aW9ucy5jb250YWluc1BpaSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlIGNhbGxiYWNrIHdpdGggbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZXhlY3V0ZUNhbGxiYWNrKGxldmVsOiBMb2dMZXZlbCwgbWVzc2FnZTogc3RyaW5nLCBjb250YWluc1BpaTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbENhbGxiYWNrKGxldmVsLCBtZXNzYWdlLCBjb250YWluc1BpaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9ncyBlcnJvciBtZXNzYWdlcy5cclxuICAgICAqL1xyXG4gICAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlKG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLkVycm9yLFxyXG4gICAgICAgICAgICBjb250YWluc1BpaTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IGNvcnJlbGF0aW9uSWQgfHwgXCJcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9ncyBlcnJvciBtZXNzYWdlcyB3aXRoIFBJSS5cclxuICAgICAqL1xyXG4gICAgZXJyb3JQaWkobWVzc2FnZTogc3RyaW5nLCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlKG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLkVycm9yLFxyXG4gICAgICAgICAgICBjb250YWluc1BpaTogdHJ1ZSxcclxuICAgICAgICAgICAgY29ycmVsYXRpb25JZDogY29ycmVsYXRpb25JZCB8fCBcIlwiXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2dzIHdhcm5pbmcgbWVzc2FnZXMuXHJcbiAgICAgKi9cclxuICAgIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nLCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlKG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLldhcm5pbmcsXHJcbiAgICAgICAgICAgIGNvbnRhaW5zUGlpOiBmYWxzZSxcclxuICAgICAgICAgICAgY29ycmVsYXRpb25JZDogY29ycmVsYXRpb25JZCB8fCBcIlwiXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2dzIHdhcm5pbmcgbWVzc2FnZXMgd2l0aCBQSUkuXHJcbiAgICAgKi9cclxuICAgIHdhcm5pbmdQaWkobWVzc2FnZTogc3RyaW5nLCBjb3JyZWxhdGlvbklkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sb2dNZXNzYWdlKG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgbG9nTGV2ZWw6IExvZ0xldmVsLldhcm5pbmcsXHJcbiAgICAgICAgICAgIGNvbnRhaW5zUGlpOiB0cnVlLFxyXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBjb3JyZWxhdGlvbklkIHx8IFwiXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ3MgaW5mbyBtZXNzYWdlcy5cclxuICAgICAqL1xyXG4gICAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2UobWVzc2FnZSwge1xyXG4gICAgICAgICAgICBsb2dMZXZlbDogTG9nTGV2ZWwuSW5mbyxcclxuICAgICAgICAgICAgY29udGFpbnNQaWk6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBjb3JyZWxhdGlvbklkIHx8IFwiXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ3MgaW5mbyBtZXNzYWdlcyB3aXRoIFBJSS5cclxuICAgICAqL1xyXG4gICAgaW5mb1BpaShtZXNzYWdlOiBzdHJpbmcsIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2UobWVzc2FnZSwge1xyXG4gICAgICAgICAgICBsb2dMZXZlbDogTG9nTGV2ZWwuSW5mbyxcclxuICAgICAgICAgICAgY29udGFpbnNQaWk6IHRydWUsXHJcbiAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IGNvcnJlbGF0aW9uSWQgfHwgXCJcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9ncyB2ZXJib3NlIG1lc3NhZ2VzLlxyXG4gICAgICovXHJcbiAgICB2ZXJib3NlKG1lc3NhZ2U6IHN0cmluZywgY29ycmVsYXRpb25JZD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZShtZXNzYWdlLCB7XHJcbiAgICAgICAgICAgIGxvZ0xldmVsOiBMb2dMZXZlbC5WZXJib3NlLFxyXG4gICAgICAgICAgICBjb250YWluc1BpaTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IGNvcnJlbGF0aW9uSWQgfHwgXCJcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9ncyB2ZXJib3NlIG1lc3NhZ2VzIHdpdGggUElJLlxyXG4gICAgICovXHJcbiAgICB2ZXJib3NlUGlpKG1lc3NhZ2U6IHN0cmluZywgY29ycmVsYXRpb25JZD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZShtZXNzYWdlLCB7XHJcbiAgICAgICAgICAgIGxvZ0xldmVsOiBMb2dMZXZlbC5WZXJib3NlLFxyXG4gICAgICAgICAgICBjb250YWluc1BpaTogdHJ1ZSxcclxuICAgICAgICAgICAgY29ycmVsYXRpb25JZDogY29ycmVsYXRpb25JZCB8fCBcIlwiXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgUElJIExvZ2dpbmcgaXMgZW5hYmxlZCBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIGlzUGlpTG9nZ2luZ0VuYWJsZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGlpTG9nZ2luZ0VuYWJsZWQgfHwgZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5leHBvcnQgY29uc3QgQ29uc3RhbnRzID0ge1xyXG4gICAgTElCUkFSWV9OQU1FOiBcIk1TQUwuSlNcIixcclxuICAgIFNLVTogXCJtc2FsLmpzLmNvbW1vblwiLFxyXG4gICAgLy8gUHJlZml4IGZvciBhbGwgbGlicmFyeSBjYWNoZSBlbnRyaWVzXHJcbiAgICBDQUNIRV9QUkVGSVg6IFwibXNhbFwiLFxyXG4gICAgLy8gZGVmYXVsdCBhdXRob3JpdHlcclxuICAgIERFRkFVTFRfQVVUSE9SSVRZOiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9jb21tb24vXCIsXHJcbiAgICBERUZBVUxUX0FVVEhPUklUWV9IT1NUOiBcImxvZ2luLm1pY3Jvc29mdG9ubGluZS5jb21cIixcclxuICAgIC8vIEFERlMgU3RyaW5nXHJcbiAgICBBREZTOiBcImFkZnNcIixcclxuICAgIC8vIERlZmF1bHQgQUFEIEluc3RhbmNlIERpc2NvdmVyeSBFbmRwb2ludFxyXG4gICAgQUFEX0lOU1RBTkNFX0RJU0NPVkVSWV9FTkRQVDogXCJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vY29tbW9uL2Rpc2NvdmVyeS9pbnN0YW5jZT9hcGktdmVyc2lvbj0xLjEmYXV0aG9yaXphdGlvbl9lbmRwb2ludD1cIixcclxuICAgIC8vIFJlc291cmNlIGRlbGltaXRlciAtIHVzZWQgZm9yIGNlcnRhaW4gY2FjaGUgZW50cmllc1xyXG4gICAgUkVTT1VSQ0VfREVMSU06IFwifFwiLFxyXG4gICAgLy8gUGxhY2Vob2xkZXIgZm9yIG5vbi1leGlzdGVudCBhY2NvdW50IGlkcy9vYmplY3RzXHJcbiAgICBOT19BQ0NPVU5UOiBcIk5PX0FDQ09VTlRcIixcclxuICAgIC8vIENsYWltc1xyXG4gICAgQ0xBSU1TOiBcImNsYWltc1wiLFxyXG4gICAgLy8gQ29uc3VtZXIgVVRJRFxyXG4gICAgQ09OU1VNRVJfVVRJRDogXCI5MTg4MDQwZC02YzY3LTRjNWItYjExMi0zNmEzMDRiNjZkYWRcIixcclxuICAgIC8vIERlZmF1bHQgc2NvcGVzXHJcbiAgICBPUEVOSURfU0NPUEU6IFwib3BlbmlkXCIsXHJcbiAgICBQUk9GSUxFX1NDT1BFOiBcInByb2ZpbGVcIixcclxuICAgIE9GRkxJTkVfQUNDRVNTX1NDT1BFOiBcIm9mZmxpbmVfYWNjZXNzXCIsXHJcbiAgICAvLyBEZWZhdWx0IHJlc3BvbnNlIHR5cGUgZm9yIGF1dGhvcml6YXRpb24gY29kZSBmbG93XHJcbiAgICBDT0RFX1JFU1BPTlNFX1RZUEU6IFwiY29kZVwiLFxyXG4gICAgQ09ERV9HUkFOVF9UWVBFOiBcImF1dGhvcml6YXRpb25fY29kZVwiLFxyXG4gICAgUlRfR1JBTlRfVFlQRTogXCJyZWZyZXNoX3Rva2VuXCIsXHJcbiAgICBGUkFHTUVOVF9SRVNQT05TRV9NT0RFOiBcImZyYWdtZW50XCIsXHJcbiAgICBTMjU2X0NPREVfQ0hBTExFTkdFX01FVEhPRDogXCJTMjU2XCIsXHJcbiAgICBVUkxfRk9STV9DT05URU5UX1RZUEU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLThcIixcclxuICAgIEFVVEhPUklaQVRJT05fUEVORElORzogXCJhdXRob3JpemF0aW9uX3BlbmRpbmdcIixcclxuICAgIE5PVF9ERUZJTkVEOiBcIm5vdF9kZWZpbmVkXCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXF1ZXN0IGhlYWRlciBuYW1lc1xyXG4gKi9cclxuZXhwb3J0IGVudW0gSGVhZGVyTmFtZXMge1xyXG4gICAgQ09OVEVOVF9UWVBFID0gXCJDb250ZW50LVR5cGVcIixcclxuICAgIFhfQ0xJRU5UX0NVUlJfVEVMRU0gPSBcIngtY2xpZW50LWN1cnJlbnQtdGVsZW1ldHJ5XCIsXHJcbiAgICBYX0NMSUVOVF9MQVNUX1RFTEVNID0gXCJ4LWNsaWVudC1sYXN0LXRlbGVtZXRyeVwiLFxyXG4gICAgUkVUUllfQUZURVIgPSBcIlJldHJ5LUFmdGVyXCIsXHJcbiAgICBYX01TX0xJQl9DQVBBQklMSVRZID0gXCJ4LW1zLWxpYi1jYXBhYmlsaXR5XCIsXHJcbiAgICBYX01TX0xJQl9DQVBBQklMSVRZX1ZBTFVFID0gXCJyZXRyeS1hZnRlciwgaDQyOVwiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJzaXN0ZW50IGNhY2hlIGtleXMgTVNBTCB3aGljaCBzdGF5IHdoaWxlIHVzZXIgaXMgbG9nZ2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gUGVyc2lzdGVudENhY2hlS2V5cyB7XHJcbiAgICBJRF9UT0tFTiA9IFwiaWR0b2tlblwiLFxyXG4gICAgQ0xJRU5UX0lORk8gPSBcImNsaWVudC5pbmZvXCIsXHJcbiAgICBBREFMX0lEX1RPS0VOID0gXCJhZGFsLmlkdG9rZW5cIixcclxuICAgIEVSUk9SID0gXCJlcnJvclwiLFxyXG4gICAgRVJST1JfREVTQyA9IFwiZXJyb3IuZGVzY3JpcHRpb25cIlxyXG59XHJcblxyXG4vKipcclxuICogU3RyaW5nIGNvbnN0YW50cyByZWxhdGVkIHRvIEFBRCBBdXRob3JpdHlcclxuICovXHJcbmV4cG9ydCBlbnVtIEFBREF1dGhvcml0eUNvbnN0YW50cyB7XHJcbiAgICBDT01NT04gPSBcImNvbW1vblwiLFxyXG4gICAgT1JHQU5JWkFUSU9OUyA9IFwib3JnYW5pemF0aW9uc1wiLFxyXG4gICAgQ09OU1VNRVJTID0gXCJjb25zdW1lcnNcIlxyXG59XHJcblxyXG4vKipcclxuICogS2V5cyBpbiB0aGUgaGFzaFBhcmFtcyBzZW50IGJ5IEFBRCBTZXJ2ZXJcclxuICovXHJcbmV4cG9ydCBlbnVtIEFBRFNlcnZlclBhcmFtS2V5cyB7XHJcbiAgICBDTElFTlRfSUQgPSBcImNsaWVudF9pZFwiLFxyXG4gICAgUkVESVJFQ1RfVVJJID0gXCJyZWRpcmVjdF91cmlcIixcclxuICAgIFJFU1BPTlNFX1RZUEUgPSBcInJlc3BvbnNlX3R5cGVcIixcclxuICAgIFJFU1BPTlNFX01PREUgPSBcInJlc3BvbnNlX21vZGVcIixcclxuICAgIEdSQU5UX1RZUEUgPSBcImdyYW50X3R5cGVcIixcclxuICAgIENMQUlNUyA9IFwiY2xhaW1zXCIsXHJcbiAgICBTQ09QRSA9IFwic2NvcGVcIixcclxuICAgIEVSUk9SID0gXCJlcnJvclwiLFxyXG4gICAgRVJST1JfREVTQ1JJUFRJT04gPSBcImVycm9yX2Rlc2NyaXB0aW9uXCIsXHJcbiAgICBBQ0NFU1NfVE9LRU4gPSBcImFjY2Vzc190b2tlblwiLFxyXG4gICAgSURfVE9LRU4gPSBcImlkX3Rva2VuXCIsXHJcbiAgICBSRUZSRVNIX1RPS0VOID0gXCJyZWZyZXNoX3Rva2VuXCIsXHJcbiAgICBFWFBJUkVTX0lOID0gXCJleHBpcmVzX2luXCIsXHJcbiAgICBTVEFURSA9IFwic3RhdGVcIixcclxuICAgIE5PTkNFID0gXCJub25jZVwiLFxyXG4gICAgUFJPTVBUID0gXCJwcm9tcHRcIixcclxuICAgIFNFU1NJT05fU1RBVEUgPSBcInNlc3Npb25fc3RhdGVcIixcclxuICAgIENMSUVOVF9JTkZPID0gXCJjbGllbnRfaW5mb1wiLFxyXG4gICAgQ09ERSA9IFwiY29kZVwiLFxyXG4gICAgQ09ERV9DSEFMTEVOR0UgPSBcImNvZGVfY2hhbGxlbmdlXCIsXHJcbiAgICBDT0RFX0NIQUxMRU5HRV9NRVRIT0QgPSBcImNvZGVfY2hhbGxlbmdlX21ldGhvZFwiLFxyXG4gICAgQ09ERV9WRVJJRklFUiA9IFwiY29kZV92ZXJpZmllclwiLFxyXG4gICAgQ0xJRU5UX1JFUVVFU1RfSUQgPSBcImNsaWVudC1yZXF1ZXN0LWlkXCIsXHJcbiAgICBYX0NMSUVOVF9TS1UgPSBcIngtY2xpZW50LVNLVVwiLFxyXG4gICAgWF9DTElFTlRfVkVSID0gXCJ4LWNsaWVudC1WRVJcIixcclxuICAgIFhfQ0xJRU5UX09TID0gXCJ4LWNsaWVudC1PU1wiLFxyXG4gICAgWF9DTElFTlRfQ1BVID0gXCJ4LWNsaWVudC1DUFVcIixcclxuICAgIFBPU1RfTE9HT1VUX1VSSSA9IFwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpXCIsXHJcbiAgICBERVZJQ0VfQ09ERSA9IFwiZGV2aWNlX2NvZGVcIixcclxuICAgIENMSUVOVF9TRUNSRVQgPSBcImNsaWVudF9zZWNyZXRcIixcclxuICAgIENMSUVOVF9BU1NFUlRJT04gPSBcImNsaWVudF9hc3NlcnRpb25cIixcclxuICAgIENMSUVOVF9BU1NFUlRJT05fVFlQRSA9IFwiY2xpZW50X2Fzc2VydGlvbl90eXBlXCIsXHJcbiAgICBUT0tFTl9UWVBFID0gXCJ0b2tlbl90eXBlXCIsXHJcbiAgICBSRVFfQ05GID0gXCJyZXFfY25mXCIsXHJcbiAgICBPQk9fQVNTRVJUSU9OID0gXCJhc3NlcnRpb25cIixcclxuICAgIFJFUVVFU1RFRF9UT0tFTl9VU0UgPSBcInJlcXVlc3RlZF90b2tlbl91c2VcIixcclxuICAgIE9OX0JFSEFMRl9PRiA9IFwib25fYmVoYWxmX29mXCIsXHJcbiAgICBGT0NJID0gXCJmb2NpXCJcclxufVxyXG5cclxuLyoqXHJcbiAqIENsYWltcyByZXF1ZXN0IGtleXNcclxuICovXHJcbmV4cG9ydCBlbnVtIENsYWltc1JlcXVlc3RLZXlzIHtcclxuICAgIEFDQ0VTU19UT0tFTiA9IFwiYWNjZXNzX3Rva2VuXCIsXHJcbiAgICBYTVNfQ0MgPSBcInhtc19jY1wiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiB3ZSBjb25zaWRlcmVkIG1ha2luZyB0aGlzIFwiZW51bVwiIGluIHRoZSByZXF1ZXN0IGluc3RlYWQgb2Ygc3RyaW5nLCBob3dldmVyIGl0IGxvb2tzIGxpa2UgdGhlIGFsbG93ZWQgbGlzdCBvZlxyXG4gKiBwcm9tcHQgdmFsdWVzIGtlcHQgY2hhbmdpbmcgb3ZlciBwYXN0IGNvdXBsZSBvZiB5ZWFycy4gVGhlcmUgYXJlIHNvbWUgdW5kb2N1bWVudGVkIHByb21wdCB2YWx1ZXMgZm9yIHNvbWVcclxuICogaW50ZXJuYWwgcGFydG5lcnMgdG9vLCBoZW5jZSB0aGUgY2hvaWNlIG9mIGdlbmVyaWMgXCJzdHJpbmdcIiB0eXBlIGluc3RlYWQgb2YgdGhlIFwiZW51bVwiXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUHJvbXB0VmFsdWUgPSB7XHJcbiAgICBMT0dJTjogXCJsb2dpblwiLFxyXG4gICAgU0VMRUNUX0FDQ09VTlQ6IFwic2VsZWN0X2FjY291bnRcIixcclxuICAgIENPTlNFTlQ6IFwiY29uc2VudFwiLFxyXG4gICAgTk9ORTogXCJub25lXCIsXHJcbn07XHJcblxyXG4vKipcclxuICogU1NPIFR5cGVzIC0gZ2VuZXJhdGVkIHRvIHBvcHVsYXRlIGhpbnRzXHJcbiAqL1xyXG5leHBvcnQgZW51bSBTU09UeXBlcyB7XHJcbiAgICBBQ0NPVU5UID0gXCJhY2NvdW50XCIsXHJcbiAgICBTSUQgPSBcInNpZFwiLFxyXG4gICAgTE9HSU5fSElOVCA9IFwibG9naW5faGludFwiLFxyXG4gICAgSURfVE9LRU4gPSBcImlkX3Rva2VuXCIsXHJcbiAgICBET01BSU5fSElOVCA9IFwiZG9tYWluX2hpbnRcIixcclxuICAgIE9SR0FOSVpBVElPTlMgPSBcIm9yZ2FuaXphdGlvbnNcIixcclxuICAgIENPTlNVTUVSUyA9IFwiY29uc3VtZXJzXCIsXHJcbiAgICBBQ0NPVU5UX0lEID0gXCJhY2NvdW50SWRlbnRpZmllclwiLFxyXG4gICAgSE9NRUFDQ09VTlRfSUQgPSBcImhvbWVBY2NvdW50SWRlbnRpZmllclwiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXNhbGxvd2VkIGV4dHJhIHF1ZXJ5IHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQmxhY2tsaXN0ZWRFUVBhcmFtcyA9IFtcclxuICAgIFNTT1R5cGVzLlNJRCxcclxuICAgIFNTT1R5cGVzLkxPR0lOX0hJTlRcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBhbGxvd2VkIHZhbHVlcyBmb3IgY29kZVZlcmlmaWVyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcyA9IHtcclxuICAgIFBMQUlOOiBcInBsYWluXCIsXHJcbiAgICBTMjU2OiBcIlMyNTZcIlxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBtZXRob2QgdXNlZCB0byBlbmNvZGUgdGhlIGNvZGUgdmVyaWZpZXIgZm9yIHRoZSBjb2RlIGNoYWxsZW5nZSBwYXJhbWV0ZXIuIGNhbiBiZSBvbmVcclxuICogb2YgcGxhaW4gb3IgczI1Ni4gaWYgZXhjbHVkZWQsIGNvZGUgY2hhbGxlbmdlIGlzIGFzc3VtZWQgdG8gYmUgcGxhaW50ZXh0LiBmb3IgbW9yZVxyXG4gKiBpbmZvcm1hdGlvbiwgc2VlIHRoZSBwa2NlIHJjZjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzZcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb2RlQ2hhbGxlbmdlTWV0aG9kVmFsdWVzQXJyYXk6IHN0cmluZ1tdID0gW1xyXG4gICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5QTEFJTixcclxuICAgIENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMuUzI1NlxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIGFsbG93ZWQgdmFsdWVzIGZvciByZXNwb25zZV9tb2RlXHJcbiAqL1xyXG5leHBvcnQgZW51bSBSZXNwb25zZU1vZGUge1xyXG4gICAgUVVFUlkgPSBcInF1ZXJ5XCIsXHJcbiAgICBGUkFHTUVOVCA9IFwiZnJhZ21lbnRcIixcclxuICAgIEZPUk1fUE9TVCA9IFwiZm9ybV9wb3N0XCJcclxufVxyXG5cclxuLyoqXHJcbiAqIGFsbG93ZWQgZ3JhbnRfdHlwZVxyXG4gKi9cclxuZXhwb3J0IGVudW0gR3JhbnRUeXBlIHtcclxuICAgIElNUExJQ0lUX0dSQU5UID0gXCJpbXBsaWNpdFwiLFxyXG4gICAgQVVUSE9SSVpBVElPTl9DT0RFX0dSQU5UID0gXCJhdXRob3JpemF0aW9uX2NvZGVcIixcclxuICAgIENMSUVOVF9DUkVERU5USUFMU19HUkFOVCA9IFwiY2xpZW50X2NyZWRlbnRpYWxzXCIsXHJcbiAgICBSRVNPVVJDRV9PV05FUl9QQVNTV09SRF9HUkFOVCA9IFwicGFzc3dvcmRcIixcclxuICAgIFJFRlJFU0hfVE9LRU5fR1JBTlQgPSBcInJlZnJlc2hfdG9rZW5cIixcclxuICAgIERFVklDRV9DT0RFX0dSQU5UID0gXCJkZXZpY2VfY29kZVwiLFxyXG4gICAgSldUX0JFQVJFUiA9IFwidXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlclwiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBY2NvdW50IHR5cGVzIGluIENhY2hlXHJcbiAqL1xyXG5leHBvcnQgZW51bSBDYWNoZUFjY291bnRUeXBlIHtcclxuICAgIE1TU1RTX0FDQ09VTlRfVFlQRSA9IFwiTVNTVFNcIixcclxuICAgIEFERlNfQUNDT1VOVF9UWVBFID0gXCJBREZTXCIsXHJcbiAgICBNU0FWMV9BQ0NPVU5UX1RZUEUgPSBcIk1TQVwiLFxyXG4gICAgR0VORVJJQ19BQ0NPVU5UX1RZUEUgPSBcIkdlbmVyaWNcIiAvLyBOVExNLCBLZXJiZXJvcywgRkJBLCBCYXNpYyBldGNcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlcGFyYXRvcnMgdXNlZCBpbiBjYWNoZVxyXG4gKi9cclxuZXhwb3J0IGVudW0gU2VwYXJhdG9ycyB7XHJcbiAgICBDQUNIRV9LRVlfU0VQQVJBVE9SID0gXCItXCIsXHJcbiAgICBDTElFTlRfSU5GT19TRVBBUkFUT1IgPSBcIi5cIlxyXG59XHJcblxyXG4vKipcclxuICogQ3JlZGVudGlhbCBUeXBlIHN0b3JlZCBpbiB0aGUgY2FjaGVcclxuICovXHJcbmV4cG9ydCBlbnVtIENyZWRlbnRpYWxUeXBlIHtcclxuICAgIElEX1RPS0VOID0gXCJJZFRva2VuXCIsXHJcbiAgICBBQ0NFU1NfVE9LRU4gPSBcIkFjY2Vzc1Rva2VuXCIsXHJcbiAgICBSRUZSRVNIX1RPS0VOID0gXCJSZWZyZXNoVG9rZW5cIixcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWRlbnRpYWwgVHlwZSBzdG9yZWQgaW4gdGhlIGNhY2hlXHJcbiAqL1xyXG5leHBvcnQgZW51bSBDYWNoZVNjaGVtYVR5cGUge1xyXG4gICAgQUNDT1VOVCA9IFwiQWNjb3VudFwiLFxyXG4gICAgQ1JFREVOVElBTCA9IFwiQ3JlZGVudGlhbFwiLFxyXG4gICAgSURfVE9LRU4gPSBcIklkVG9rZW5cIixcclxuICAgIEFDQ0VTU19UT0tFTiA9IFwiQWNjZXNzVG9rZW5cIixcclxuICAgIFJFRlJFU0hfVE9LRU4gPSBcIlJlZnJlc2hUb2tlblwiLFxyXG4gICAgQVBQX01FVEFEQVRBID0gXCJBcHBNZXRhZGF0YVwiLFxyXG4gICAgVEVNUE9SQVJZID0gXCJUZW1wQ2FjaGVcIixcclxuICAgIFRFTEVNRVRSWSA9IFwiVGVsZW1ldHJ5XCIsXHJcbiAgICBVTkRFRklORUQgPSBcIlVuZGVmaW5lZFwiLFxyXG4gICAgVEhST1RUTElORyA9IFwiVGhyb3R0bGluZ1wiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lIGFsbCBjYWNoZSB0eXBlc1xyXG4gKi9cclxuZXhwb3J0IGVudW0gQ2FjaGVUeXBlIHtcclxuICAgIEFERlMgPSAxMDAxLFxyXG4gICAgTVNBID0gMTAwMixcclxuICAgIE1TU1RTID0gMTAwMyxcclxuICAgIEdFTkVSSUMgPSAxMDA0LFxyXG4gICAgQUNDRVNTX1RPS0VOID0gMjAwMSxcclxuICAgIFJFRlJFU0hfVE9LRU4gPSAyMDAyLFxyXG4gICAgSURfVE9LRU4gPSAyMDAzLFxyXG4gICAgQVBQX01FVEFEQVRBID0gMzAwMSxcclxuICAgIFVOREVGSU5FRCA9IDk5OTlcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vcmUgQ2FjaGUgcmVsYXRlZCBjb25zdGFudHNcclxuICovXHJcbmV4cG9ydCBjb25zdCBBUFBfTUVUQURBVEEgPSBcImFwcG1ldGFkYXRhXCI7XHJcbmV4cG9ydCBjb25zdCBDbGllbnRJbmZvID0gXCJjbGllbnRfaW5mb1wiO1xyXG5leHBvcnQgY29uc3QgVEhFX0ZBTUlMWV9JRCA9IFwiMVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFUlZFUl9URUxFTV9DT05TVEFOVFMgPSB7XHJcbiAgICBTQ0hFTUFfVkVSU0lPTjogMixcclxuICAgIE1BWF9IRUFERVJfQllURVM6IDQwMDAsIC8vIE1heCBpcyA0S0IsIDQwMDAgQnl0ZXMgcHJvdmlkZXMgOTYgQnl0ZSBidWZmZXIgZm9yIHNlcGFyYXRvcnMsIHNjaGVtYSB2ZXJzaW9uLCBldGMuIFxyXG4gICAgQ0FDSEVfS0VZOiBcInNlcnZlci10ZWxlbWV0cnlcIixcclxuICAgIENBVEVHT1JZX1NFUEFSQVRPUjogXCJ8XCIsXHJcbiAgICBWQUxVRV9TRVBBUkFUT1I6IFwiLFwiLFxyXG4gICAgT1ZFUkZMT1dfVFJVRTogXCIxXCIsXHJcbiAgICBPVkVSRkxPV19GQUxTRTogXCIwXCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIG9mIHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0XHJcbiAqL1xyXG5leHBvcnQgZW51bSBBdXRoZW50aWNhdGlvblNjaGVtZSB7XHJcbiAgICBQT1AgPSBcInBvcFwiLFxyXG4gICAgQkVBUkVSID0gXCJCZWFyZXJcIlxyXG59XHJcblxyXG4vKipcclxuICogQ29uc3RhbnRzIHJlbGF0ZWQgdG8gdGhyb3R0bGluZ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRocm90dGxpbmdDb25zdGFudHMgPSB7XHJcbiAgICAvLyBEZWZhdWx0IHRpbWUgdG8gdGhyb3R0bGUgUmVxdWVzdFRodW1icHJpbnQgaW4gc2Vjb25kc1xyXG4gICAgREVGQVVMVF9USFJPVFRMRV9USU1FX1NFQ09ORFM6IDYwLFxyXG4gICAgLy8gRGVmYXVsdCBtYXhpbXVtIHRpbWUgdG8gdGhyb3R0bGUgaW4gc2Vjb25kcywgb3ZlcnJpZGVzIHdoYXQgdGhlIHNlcnZlciBzZW5kcyBiYWNrXHJcbiAgICBERUZBVUxUX01BWF9USFJPVFRMRV9USU1FX1NFQ09ORFM6IDM2MDAsXHJcbiAgICAvLyBQcmVmaXggZm9yIHN0b3JpbmcgdGhyb3R0bGluZyBlbnRyaWVzXHJcbiAgICBUSFJPVFRMSU5HX1BSRUZJWDogXCJ0aHJvdHRsaW5nXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBFcnJvcnMgPSB7XHJcbiAgICBJTlZBTElEX0dSQU5UX0VSUk9SOiBcImludmFsaWRfZ3JhbnRcIixcclxuICAgIENMSUVOVF9NSVNNQVRDSF9FUlJPUjogXCJjbGllbnRfbWlzbWF0Y2hcIixcclxufTtcclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTZXBhcmF0b3JzLCBDcmVkZW50aWFsVHlwZSwgQ2FjaGVUeXBlLCBDb25zdGFudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBCYXNlIHR5cGUgZm9yIGNyZWRlbnRpYWxzIHRvIGJlIHN0b3JlZCBpbiB0aGUgY2FjaGU6IGVnOiBBQ0NFU1NfVE9LRU4sIElEX1RPS0VOIGV0Y1xyXG4gKlxyXG4gKiBLZXk6VmFsdWUgU2NoZW1hOlxyXG4gKlxyXG4gKiBLZXk6IDxob21lX2FjY291bnRfaWQqPi08ZW52aXJvbm1lbnQ+LTxjcmVkZW50aWFsX3R5cGU+LTxjbGllbnRfaWQ+LTxyZWFsbSo+LTx0YXJnZXQqPlxyXG4gKlxyXG4gKiBWYWx1ZSBTY2hlbWE6XHJcbiAqIHtcclxuICogICAgICBob21lQWNjb3VudElkOiBob21lIGFjY291bnQgaWRlbnRpZmllciBmb3IgdGhlIGF1dGggc2NoZW1lLFxyXG4gKiAgICAgIGVudmlyb25tZW50OiBlbnRpdHkgdGhhdCBpc3N1ZWQgdGhlIHRva2VuLCByZXByZXNlbnRlZCBhcyBhIGZ1bGwgaG9zdFxyXG4gKiAgICAgIGNyZWRlbnRpYWxUeXBlOiBUeXBlIG9mIGNyZWRlbnRpYWwgYXMgYSBzdHJpbmcsIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogUmVmcmVzaFRva2VuLCBBY2Nlc3NUb2tlbiwgSWRUb2tlbiwgUGFzc3dvcmQsIENvb2tpZSwgQ2VydGlmaWNhdGUsIE90aGVyXHJcbiAqICAgICAgY2xpZW50SWQ6IGNsaWVudCBJRCBvZiB0aGUgYXBwbGljYXRpb25cclxuICogICAgICBzZWNyZXQ6IEFjdHVhbCBjcmVkZW50aWFsIGFzIGEgc3RyaW5nXHJcbiAqICAgICAgZmFtaWx5SWQ6IEZhbWlseSBJRCBpZGVudGlmaWVyLCB1c3VhbGx5IG9ubHkgdXNlZCBmb3IgcmVmcmVzaCB0b2tlbnNcclxuICogICAgICByZWFsbTogRnVsbCB0ZW5hbnQgb3Igb3JnYW5pemF0aW9uYWwgaWRlbnRpZmllciB0aGF0IHRoZSBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogICAgICB0YXJnZXQ6IFBlcm1pc3Npb25zIHRoYXQgYXJlIGluY2x1ZGVkIGluIHRoZSB0b2tlbiwgb3IgZm9yIHJlZnJlc2ggdG9rZW5zLCB0aGUgcmVzb3VyY2UgaWRlbnRpZmllci5cclxuICogICAgICBvYm9Bc3NlcnRpb246IGFjY2VzcyB0b2tlbiBwYXNzZWQgaW4gYXMgcGFydCBvZiBPQk8gcmVxdWVzdFxyXG4gKiB9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbEVudGl0eSB7XHJcbiAgICBob21lQWNjb3VudElkOiBzdHJpbmc7XHJcbiAgICBlbnZpcm9ubWVudDogc3RyaW5nO1xyXG4gICAgY3JlZGVudGlhbFR5cGU6IENyZWRlbnRpYWxUeXBlO1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxuICAgIHNlY3JldDogc3RyaW5nO1xyXG4gICAgZmFtaWx5SWQ/OiBzdHJpbmc7XHJcbiAgICByZWFsbT86IHN0cmluZztcclxuICAgIHRhcmdldD86IHN0cmluZztcclxuICAgIG9ib0Fzc2VydGlvbj86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFjY291bnQgSWQga2V5IGNvbXBvbmVudCBhcyBwZXIgdGhlIHNjaGVtYTogPGhvbWVfYWNjb3VudF9pZD4tPGVudmlyb25tZW50PlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUFjY291bnRJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBDcmVkZW50aWFsRW50aXR5LmdlbmVyYXRlQWNjb3VudElkRm9yQ2FjaGVLZXkodGhpcy5ob21lQWNjb3VudElkLCB0aGlzLmVudmlyb25tZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIENyZWRlbnRpYWwgSWQga2V5IGNvbXBvbmVudCBhcyBwZXIgdGhlIHNjaGVtYTogPGNyZWRlbnRpYWxfdHlwZT4tPGNsaWVudF9pZD4tPHJlYWxtPlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUNyZWRlbnRpYWxJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBDcmVkZW50aWFsRW50aXR5LmdlbmVyYXRlQ3JlZGVudGlhbElkRm9yQ2FjaGVLZXkoXHJcbiAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbFR5cGUsXHJcbiAgICAgICAgICAgIHRoaXMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHRoaXMucmVhbG0sXHJcbiAgICAgICAgICAgIHRoaXMuZmFtaWx5SWRcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgdGFyZ2V0IGtleSBjb21wb25lbnQgYXMgcGVyIHNjaGVtYTogPHRhcmdldD5cclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVUYXJnZXQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gQ3JlZGVudGlhbEVudGl0eS5nZW5lcmF0ZVRhcmdldEZvckNhY2hlS2V5KHRoaXMudGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdlbmVyYXRlcyBjcmVkZW50aWFsIGtleVxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUNyZWRlbnRpYWxLZXkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gQ3JlZGVudGlhbEVudGl0eS5nZW5lcmF0ZUNyZWRlbnRpYWxDYWNoZUtleShcclxuICAgICAgICAgICAgdGhpcy5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICB0aGlzLmVudmlyb25tZW50LFxyXG4gICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxUeXBlLFxyXG4gICAgICAgICAgICB0aGlzLmNsaWVudElkLFxyXG4gICAgICAgICAgICB0aGlzLnJlYWxtLFxyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCxcclxuICAgICAgICAgICAgdGhpcy5mYW1pbHlJZFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSBjYWNoZSAoaW4gdGhpcyBjYXNlIGNyZWRlbnRpYWwpXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlVHlwZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jcmVkZW50aWFsVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlVHlwZS5JRF9UT0tFTjtcclxuICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU46XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2FjaGVUeXBlLkFDQ0VTU19UT0tFTjtcclxuICAgICAgICAgICAgY2FzZSBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlVHlwZS5SRUZSRVNIX1RPS0VOO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZENyZWRlbnRpYWxUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gYENyZWRlbnRpYWxUeXBlYFxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0Q3JlZGVudGlhbFR5cGUoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChrZXkuaW5kZXhPZihDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU4udG9Mb3dlckNhc2UoKSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU47XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkuaW5kZXhPZihDcmVkZW50aWFsVHlwZS5JRF9UT0tFTi50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENyZWRlbnRpYWxUeXBlLklEX1RPS0VOO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LmluZGV4T2YoQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTi50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENyZWRlbnRpYWxUeXBlLlJFRlJFU0hfVE9LRU47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gQ29uc3RhbnRzLk5PVF9ERUZJTkVEO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVzIGNyZWRlbnRpYWwga2V5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZW5lcmF0ZUNyZWRlbnRpYWxDYWNoZUtleShcclxuICAgICAgICBob21lQWNjb3VudElkOiBzdHJpbmcsXHJcbiAgICAgICAgZW52aXJvbm1lbnQ6IHN0cmluZyxcclxuICAgICAgICBjcmVkZW50aWFsVHlwZTogQ3JlZGVudGlhbFR5cGUsXHJcbiAgICAgICAgY2xpZW50SWQ6IHN0cmluZyxcclxuICAgICAgICByZWFsbT86IHN0cmluZyxcclxuICAgICAgICB0YXJnZXQ/OiBzdHJpbmcsXHJcbiAgICAgICAgZmFtaWx5SWQ/OiBzdHJpbmdcclxuICAgICk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbEtleSA9IFtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUFjY291bnRJZEZvckNhY2hlS2V5KGhvbWVBY2NvdW50SWQsIGVudmlyb25tZW50KSxcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUNyZWRlbnRpYWxJZEZvckNhY2hlS2V5KGNyZWRlbnRpYWxUeXBlLCBjbGllbnRJZCwgcmVhbG0sIGZhbWlseUlkKSxcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVRhcmdldEZvckNhY2hlS2V5KHRhcmdldCksXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNyZWRlbnRpYWxLZXkuam9pbihTZXBhcmF0b3JzLkNBQ0hFX0tFWV9TRVBBUkFUT1IpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZW5lcmF0ZXMgQWNjb3VudCBJZCBmb3Iga2V5c1xyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZUFjY291bnRJZEZvckNhY2hlS2V5KFxyXG4gICAgICAgIGhvbWVBY2NvdW50SWQ6IHN0cmluZyxcclxuICAgICAgICBlbnZpcm9ubWVudDogc3RyaW5nXHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRJZDogQXJyYXk8c3RyaW5nPiA9IFtob21lQWNjb3VudElkLCBlbnZpcm9ubWVudF07XHJcbiAgICAgICAgcmV0dXJuIGFjY291bnRJZC5qb2luKFNlcGFyYXRvcnMuQ0FDSEVfS0VZX1NFUEFSQVRPUikudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBDcmVkZW50aWFsIElkIGZvciBrZXlzXHJcbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbFR5cGVcclxuICAgICAqIEBwYXJhbSByZWFsbVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gZmFtaWx5SWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVDcmVkZW50aWFsSWRGb3JDYWNoZUtleShcclxuICAgICAgICBjcmVkZW50aWFsVHlwZTogQ3JlZGVudGlhbFR5cGUsXHJcbiAgICAgICAgY2xpZW50SWQ6IHN0cmluZyxcclxuICAgICAgICByZWFsbT86IHN0cmluZyxcclxuICAgICAgICBmYW1pbHlJZD86IHN0cmluZ1xyXG4gICAgKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBjbGllbnRPckZhbWlseUlkID1cclxuICAgICAgICAgICAgY3JlZGVudGlhbFR5cGUgPT09IENyZWRlbnRpYWxUeXBlLlJFRlJFU0hfVE9LRU5cclxuICAgICAgICAgICAgICAgID8gZmFtaWx5SWQgfHwgY2xpZW50SWRcclxuICAgICAgICAgICAgICAgIDogY2xpZW50SWQ7XHJcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbElkOiBBcnJheTxzdHJpbmc+ID0gW1xyXG4gICAgICAgICAgICBjcmVkZW50aWFsVHlwZSxcclxuICAgICAgICAgICAgY2xpZW50T3JGYW1pbHlJZCxcclxuICAgICAgICAgICAgcmVhbG0gfHwgXCJcIixcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gY3JlZGVudGlhbElkLmpvaW4oU2VwYXJhdG9ycy5DQUNIRV9LRVlfU0VQQVJBVE9SKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgdGFyZ2V0IGtleSBjb21wb25lbnQgYXMgcGVyIHNjaGVtYTogPHRhcmdldD5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVUYXJnZXRGb3JDYWNoZUtleShzY29wZXM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIChzY29wZXMgfHwgXCJcIikudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuL0NsaWVudEF1dGhFcnJvclwiO1xyXG5cclxuLyoqXHJcbiAqIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UgY2xhc3MgY29udGFpbmluZyBzdHJpbmcgY29uc3RhbnRzIHVzZWQgYnkgZXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UgPSB7XHJcbiAgICByZWRpcmVjdFVyaU5vdFNldDoge1xyXG4gICAgICAgIGNvZGU6IFwicmVkaXJlY3RfdXJpX2VtcHR5XCIsXHJcbiAgICAgICAgZGVzYzogXCJBIHJlZGlyZWN0IFVSSSBpcyByZXF1aXJlZCBmb3IgYWxsIGNhbGxzLCBhbmQgbm9uZSBoYXMgYmVlbiBzZXQuXCJcclxuICAgIH0sXHJcbiAgICBwb3N0TG9nb3V0VXJpTm90U2V0OiB7XHJcbiAgICAgICAgY29kZTogXCJwb3N0X2xvZ291dF91cmlfZW1wdHlcIixcclxuICAgICAgICBkZXNjOiBcIkEgcG9zdCBsb2dvdXQgcmVkaXJlY3QgaGFzIG5vdCBiZWVuIHNldC5cIlxyXG4gICAgfSxcclxuICAgIGNsYWltc1JlcXVlc3RQYXJzaW5nRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcImNsYWltc19yZXF1ZXN0X3BhcnNpbmdfZXJyb3JcIixcclxuICAgICAgICBkZXNjOiBcIkNvdWxkIG5vdCBwYXJzZSB0aGUgZ2l2ZW4gY2xhaW1zIHJlcXVlc3Qgb2JqZWN0LlwiXHJcbiAgICB9LFxyXG4gICAgYXV0aG9yaXR5VXJpSW5zZWN1cmU6IHtcclxuICAgICAgICBjb2RlOiBcImF1dGhvcml0eV91cmlfaW5zZWN1cmVcIixcclxuICAgICAgICBkZXNjOiBcIkF1dGhvcml0eSBVUklzIG11c3QgdXNlIGh0dHBzLiAgUGxlYXNlIHNlZSBoZXJlIGZvciB2YWxpZCBhdXRob3JpdHkgY29uZmlndXJhdGlvbiBvcHRpb25zOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hY3RpdmUtZGlyZWN0b3J5L2RldmVsb3AvbXNhbC1qcy1pbml0aWFsaXppbmctY2xpZW50LWFwcGxpY2F0aW9ucyNjb25maWd1cmF0aW9uLW9wdGlvbnNcIlxyXG4gICAgfSxcclxuICAgIHVybFBhcnNlRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcInVybF9wYXJzZV9lcnJvclwiLFxyXG4gICAgICAgIGRlc2M6IFwiVVJMIGNvdWxkIG5vdCBiZSBwYXJzZWQgaW50byBhcHByb3ByaWF0ZSBzZWdtZW50cy5cIlxyXG4gICAgfSxcclxuICAgIHVybEVtcHR5RXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcImVtcHR5X3VybF9lcnJvclwiLFxyXG4gICAgICAgIGRlc2M6IFwiVVJMIHdhcyBlbXB0eSBvciBudWxsLlwiXHJcbiAgICB9LFxyXG4gICAgZW1wdHlTY29wZXNFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwiZW1wdHlfaW5wdXRfc2NvcGVzX2Vycm9yXCIsXHJcbiAgICAgICAgZGVzYzogXCJTY29wZXMgY2Fubm90IGJlIHBhc3NlZCBhcyBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkgYXJyYXkgYmVjYXVzZSB0aGV5IGFyZSByZXF1aXJlZCB0byBvYnRhaW4gYW4gYWNjZXNzIHRva2VuLlwiXHJcbiAgICB9LFxyXG4gICAgbm9uQXJyYXlTY29wZXNFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwibm9uYXJyYXlfaW5wdXRfc2NvcGVzX2Vycm9yXCIsXHJcbiAgICAgICAgZGVzYzogXCJTY29wZXMgY2Fubm90IGJlIHBhc3NlZCBhcyBub24tYXJyYXkuXCJcclxuICAgIH0sXHJcbiAgICBjbGllbnRJZFNpbmdsZVNjb3BlRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBcImNsaWVudGlkX2lucHV0X3Njb3Blc19lcnJvclwiLFxyXG4gICAgICAgIGRlc2M6IFwiQ2xpZW50IElEIGNhbiBvbmx5IGJlIHByb3ZpZGVkIGFzIGEgc2luZ2xlIHNjb3BlLlwiXHJcbiAgICB9LFxyXG4gICAgaW52YWxpZFByb21wdDoge1xyXG4gICAgICAgIGNvZGU6IFwiaW52YWxpZF9wcm9tcHRfdmFsdWVcIixcclxuICAgICAgICBkZXNjOiBcIlN1cHBvcnRlZCBwcm9tcHQgdmFsdWVzIGFyZSAnbG9naW4nLCAnc2VsZWN0X2FjY291bnQnLCAnY29uc2VudCcgYW5kICdub25lJy4gIFBsZWFzZSBzZWUgaGVyZSBmb3IgdmFsaWQgY29uZmlndXJhdGlvbiBvcHRpb25zOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hY3RpdmUtZGlyZWN0b3J5L2RldmVsb3AvbXNhbC1qcy1pbml0aWFsaXppbmctY2xpZW50LWFwcGxpY2F0aW9ucyNjb25maWd1cmF0aW9uLW9wdGlvbnNcIixcclxuICAgIH0sXHJcbiAgICBpbnZhbGlkQ2xhaW1zUmVxdWVzdDoge1xyXG4gICAgICAgIGNvZGU6IFwiaW52YWxpZF9jbGFpbXNcIixcclxuICAgICAgICBkZXNjOiBcIkdpdmVuIGNsYWltcyBwYXJhbWV0ZXIgbXVzdCBiZSBhIHN0cmluZ2lmaWVkIEpTT04gb2JqZWN0LlwiXHJcbiAgICB9LFxyXG4gICAgdG9rZW5SZXF1ZXN0RW1wdHlFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IFwidG9rZW5fcmVxdWVzdF9lbXB0eVwiLFxyXG4gICAgICAgIGRlc2M6IFwiVG9rZW4gcmVxdWVzdCB3YXMgZW1wdHkgYW5kIG5vdCBmb3VuZCBpbiBjYWNoZS5cIlxyXG4gICAgfSxcclxuICAgIGxvZ291dFJlcXVlc3RFbXB0eUVycm9yOiB7XHJcbiAgICAgICAgY29kZTogXCJsb2dvdXRfcmVxdWVzdF9lbXB0eVwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhlIGxvZ291dCByZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZC5cIlxyXG4gICAgfSxcclxuICAgIGludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2NvZGVfY2hhbGxlbmdlX21ldGhvZFwiLFxyXG4gICAgICAgIGRlc2M6IFwiY29kZV9jaGFsbGVuZ2VfbWV0aG9kIHBhc3NlZCBpcyBpbnZhbGlkLiBWYWxpZCB2YWx1ZXMgYXJlIFxcXCJwbGFpblxcXCIgYW5kIFxcXCJTMjU2XFxcIi5cIlxyXG4gICAgfSxcclxuICAgIGludmFsaWRDb2RlQ2hhbGxlbmdlUGFyYW1zOiB7XHJcbiAgICAgICAgY29kZTogXCJwa2NlX3BhcmFtc19taXNzaW5nXCIsXHJcbiAgICAgICAgZGVzYzogXCJCb3RoIHBhcmFtczogY29kZV9jaGFsbGVuZ2UgYW5kIGNvZGVfY2hhbGxlbmdlX21ldGhvZCBhcmUgdG8gYmUgcGFzc2VkIGlmIHRvIGJlIHNlbnQgaW4gdGhlIHJlcXVlc3RcIlxyXG4gICAgfSxcclxuICAgIGtub3duQXV0aG9yaXRpZXNBbmRDbG91ZERpc2NvdmVyeU1ldGFkYXRhOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2tub3duX2F1dGhvcml0aWVzXCIsXHJcbiAgICAgICAgZGVzYzogXCJrbm93bkF1dGhvcml0aWVzIGFuZCBjbG91ZERpc2NvdmVyeU1ldGFkYXRhIGNhbm5vdCBib3RoIGJlIHByb3ZpZGVkLiBQbGVhc2UgcHJvdmlkZSBjbG91ZERpc2NvdmVyeU1ldGFkYXRhIG9iamVjdCBmb3IgQUFELCBrbm93bkF1dGhvcml0aWVzIG90aGVyd2lzZS5cIlxyXG4gICAgfSxcclxuICAgIGludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhOiB7XHJcbiAgICAgICAgY29kZTogXCJpbnZhbGlkX2Nsb3VkX2Rpc2NvdmVyeV9tZXRhZGF0YVwiLFxyXG4gICAgICAgIGRlc2M6IFwiSW52YWxpZCBjbG91ZERpc2NvdmVyeU1ldGFkYXRhIHByb3ZpZGVkLiBNdXN0IGJlIGEgSlNPTiBvYmplY3QgY29udGFpbmluZyB0ZW5hbnRfZGlzY292ZXJ5X2VuZHBvaW50IGFuZCBtZXRhZGF0YSBmaWVsZHNcIlxyXG4gICAgfSxcclxuICAgIHVudHJ1c3RlZEF1dGhvcml0eToge1xyXG4gICAgICAgIGNvZGU6IFwidW50cnVzdGVkX2F1dGhvcml0eVwiLFxyXG4gICAgICAgIGRlc2M6IFwiVGhlIHByb3ZpZGVkIGF1dGhvcml0eSBpcyBub3QgYSB0cnVzdGVkIGF1dGhvcml0eS4gUGxlYXNlIGluY2x1ZGUgdGhpcyBhdXRob3JpdHkgaW4gdGhlIGtub3duQXV0aG9yaXRpZXMgY29uZmlnIHBhcmFtZXRlci5cIlxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGluIGNvbmZpZ3VyYXRpb24gb2YgdGhlIE1TQUwuanMgbGlicmFyeS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgZXh0ZW5kcyBDbGllbnRBdXRoRXJyb3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvck1lc3NhZ2U/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDbGllbnRDb25maWd1cmF0aW9uRXJyb3JcIjtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLnByb3RvdHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRocm93biB3aGVuIHRoZSByZWRpcmVjdCB1cmkgaXMgZW1wdHkgKG5vdCBzZXQgYnkgY2FsbGVyKVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlUmVkaXJlY3RVcmlFbXB0eUVycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5yZWRpcmVjdFVyaU5vdFNldC5jb2RlLFxyXG4gICAgICAgICAgICBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLnJlZGlyZWN0VXJpTm90U2V0LmRlc2MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgcG9zdC1sb2dvdXQgcmVkaXJlY3QgdXJpIGlzIGVtcHR5IChub3Qgc2V0IGJ5IGNhbGxlcilcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVBvc3RMb2dvdXRSZWRpcmVjdFVyaUVtcHR5RXJyb3IoKTogQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLnBvc3RMb2dvdXRVcmlOb3RTZXQuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5wb3N0TG9nb3V0VXJpTm90U2V0LmRlc2MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgY2xhaW1zIHJlcXVlc3QgY291bGQgbm90IGJlIHN1Y2Nlc3NmdWxseSBwYXJzZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUNsYWltc1JlcXVlc3RQYXJzaW5nRXJyb3IoY2xhaW1zUmVxdWVzdFBhcnNlRXJyb3I6IHN0cmluZyk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5jbGFpbXNSZXF1ZXN0UGFyc2luZ0Vycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuY2xhaW1zUmVxdWVzdFBhcnNpbmdFcnJvci5kZXNjfSBHaXZlbiB2YWx1ZTogJHtjbGFpbXNSZXF1ZXN0UGFyc2VFcnJvcn1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgdGhyb3duIGlmIGF1dGhvcml0eSB1cmkgaXMgZ2l2ZW4gYW4gaW5zZWN1cmUgcHJvdG9jb2wuXHJcbiAgICAgKiBAcGFyYW0gdXJsU3RyaW5nXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJbnNlY3VyZUF1dGhvcml0eVVyaUVycm9yKHVybFN0cmluZzogc3RyaW5nKTogQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLmF1dGhvcml0eVVyaUluc2VjdXJlLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuYXV0aG9yaXR5VXJpSW5zZWN1cmUuZGVzY30gR2l2ZW4gVVJJOiAke3VybFN0cmluZ31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gZXJyb3IgdGhyb3duIGlmIFVSTCBzdHJpbmcgZG9lcyBub3QgcGFyc2UgaW50byBzZXBhcmF0ZSBzZWdtZW50cy5cclxuICAgICAqIEBwYXJhbSB1cmxTdHJpbmdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVVybFBhcnNlRXJyb3IodXJsUGFyc2VFcnJvcjogc3RyaW5nKTogQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLnVybFBhcnNlRXJyb3IuY29kZSxcclxuICAgICAgICAgICAgYCR7Q2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS51cmxQYXJzZUVycm9yLmRlc2N9IEdpdmVuIEVycm9yOiAke3VybFBhcnNlRXJyb3J9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIHRocm93biBpZiBVUkwgc3RyaW5nIGlzIGVtcHR5IG9yIG51bGwuXHJcbiAgICAgKiBAcGFyYW0gdXJsU3RyaW5nXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVVcmxFbXB0eUVycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS51cmxFbXB0eUVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UudXJsRW1wdHlFcnJvci5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVycm9yIHRocm93biB3aGVuIHNjb3BlcyBhcmUgbm90IGFuIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gaW5wdXRTY29wZXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVNjb3Blc05vbkFycmF5RXJyb3IoaW5wdXRTY29wZXM6IEFycmF5PHN0cmluZz4pOiBDbGllbnRDb25maWd1cmF0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2Uubm9uQXJyYXlTY29wZXNFcnJvci5jb2RlLFxyXG4gICAgICAgICAgICBgJHtDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLm5vbkFycmF5U2NvcGVzRXJyb3IuZGVzY30gR2l2ZW4gU2NvcGVzOiAke2lucHV0U2NvcGVzfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXJyb3IgdGhyb3duIHdoZW4gc2NvcGVzIGFyZSBlbXB0eS5cclxuICAgICAqIEBwYXJhbSBzY29wZXNWYWx1ZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlRW1wdHlTY29wZXNBcnJheUVycm9yKGlucHV0U2NvcGVzOiBBcnJheTxzdHJpbmc+KTogQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLmVtcHR5U2NvcGVzRXJyb3IuY29kZSxcclxuICAgICAgICAgICAgYCR7Q2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5lbXB0eVNjb3Blc0Vycm9yLmRlc2N9IEdpdmVuIFNjb3BlczogJHtpbnB1dFNjb3Blc31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVycm9yIHRocm93biB3aGVuIGNsaWVudCBpZCBzY29wZSBpcyBub3QgcHJvdmlkZWQgYXMgc2luZ2xlIHNjb3BlLlxyXG4gICAgICogQHBhcmFtIGlucHV0U2NvcGVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVDbGllbnRJZFNpbmdsZVNjb3BlRXJyb3IoaW5wdXRTY29wZXM6IEFycmF5PHN0cmluZz4pOiBDbGllbnRDb25maWd1cmF0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuY2xpZW50SWRTaW5nbGVTY29wZUVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuY2xpZW50SWRTaW5nbGVTY29wZUVycm9yLmRlc2N9IEdpdmVuIFNjb3BlczogJHtpbnB1dFNjb3Blc31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVycm9yIHRocm93biB3aGVuIHByb21wdCBpcyBub3QgYW4gYWxsb3dlZCB0eXBlLlxyXG4gICAgICogQHBhcmFtIHByb21wdFZhbHVlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJbnZhbGlkUHJvbXB0RXJyb3IocHJvbXB0VmFsdWU6IHN0cmluZyk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5pbnZhbGlkUHJvbXB0LmNvZGUsXHJcbiAgICAgICAgICAgIGAke0NsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuaW52YWxpZFByb21wdC5kZXNjfSBHaXZlbiB2YWx1ZTogJHtwcm9tcHRWYWx1ZX1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgZXJyb3IgdGhyb3duIHdoZW4gY2xhaW1zIHBhcmFtZXRlciBpcyBub3QgYSBzdHJpbmdpZmllZCBKU09OIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW52YWxpZENsYWltc1JlcXVlc3RFcnJvcigpOiBDbGllbnRDb25maWd1cmF0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuaW52YWxpZENsYWltc1JlcXVlc3QuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5pbnZhbGlkQ2xhaW1zUmVxdWVzdC5kZXNjKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIHRva2VuIHJlcXVlc3QgaXMgZW1wdHkgYW5kIG5vdGhpbmcgY2FjaGVkIGluIHN0b3JhZ2UuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVFbXB0eUxvZ291dFJlcXVlc3RFcnJvcigpOiBDbGllbnRDb25maWd1cmF0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKFxyXG4gICAgICAgICAgICBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLmxvZ291dFJlcXVlc3RFbXB0eUVycm9yLmNvZGUsXHJcbiAgICAgICAgICAgIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UubG9nb3V0UmVxdWVzdEVtcHR5RXJyb3IuZGVzY1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgZXJyb3Igd2hlbiB0b2tlbiByZXF1ZXN0IGlzIGVtcHR5IGFuZCBub3RoaW5nIGNhY2hlZCBpbiBzdG9yYWdlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlRW1wdHlUb2tlblJlcXVlc3RFcnJvcigpOiBDbGllbnRDb25maWd1cmF0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKFxyXG4gICAgICAgICAgICBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLnRva2VuUmVxdWVzdEVtcHR5RXJyb3IuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS50b2tlblJlcXVlc3RFbXB0eUVycm9yLmRlc2NcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gYW4gaW52YWxpZCBjb2RlX2NoYWxsZW5nZV9tZXRob2QgaXMgcGFzc2VkIGJ5IHRoZSB1c2VyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZEVycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoXHJcbiAgICAgICAgICAgIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5pbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZC5kZXNjXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBlcnJvciB3aGVuIGJvdGggcGFyYW1zOiBjb2RlX2NoYWxsZW5nZSBhbmQgY29kZV9jaGFsbGVuZ2VfbWV0aG9kIGFyZSBub3QgcGFzc2VkIHRvZ2V0aGVyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJbnZhbGlkQ29kZUNoYWxsZW5nZVBhcmFtc0Vycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoXHJcbiAgICAgICAgICAgIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UuaW52YWxpZENvZGVDaGFsbGVuZ2VQYXJhbXMuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5pbnZhbGlkQ29kZUNoYWxsZW5nZVBhcmFtcy5kZXNjXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRocm93cyBhbiBlcnJvciB3aGVuIHRoZSB1c2VyIHBhc3NlcyBib3RoIGtub3duQXV0aG9yaXRpZXMgYW5kIGNsb3VkRGlzY292ZXJ5TWV0YWRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUtub3duQXV0aG9yaXRpZXNDbG91ZERpc2NvdmVyeU1ldGFkYXRhRXJyb3IoKTogQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IENsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLmtub3duQXV0aG9yaXRpZXNBbmRDbG91ZERpc2NvdmVyeU1ldGFkYXRhLmNvZGUsXHJcbiAgICAgICAgICAgIENsaWVudENvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2Uua25vd25BdXRob3JpdGllc0FuZENsb3VkRGlzY292ZXJ5TWV0YWRhdGEuZGVzYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3Igd2hlbiB0aGUgdXNlciBwYXNzZXMgaW52YWxpZCBjbG91ZERpc2NvdmVyeU1ldGFkYXRhXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJbnZhbGlkQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YUVycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS5pbnZhbGlkQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YS5jb2RlLFxyXG4gICAgICAgICAgICBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLmludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhLmRlc2MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gcHJvdmlkZWQgYXV0aG9yaXR5IGlzIG5vdCBhIG1lbWJlciBvZiB0aGUgdHJ1c3RlZCBob3N0IGxpc3RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVVudHJ1c3RlZEF1dGhvcml0eUVycm9yKCk6IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS51bnRydXN0ZWRBdXRob3JpdHkuY29kZSxcclxuICAgICAgICAgICAgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yTWVzc2FnZS51bnRydXN0ZWRBdXRob3JpdHkuZGVzYyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBTY29wZVNldCBjbGFzcyBjcmVhdGVzIGEgc2V0IG9mIHNjb3Blcy4gU2NvcGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlLCB1bmlxdWUgdmFsdWVzLCBzbyB0aGUgU2V0IG9iamVjdCBpbiBKUyBtYWtlc1xyXG4gKiB0aGUgbW9zdCBzZW5zZSB0byBpbXBsZW1lbnQgZm9yIHRoaXMgY2xhc3MuIEFsbCBzY29wZXMgYXJlIHRyaW1tZWQgYW5kIGNvbnZlcnRlZCB0byBsb3dlciBjYXNlIHN0cmluZ3MgaW4gaW50ZXJzZWN0aW9uIGFuZCB1bmlvbiBmdW5jdGlvbnNcclxuICogdG8gZW5zdXJlIHVuaXF1ZW5lc3Mgb2Ygc3RyaW5ncy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTY29wZVNldCB7XHJcbiAgICAvLyBTY29wZXMgYXMgYSBTZXQgb2Ygc3RyaW5nc1xyXG4gICAgcHJpdmF0ZSBzY29wZXM6IFNldDxzdHJpbmc+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlucHV0U2NvcGVzOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgLy8gRmlsdGVyIGVtcHR5IHN0cmluZyBhbmQgbnVsbC91bmRlZmluZWQgYXJyYXkgaXRlbXNcclxuICAgICAgICBjb25zdCBzY29wZUFyciA9IGlucHV0U2NvcGVzID8gU3RyaW5nVXRpbHMudHJpbUFycmF5RW50cmllcyhbLi4uaW5wdXRTY29wZXNdKSA6IFtdO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkSW5wdXQgPSBzY29wZUFyciA/IFN0cmluZ1V0aWxzLnJlbW92ZUVtcHR5U3RyaW5nc0Zyb21BcnJheShzY29wZUFycikgOiBbXTtcclxuXHJcbiAgICAgICAgLy8gVmFsaWRhdGUgYW5kIGZpbHRlciBzY29wZXMgKHZhbGlkYXRlIGZ1bmN0aW9uIHRocm93cyBpZiB2YWxpZGF0aW9uIGZhaWxzKVxyXG4gICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dFNjb3BlcyhmaWx0ZXJlZElucHV0KTtcclxuXHJcbiAgICAgICAgdGhpcy5zY29wZXMgPSBuZXcgU2V0PHN0cmluZz4oKTsgLy8gSXRlcmF0b3IgaW4gY29uc3RydWN0b3Igbm90IHN1cHBvcnRlZCBieSBJRTExXHJcbiAgICAgICAgZmlsdGVyZWRJbnB1dC5mb3JFYWNoKHNjb3BlID0+IHRoaXMuc2NvcGVzLmFkZChzY29wZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIFNjb3BlU2V0IGZyb20gc3BhY2UtZGVsaW1pdGVkIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIGlucHV0U2NvcGVTdHJpbmdcclxuICAgICAqIEBwYXJhbSBhcHBDbGllbnRJZFxyXG4gICAgICogQHBhcmFtIHNjb3Blc1JlcXVpcmVkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKGlucHV0U2NvcGVTdHJpbmc6IHN0cmluZyk6IFNjb3BlU2V0IHtcclxuICAgICAgICBpbnB1dFNjb3BlU3RyaW5nID0gaW5wdXRTY29wZVN0cmluZyB8fCBcIlwiO1xyXG4gICAgICAgIGNvbnN0IGlucHV0U2NvcGVzOiBBcnJheTxzdHJpbmc+ID0gaW5wdXRTY29wZVN0cmluZy5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTY29wZVNldChpbnB1dFNjb3Blcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHZhbGlkYXRlIHRoZSBzY29wZXMgaW5wdXQgcGFyYW1ldGVyIHJlcXVlc3RlZCAgYnkgdGhlIGRldmVsb3Blci5cclxuICAgICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gaW5wdXRTY29wZXMgLSBEZXZlbG9wZXIgcmVxdWVzdGVkIHBlcm1pc3Npb25zLiBOb3QgYWxsIHNjb3BlcyBhcmUgZ3VhcmFudGVlZCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgYWNjZXNzIHRva2VuIHJldHVybmVkLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBzY29wZXNSZXF1aXJlZCAtIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzY29wZXMgYXJyYXkgaXMgcmVxdWlyZWQgb3Igbm90XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdmFsaWRhdGVJbnB1dFNjb3BlcyhpbnB1dFNjb3BlczogQXJyYXk8c3RyaW5nPik6IHZvaWQge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHNjb3BlcyBhcmUgcmVxdWlyZWQgYnV0IG5vdCBnaXZlbiBvciBpcyBhbiBlbXB0eSBhcnJheVxyXG4gICAgICAgIGlmICghaW5wdXRTY29wZXMgfHwgaW5wdXRTY29wZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlRW1wdHlTY29wZXNBcnJheUVycm9yKGlucHV0U2NvcGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIGdpdmVuIHNjb3BlIGlzIHByZXNlbnQgaW4gdGhpcyBzZXQgb2Ygc2NvcGVzLlxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5zU2NvcGUoc2NvcGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZVNjb3BlcyA9IHRoaXMucHJpbnRTY29wZXNMb3dlckNhc2UoKS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlU2NvcGVzU2V0ID0gbmV3IFNjb3BlU2V0KGxvd2VyQ2FzZVNjb3Blcyk7XHJcbiAgICAgICAgLy8gY29tcGFyZSBsb3dlcmNhc2Ugc2NvcGVzXHJcbiAgICAgICAgcmV0dXJuICFTdHJpbmdVdGlscy5pc0VtcHR5KHNjb3BlKSA/IGxvd2VyQ2FzZVNjb3Blc1NldC5zY29wZXMuaGFzKHNjb3BlLnRvTG93ZXJDYXNlKCkpIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIHNldCBvZiBzY29wZXMgaXMgcHJlc2VudCBpbiB0aGlzIHNldCBvZiBzY29wZXMuXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVTZXRcclxuICAgICAqL1xyXG4gICAgY29udGFpbnNTY29wZVNldChzY29wZVNldDogU2NvcGVTZXQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXNjb3BlU2V0IHx8IHNjb3BlU2V0LnNjb3Blcy5zaXplIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3Blcy5zaXplID49IHNjb3BlU2V0LnNjb3Blcy5zaXplICYmIHNjb3BlU2V0LmFzQXJyYXkoKS5ldmVyeShzY29wZSA9PiB0aGlzLmNvbnRhaW5zU2NvcGUoc2NvcGUpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBzZXQgb2Ygc2NvcGVzIGNvbnRhaW5zIG9ubHkgdGhlIGRlZmF1bHRzXHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5zT25seURlZmF1bHRTY29wZXMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRTY29wZUNvdW50ID0gMDtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluc1Njb3BlKENvbnN0YW50cy5PUEVOSURfU0NPUEUpKSB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRTY29wZUNvdW50ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zU2NvcGUoQ29uc3RhbnRzLlBST0ZJTEVfU0NPUEUpKSB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRTY29wZUNvdW50ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5zU2NvcGUoQ29uc3RhbnRzLk9GRkxJTkVfQUNDRVNTX1NDT1BFKSkge1xyXG4gICAgICAgICAgICBkZWZhdWx0U2NvcGVDb3VudCArPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGVzLnNpemUgPT09IGRlZmF1bHRTY29wZUNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyBzaW5nbGUgc2NvcGUgaWYgcGFzc2VkXHJcbiAgICAgKiBAcGFyYW0gbmV3U2NvcGVcclxuICAgICAqL1xyXG4gICAgYXBwZW5kU2NvcGUobmV3U2NvcGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShuZXdTY29wZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zY29wZXMuYWRkKG5ld1Njb3BlLnRyaW0oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyBtdWx0aXBsZSBzY29wZXMgaWYgcGFzc2VkXHJcbiAgICAgKiBAcGFyYW0gbmV3U2NvcGVzXHJcbiAgICAgKi9cclxuICAgIGFwcGVuZFNjb3BlcyhuZXdTY29wZXM6IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBuZXdTY29wZXMuZm9yRWFjaChuZXdTY29wZSA9PiB0aGlzLmFwcGVuZFNjb3BlKG5ld1Njb3BlKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlQXBwZW5kU2NvcGVTZXRFcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnQgZnJvbSBzZXQgb2Ygc2NvcGVzLlxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVNjb3BlKHNjb3BlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShzY29wZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZVJlbW92ZUVtcHR5U2NvcGVGcm9tU2V0RXJyb3Ioc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjb3Blcy5kZWxldGUoc2NvcGUudHJpbSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgZGVmYXVsdCBzY29wZXMgZnJvbSBzZXQgb2Ygc2NvcGVzXHJcbiAgICAgKiBQcmltYXJpbHkgdXNlZCB0byBwcmV2ZW50IGNhY2hlIG1pc3NlcyBpZiB0aGUgZGVmYXVsdCBzY29wZXMgYXJlIG5vdCByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRGVmYXVsdFNjb3BlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNjb3Blcy5kZWxldGUoQ29uc3RhbnRzLk9GRkxJTkVfQUNDRVNTX1NDT1BFKTtcclxuICAgICAgICB0aGlzLnNjb3Blcy5kZWxldGUoQ29uc3RhbnRzLk9QRU5JRF9TQ09QRSk7XHJcbiAgICAgICAgdGhpcy5zY29wZXMuZGVsZXRlKENvbnN0YW50cy5QUk9GSUxFX1NDT1BFKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbWJpbmVzIGFuIGFycmF5IG9mIHNjb3BlcyB3aXRoIHRoZSBjdXJyZW50IHNldCBvZiBzY29wZXMuXHJcbiAgICAgKiBAcGFyYW0gb3RoZXJTY29wZXNcclxuICAgICAqL1xyXG4gICAgdW5pb25TY29wZVNldHMob3RoZXJTY29wZXM6IFNjb3BlU2V0KTogU2V0PHN0cmluZz4ge1xyXG4gICAgICAgIGlmICghb3RoZXJTY29wZXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUVtcHR5SW5wdXRTY29wZVNldEVycm9yKG90aGVyU2NvcGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdW5pb25TY29wZXMgPSBuZXcgU2V0PHN0cmluZz4oKTsgLy8gSXRlcmF0b3IgaW4gY29uc3RydWN0b3Igbm90IHN1cHBvcnRlZCBpbiBJRTExXHJcbiAgICAgICAgb3RoZXJTY29wZXMuc2NvcGVzLmZvckVhY2goc2NvcGUgPT4gdW5pb25TY29wZXMuYWRkKHNjb3BlLnRvTG93ZXJDYXNlKCkpKTtcclxuICAgICAgICB0aGlzLnNjb3Blcy5mb3JFYWNoKHNjb3BlID0+IHVuaW9uU2NvcGVzLmFkZChzY29wZS50b0xvd2VyQ2FzZSgpKSk7XHJcbiAgICAgICAgcmV0dXJuIHVuaW9uU2NvcGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgc2NvcGVzIGludGVyc2VjdCBiZXR3ZWVuIHRoaXMgc2V0IGFuZCBhbm90aGVyLlxyXG4gICAgICogQHBhcmFtIG90aGVyU2NvcGVzXHJcbiAgICAgKi9cclxuICAgIGludGVyc2VjdGluZ1Njb3BlU2V0cyhvdGhlclNjb3BlczogU2NvcGVTZXQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIW90aGVyU2NvcGVzKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVFbXB0eUlucHV0U2NvcGVTZXRFcnJvcihvdGhlclNjb3Blcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB1bmlvblNjb3BlcyA9IHRoaXMudW5pb25TY29wZVNldHMob3RoZXJTY29wZXMpO1xyXG5cclxuICAgICAgICAvLyBEbyBub3QgYWxsb3cgZGVmYXVsdCBzY29wZXMgdG8gYmUgdGhlIG9ubHkgaW50ZXJzZWN0aW5nIHNjb3Blc1xyXG4gICAgICAgIGlmICghb3RoZXJTY29wZXMuY29udGFpbnNPbmx5RGVmYXVsdFNjb3BlcygpKSB7XHJcbiAgICAgICAgICAgIG90aGVyU2NvcGVzLnJlbW92ZURlZmF1bHRTY29wZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2l6ZU90aGVyU2NvcGVzID0gb3RoZXJTY29wZXMuZ2V0U2NvcGVDb3VudCgpO1xyXG4gICAgICAgIGNvbnN0IHNpemVUaGlzU2NvcGVzID0gdGhpcy5nZXRTY29wZUNvdW50KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZVVuaW9uU2NvcGVzID0gdW5pb25TY29wZXMuc2l6ZTtcclxuICAgICAgICByZXR1cm4gc2l6ZVVuaW9uU2NvcGVzIDwgKHNpemVUaGlzU2NvcGVzICsgc2l6ZU90aGVyU2NvcGVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgc2l6ZSBvZiBzZXQgb2Ygc2NvcGVzLlxyXG4gICAgICovXHJcbiAgICBnZXRTY29wZUNvdW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGVzLnNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzY29wZXMgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBhc0FycmF5KCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IGFycmF5OiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICAgICAgdGhpcy5zY29wZXMuZm9yRWFjaCh2YWwgPT4gYXJyYXkucHVzaCh2YWwpKTtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludHMgc2NvcGVzIGludG8gYSBzcGFjZS1kZWxpbWl0ZWQgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIHByaW50U2NvcGVzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlQXJyID0gdGhpcy5hc0FycmF5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzY29wZUFyci5qb2luKFwiIFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludHMgc2NvcGVzIGludG8gYSBzcGFjZS1kZWxpbWl0ZWQgbG93ZXItY2FzZSBzdHJpbmcgKHVzZWQgZm9yIGNhY2hpbmcpXHJcbiAgICAgKi9cclxuICAgIHByaW50U2NvcGVzTG93ZXJDYXNlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbnRTY29wZXMoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEF1dGhvcml0eSB0eXBlcyBzdXBwb3J0ZWQgYnkgTVNBTC5cclxuICovXHJcbmV4cG9ydCBlbnVtIEF1dGhvcml0eVR5cGUge1xyXG4gICAgRGVmYXVsdCxcclxuICAgIEFkZnNcclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2UgfSBmcm9tIFwiLi4vcmVzcG9uc2UvU2VydmVyQXV0aG9yaXphdGlvbkNvZGVSZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgSVVyaSB9IGZyb20gXCIuL0lVcmlcIjtcclxuaW1wb3J0IHsgQUFEQXV0aG9yaXR5Q29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIFVybCBvYmplY3QgY2xhc3Mgd2hpY2ggY2FuIHBlcmZvcm0gdmFyaW91cyB0cmFuc2Zvcm1hdGlvbnMgb24gdXJsIHN0cmluZ3MuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVXJsU3RyaW5nIHtcclxuXHJcbiAgICAvLyBpbnRlcm5hbCB1cmwgc3RyaW5nIGZpZWxkXHJcbiAgICBwcml2YXRlIF91cmxTdHJpbmc6IHN0cmluZztcclxuICAgIHB1YmxpYyBnZXQgdXJsU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VybFN0cmluZztcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl91cmxTdHJpbmcgPSB1cmw7XHJcbiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzRW1wdHkodGhpcy5fdXJsU3RyaW5nKSkge1xyXG4gICAgICAgICAgICAvLyBUaHJvd3MgZXJyb3IgaWYgdXJsIGlzIGVtcHR5XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVVcmxFbXB0eUVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eSh0aGlzLmdldEhhc2goKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXJsU3RyaW5nID0gVXJsU3RyaW5nLmNhbm9uaWNhbGl6ZVVyaSh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZSB1cmxzIGFyZSBsb3dlciBjYXNlIGFuZCBlbmQgd2l0aCBhIC8gY2hhcmFjdGVyLlxyXG4gICAgICogQHBhcmFtIHVybCBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbm9uaWNhbGl6ZVVyaSh1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh1cmwgJiYgIVN0cmluZ1V0aWxzLmVuZHNXaXRoKHVybCwgXCIvXCIpKSB7XHJcbiAgICAgICAgICAgIHVybCArPSBcIi9cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaHJvd3MgaWYgdXJsU3RyaW5nIHBhc3NlZCBpcyBub3QgYSB2YWxpZCBhdXRob3JpdHkgVVJJIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgdmFsaWRhdGVBc1VyaSgpOiB2b2lkIHtcclxuICAgICAgICAvLyBBdHRlbXB0cyB0byBwYXJzZSB1cmwgZm9yIHVyaSBjb21wb25lbnRzXHJcbiAgICAgICAgbGV0IGNvbXBvbmVudHM7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29tcG9uZW50cyA9IHRoaXMuZ2V0VXJsQ29tcG9uZW50cygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZVVybFBhcnNlRXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaHJvdyBlcnJvciBpZiBVUkkgb3IgcGF0aCBzZWdtZW50cyBhcmUgbm90IHBhcnNlYWJsZS5cclxuICAgICAgICBpZiAoIWNvbXBvbmVudHMuSG9zdE5hbWVBbmRQb3J0IHx8ICFjb21wb25lbnRzLlBhdGhTZWdtZW50cykge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlVXJsUGFyc2VFcnJvcihgR2l2ZW4gdXJsIHN0cmluZzogJHt0aGlzLnVybFN0cmluZ31gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRocm93IGVycm9yIGlmIHVyaSBpcyBpbnNlY3VyZS5cclxuICAgICAgICBpZighY29tcG9uZW50cy5Qcm90b2NvbCB8fCBjb21wb25lbnRzLlByb3RvY29sLnRvTG93ZXJDYXNlKCkgIT09IFwiaHR0cHM6XCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZUluc2VjdXJlQXV0aG9yaXR5VXJpRXJyb3IodGhpcy51cmxTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIHJlbW92ZSBxdWVyeSBzdHJpbmcgcGFyYW1zIGZyb20gdXJsLiBSZXR1cm5zIHRoZSBuZXcgdXJsLlxyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICogQHBhcmFtIG5hbWVcclxuICAgICAqL1xyXG4gICAgdXJsUmVtb3ZlUXVlcnlTdHJpbmdQYXJhbWV0ZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKFwiKFxcXFwmXCIgKyBuYW1lICsgXCI9KVteXFwmXStcIik7XHJcbiAgICAgICAgdGhpcy5fdXJsU3RyaW5nID0gdGhpcy51cmxTdHJpbmcucmVwbGFjZShyZWdleCwgXCJcIik7XHJcbiAgICAgICAgLy8gbmFtZT12YWx1ZSZcclxuICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoXCIoXCIgKyBuYW1lICsgXCI9KVteXFwmXSsmXCIpO1xyXG4gICAgICAgIHRoaXMuX3VybFN0cmluZyA9IHRoaXMudXJsU3RyaW5nLnJlcGxhY2UocmVnZXgsIFwiXCIpO1xyXG4gICAgICAgIC8vIG5hbWU9dmFsdWVcclxuICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoXCIoXCIgKyBuYW1lICsgXCI9KVteXFwmXStcIik7XHJcbiAgICAgICAgdGhpcy5fdXJsU3RyaW5nID0gdGhpcy51cmxTdHJpbmcucmVwbGFjZShyZWdleCwgXCJcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVIYXNoRnJvbVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFVybFN0cmluZy5jYW5vbmljYWxpemVVcmkodXJsLnNwbGl0KFwiI1wiKVswXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHVybCBsaWtlIGh0dHBzOi8vYTpiL2NvbW1vbi9kP2U9ZiNnLCBhbmQgYSB0ZW5hbnRJZCwgcmV0dXJucyBodHRwczovL2E6Yi90ZW5hbnRJZC9kXHJcbiAgICAgKiBAcGFyYW0gaHJlZiBUaGUgdXJsXHJcbiAgICAgKiBAcGFyYW0gdGVuYW50SWQgVGhlIHRlbmFudCBpZCB0byByZXBsYWNlXHJcbiAgICAgKi9cclxuICAgIHJlcGxhY2VUZW5hbnRQYXRoKHRlbmFudElkOiBzdHJpbmcpOiBVcmxTdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHVybE9iamVjdCA9IHRoaXMuZ2V0VXJsQ29tcG9uZW50cygpO1xyXG4gICAgICAgIGNvbnN0IHBhdGhBcnJheSA9IHVybE9iamVjdC5QYXRoU2VnbWVudHM7XHJcbiAgICAgICAgaWYgKHRlbmFudElkICYmIChwYXRoQXJyYXkubGVuZ3RoICE9PSAwICYmIChwYXRoQXJyYXlbMF0gPT09IEFBREF1dGhvcml0eUNvbnN0YW50cy5DT01NT04gfHwgcGF0aEFycmF5WzBdID09PSBBQURBdXRob3JpdHlDb25zdGFudHMuT1JHQU5JWkFUSU9OUykpKSB7XHJcbiAgICAgICAgICAgIHBhdGhBcnJheVswXSA9IHRlbmFudElkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gVXJsU3RyaW5nLmNvbnN0cnVjdEF1dGhvcml0eVVyaUZyb21PYmplY3QodXJsT2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGFuY2hvciBwYXJ0KCMpIG9mIHRoZSBVUkxcclxuICAgICAqL1xyXG4gICAgZ2V0SGFzaCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBVcmxTdHJpbmcucGFyc2VIYXNoKHRoaXMudXJsU3RyaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBvdXQgdGhlIGNvbXBvbmVudHMgZnJvbSBhIHVybCBzdHJpbmcuXHJcbiAgICAgKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgdmFyaW91cyBjb21wb25lbnRzLiBQbGVhc2UgY2FjaGUgdGhpcyB2YWx1ZSBpbnN0ZWQgb2YgY2FsbGluZyB0aGlzIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHVybC5cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsQ29tcG9uZW50cygpOiBJVXJpIHtcclxuICAgICAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9jdXJ0aXN6LzExMTM5YjJjZmNhZWY0YTI2MWUwXHJcbiAgICAgICAgY29uc3QgcmVnRXggPSBSZWdFeHAoXCJeKChbXjovPyNdKyk6KT8oLy8oW14vPyNdKikpPyhbXj8jXSopKFxcXFw/KFteI10qKSk/KCMoLiopKT9cIik7XHJcblxyXG4gICAgICAgIC8vIElmIHVybCBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggcmVnRXgsIHdlIHRocm93IGFuIGVycm9yXHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnVybFN0cmluZy5tYXRjaChyZWdFeCk7XHJcbiAgICAgICAgaWYgKCFtYXRjaCkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlVXJsUGFyc2VFcnJvcihgR2l2ZW4gdXJsIHN0cmluZzogJHt0aGlzLnVybFN0cmluZ31gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVybCBjb21wb25lbnQgb2JqZWN0XHJcbiAgICAgICAgY29uc3QgdXJsQ29tcG9uZW50cyA9IHtcclxuICAgICAgICAgICAgUHJvdG9jb2w6IG1hdGNoWzFdLFxyXG4gICAgICAgICAgICBIb3N0TmFtZUFuZFBvcnQ6IG1hdGNoWzRdLFxyXG4gICAgICAgICAgICBBYnNvbHV0ZVBhdGg6IG1hdGNoWzVdLFxyXG4gICAgICAgICAgICBRdWVyeVN0cmluZzogbWF0Y2hbN11cclxuICAgICAgICB9IGFzIElVcmk7XHJcblxyXG4gICAgICAgIGxldCBwYXRoU2VnbWVudHMgPSB1cmxDb21wb25lbnRzLkFic29sdXRlUGF0aC5zcGxpdChcIi9cIik7XHJcbiAgICAgICAgcGF0aFNlZ21lbnRzID0gcGF0aFNlZ21lbnRzLmZpbHRlcigodmFsKSA9PiB2YWwgJiYgdmFsLmxlbmd0aCA+IDApOyAvLyByZW1vdmUgZW1wdHkgZWxlbWVudHNcclxuICAgICAgICB1cmxDb21wb25lbnRzLlBhdGhTZWdtZW50cyA9IHBhdGhTZWdtZW50cztcclxuXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHVybENvbXBvbmVudHMuUXVlcnlTdHJpbmcpICYmIHVybENvbXBvbmVudHMuUXVlcnlTdHJpbmcuZW5kc1dpdGgoXCIvXCIpKSB7XHJcbiAgICAgICAgICAgIHVybENvbXBvbmVudHMuUXVlcnlTdHJpbmcgPSB1cmxDb21wb25lbnRzLlF1ZXJ5U3RyaW5nLnN1YnN0cmluZygwLCB1cmxDb21wb25lbnRzLlF1ZXJ5U3RyaW5nLmxlbmd0aC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybENvbXBvbmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldERvbWFpbkZyb21VcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHJlZ0V4ID0gUmVnRXhwKFwiXihbXjovPyNdKzovLyk/KFteLz8jXSopXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaChyZWdFeCk7XHJcblxyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZVVybFBhcnNlRXJyb3IoYEdpdmVuIHVybCBzdHJpbmc6ICR7dXJsfWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoWzJdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBoYXNoIHN0cmluZyBmcm9tIGdpdmVuIHN0cmluZy4gUmV0dXJucyBlbXB0eSBzdHJpbmcgaWYgbm8gaGFzaCBzeW1ib2wgaXMgZm91bmQuXHJcbiAgICAgKiBAcGFyYW0gaGFzaFN0cmluZyBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHBhcnNlSGFzaChoYXNoU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGhhc2hJbmRleDEgPSBoYXNoU3RyaW5nLmluZGV4T2YoXCIjXCIpO1xyXG4gICAgICAgIGNvbnN0IGhhc2hJbmRleDIgPSBoYXNoU3RyaW5nLmluZGV4T2YoXCIjL1wiKTtcclxuICAgICAgICBpZiAoaGFzaEluZGV4MiA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYXNoU3RyaW5nLnN1YnN0cmluZyhoYXNoSW5kZXgyICsgMik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoYXNoSW5kZXgxID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhhc2hTdHJpbmcuc3Vic3RyaW5nKGhhc2hJbmRleDEgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbnN0cnVjdEF1dGhvcml0eVVyaUZyb21PYmplY3QodXJsT2JqZWN0OiBJVXJpKTogVXJsU3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gbmV3IFVybFN0cmluZyh1cmxPYmplY3QuUHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxPYmplY3QuSG9zdE5hbWVBbmRQb3J0ICsgXCIvXCIgKyB1cmxPYmplY3QuUGF0aFNlZ21lbnRzLmpvaW4oXCIvXCIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgVVJMIGhhc2ggYXMgc2VydmVyIGF1dGggY29kZSByZXNwb25zZSBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXREZXNlcmlhbGl6ZWRIYXNoKGhhc2g6IHN0cmluZyk6IFNlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2Uge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGdpdmVuIGhhc2ggaXMgZW1wdHlcclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShoYXNoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFN0cmlwIHRoZSAjIHN5bWJvbCBpZiBwcmVzZW50XHJcbiAgICAgICAgY29uc3QgcGFyc2VkSGFzaCA9IFVybFN0cmluZy5wYXJzZUhhc2goaGFzaCk7XHJcbiAgICAgICAgLy8gSWYgIyBzeW1ib2wgd2FzIG5vdCBwcmVzZW50LCBhYm92ZSB3aWxsIHJldHVybiBlbXB0eSBzdHJpbmcsIHNvIGdpdmUgb3JpZ2luYWwgaGFzaCB2YWx1ZVxyXG4gICAgICAgIGNvbnN0IGRlc2VyaWFsaXplZEhhc2g6IFNlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2UgPSBTdHJpbmdVdGlscy5xdWVyeVN0cmluZ1RvT2JqZWN0PFNlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2U+KFN0cmluZ1V0aWxzLmlzRW1wdHkocGFyc2VkSGFzaCkgPyBoYXNoIDogcGFyc2VkSGFzaCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgZGVzZXJpYWxpemF0aW9uIGRpZG4ndCB3b3JrXHJcbiAgICAgICAgaWYgKCFkZXNlcmlhbGl6ZWRIYXNoKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVIYXNoTm90RGVzZXJpYWxpemVkRXJyb3IoSlNPTi5zdHJpbmdpZnkoZGVzZXJpYWxpemVkSGFzaCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVkSGFzaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHRoZSBoYXNoIG9mIHRoZSBVUkwgc3RyaW5nIGNvbnRhaW5zIGtub3duIHByb3BlcnRpZXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGhhc2hDb250YWluc0tub3duUHJvcGVydGllcyhoYXNoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShoYXNoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzOiBTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZVJlc3BvbnNlID0gVXJsU3RyaW5nLmdldERlc2VyaWFsaXplZEhhc2goaGFzaCk7XHJcbiAgICAgICAgcmV0dXJuICEhKFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmNvZGUgfHxcclxuICAgICAgICAgICAgcGFyYW1ldGVycy5lcnJvcl9kZXNjcmlwdGlvbiB8fFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmVycm9yIHx8XHJcbiAgICAgICAgICAgIHBhcmFtZXRlcnMuc3RhdGVcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBJTmV0d29ya01vZHVsZSB9IGZyb20gXCIuLi9uZXR3b3JrL0lOZXR3b3JrTW9kdWxlXCI7XHJcbmltcG9ydCB7IENsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZSB9IGZyb20gXCIuL0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBUcnVzdGVkSG9zdExpc3RUeXBlIH0gZnJvbSBcIi4vVHJ1c3RlZEhvc3RMaXN0VHlwZVwiO1xyXG5pbXBvcnQgeyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yXCI7XHJcbmltcG9ydCB7IENsb3VkRGlzY292ZXJ5TWV0YWRhdGEgfSBmcm9tIFwiLi9DbG91ZERpc2NvdmVyeU1ldGFkYXRhXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IFVybFN0cmluZyB9IGZyb20gXCIuLi91cmwvVXJsU3RyaW5nXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVHJ1c3RlZEF1dGhvcml0eSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBUcnVzdGVkSG9zdExpc3Q6IFRydXN0ZWRIb3N0TGlzdFR5cGUgPSB7fTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YSBvYmplY3QgZnJvbSBrbm93bkF1dGhvcml0aWVzIG9yIGNsb3VkRGlzY292ZXJ5TWV0YWRhdGEgcGFzc2VkIGludG8gdGhlIGFwcCBjb25maWdcclxuICAgICAqIEBwYXJhbSBrbm93bkF1dGhvcml0aWVzIFxyXG4gICAgICogQHBhcmFtIGNsb3VkRGlzY292ZXJ5TWV0YWRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldFRydXN0ZWRBdXRob3JpdGllc0Zyb21Db25maWcoa25vd25BdXRob3JpdGllczogQXJyYXk8c3RyaW5nPiwgY2xvdWREaXNjb3ZlcnlNZXRhZGF0YTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdldFRydXN0ZWRIb3N0TGlzdCgpLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGlmIChrbm93bkF1dGhvcml0aWVzLmxlbmd0aCA+IDAgJiYgIVN0cmluZ1V0aWxzLmlzRW1wdHkoY2xvdWREaXNjb3ZlcnlNZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVLbm93bkF1dGhvcml0aWVzQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YUVycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YUZyb21Lbm93bkF1dGhvcml0aWVzKGtub3duQXV0aG9yaXRpZXMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChjbG91ZERpc2NvdmVyeU1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkTWV0YWRhdGEgPSBKU09OLnBhcnNlKGNsb3VkRGlzY292ZXJ5TWV0YWRhdGEpIGFzIENsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVDbG91ZERpc2NvdmVyeU1ldGFkYXRhKHBhcnNlZE1ldGFkYXRhLm1ldGFkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZUludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhRXJyb3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byBnZXQgbWV0YWRhdGEgZnJvbSBuZXR3b3JrIGlmIENsb3VkRGlzY292ZXJ5TWV0YWRhdGEgd2FzIG5vdCBwb3B1bGF0ZWQgYnkgY29uZmlnXHJcbiAgICAgKiBAcGFyYW0gbmV0d29ya0ludGVyZmFjZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBzZXRUcnVzdGVkQXV0aG9yaXRpZXNGcm9tTmV0d29yayhhdXRob3JpdHlUb1ZlcmlmeTogVXJsU3RyaW5nLCBuZXR3b3JrSW50ZXJmYWNlOiBJTmV0d29ya01vZHVsZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlRGlzY292ZXJ5RW5kcG9pbnQgPSBgJHtDb25zdGFudHMuQUFEX0lOU1RBTkNFX0RJU0NPVkVSWV9FTkRQVH0ke2F1dGhvcml0eVRvVmVyaWZ5LnVybFN0cmluZ31vYXV0aDIvdjIuMC9hdXRob3JpemVgO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbmV0d29ya0ludGVyZmFjZS5zZW5kR2V0UmVxdWVzdEFzeW5jPENsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZT4oaW5zdGFuY2VEaXNjb3ZlcnlFbmRwb2ludCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gcmVzcG9uc2UuYm9keS5tZXRhZGF0YTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YShtZXRhZGF0YSk7XHJcbiAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhvc3QgPSBhdXRob3JpdHlUb1ZlcmlmeS5nZXRVcmxDb21wb25lbnRzKCkuSG9zdE5hbWVBbmRQb3J0O1xyXG4gICAgICAgIGlmICh0aGlzLmdldFRydXN0ZWRIb3N0TGlzdCgpLmxlbmd0aCA+IDAgJiYgIXRoaXMuSXNJblRydXN0ZWRIb3N0TGlzdChob3N0KSkge1xyXG4gICAgICAgICAgICAvLyBDdXN0b20gRG9tYWluIHNjZW5hcmlvLCBob3N0IGlzIHRydXN0ZWQgYmVjYXVzZSBJbnN0YW5jZSBEaXNjb3ZlcnkgY2FsbCBzdWNjZWVkZWQgXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YUZyb21Lbm93bkF1dGhvcml0aWVzKFtob3N0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1ldGFkYXRhIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNhdmVDbG91ZERpc2NvdmVyeU1ldGFkYXRhKG1ldGFkYXRhOiBBcnJheTxDbG91ZERpc2NvdmVyeU1ldGFkYXRhPik6IHZvaWQge1xyXG4gICAgICAgIG1ldGFkYXRhLmZvckVhY2goZnVuY3Rpb24oZW50cnk6IENsb3VkRGlzY292ZXJ5TWV0YWRhdGEpe1xyXG4gICAgICAgICAgICBjb25zdCBhdXRob3JpdGllcyA9IGVudHJ5LmFsaWFzZXM7XHJcbiAgICAgICAgICAgIGF1dGhvcml0aWVzLmZvckVhY2goZnVuY3Rpb24oYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBUcnVzdGVkQXV0aG9yaXR5LlRydXN0ZWRIb3N0TGlzdFthdXRob3JpdHkudG9Mb3dlckNhc2UoKV0gPSBlbnRyeTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBnZW5lcmljIG1ldGFkYXRhIG9iamVjdCBmb3IgZWFjaCBob3N0IHBhc3NlZCB0byBrbm93bkF1dGhvcml0aWVzLlxyXG4gICAgICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGZvciBCMkMgb3IgQURGUyBzY2VuYXJpb3NcclxuICAgICAqIEBwYXJhbSBrbm93bkF1dGhvcml0aWVzIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUNsb3VkRGlzY292ZXJ5TWV0YWRhdGFGcm9tS25vd25BdXRob3JpdGllcyhrbm93bkF1dGhvcml0aWVzOiBBcnJheTxzdHJpbmc+KTogdm9pZCB7XHJcbiAgICAgICAga25vd25BdXRob3JpdGllcy5mb3JFYWNoKGF1dGhvcml0eSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGhvcml0eURvbWFpbiA9IFVybFN0cmluZy5nZXREb21haW5Gcm9tVXJsKGF1dGhvcml0eSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5UcnVzdGVkSG9zdExpc3RbYXV0aG9yaXR5RG9tYWluXSA9IHtcclxuICAgICAgICAgICAgICAgIHByZWZlcnJlZF9jYWNoZTogYXV0aG9yaXR5RG9tYWluLFxyXG4gICAgICAgICAgICAgICAgcHJlZmVycmVkX25ldHdvcms6IGF1dGhvcml0eURvbWFpbixcclxuICAgICAgICAgICAgICAgIGFsaWFzZXM6IFthdXRob3JpdHlEb21haW5dXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRUcnVzdGVkSG9zdExpc3QoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuVHJ1c3RlZEhvc3RMaXN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBtZXRhZGF0YSBmb3IgdGhlIHByb3ZpZGVkIGhvc3RcclxuICAgICAqIEBwYXJhbSBob3N0IFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGEoaG9zdDogc3RyaW5nKTogQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVHJ1c3RlZEhvc3RMaXN0W2hvc3QudG9Mb3dlckNhc2UoKV0gfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB0byBzZWUgaWYgdGhlIGhvc3QgaXMgaW4gYSBsaXN0IG9mIHRydXN0ZWQgaG9zdHNcclxuICAgICAqIEBwYXJhbSBob3N0IFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIElzSW5UcnVzdGVkSG9zdExpc3QoaG9zdDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuVHJ1c3RlZEhvc3RMaXN0KS5pbmRleE9mKGhvc3QudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBQcm90b2NvbCBtb2RlcyBzdXBwb3J0ZWQgYnkgTVNBTC5cclxuICovXHJcbmV4cG9ydCBlbnVtIFByb3RvY29sTW9kZSB7XHJcbiAgICBBQUQgPSBcIkFBRFwiLFxyXG4gICAgT0lEQyA9IFwiT0lEQ1wiXHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBdXRob3JpdHlUeXBlIH0gZnJvbSBcIi4vQXV0aG9yaXR5VHlwZVwiO1xyXG5pbXBvcnQgeyBPcGVuSWRDb25maWdSZXNwb25zZSB9IGZyb20gXCIuL09wZW5JZENvbmZpZ1Jlc3BvbnNlXCI7XHJcbmltcG9ydCB7IFVybFN0cmluZyB9IGZyb20gXCIuLi91cmwvVXJsU3RyaW5nXCI7XHJcbmltcG9ydCB7IElVcmkgfSBmcm9tIFwiLi4vdXJsL0lVcmlcIjtcclxuaW1wb3J0IHsgQ2xpZW50QXV0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudEF1dGhFcnJvclwiO1xyXG5pbXBvcnQgeyBJTmV0d29ya01vZHVsZSB9IGZyb20gXCIuLi9uZXR3b3JrL0lOZXR3b3JrTW9kdWxlXCI7XHJcbmltcG9ydCB7IE5ldHdvcmtSZXNwb25zZSB9IGZyb20gXCIuLi9uZXR3b3JrL05ldHdvcmtNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgVHJ1c3RlZEF1dGhvcml0eSB9IGZyb20gXCIuL1RydXN0ZWRBdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvclwiO1xyXG5pbXBvcnQgeyBQcm90b2NvbE1vZGUgfSBmcm9tIFwiLi9Qcm90b2NvbE1vZGVcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgYXV0aG9yaXR5IGNsYXNzIHZhbGlkYXRlcyB0aGUgYXV0aG9yaXR5IFVSSXMgdXNlZCBieSB0aGUgdXNlciwgYW5kIHJldHJpZXZlcyB0aGUgT3BlbklEIENvbmZpZ3VyYXRpb24gRGF0YSBmcm9tIHRoZVxyXG4gKiBlbmRwb2ludC4gSXQgd2lsbCBzdG9yZSB0aGUgcGVydGluZW50IGNvbmZpZyBkYXRhIGluIHRoaXMgb2JqZWN0IGZvciB1c2UgZHVyaW5nIHRva2VuIGNhbGxzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEF1dGhvcml0eSB7XHJcblxyXG4gICAgLy8gQ2Fub25pY2FsIGF1dGhvcml0eSB1cmwgc3RyaW5nXHJcbiAgICBwcml2YXRlIF9jYW5vbmljYWxBdXRob3JpdHk6IFVybFN0cmluZztcclxuICAgIC8vIENhbm9uaWNhbHkgYXV0aG9yaXR5IHVybCBjb21wb25lbnRzXHJcbiAgICBwcml2YXRlIF9jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzOiBJVXJpO1xyXG4gICAgLy8gVGVuYW50IGRpc2NvdmVyeSByZXNwb25zZSByZXRyaWV2ZWQgZnJvbSBPcGVuSUQgQ29uZmlndXJhdGlvbiBFbmRwb2ludFxyXG4gICAgcHJpdmF0ZSB0ZW5hbnREaXNjb3ZlcnlSZXNwb25zZTogT3BlbklkQ29uZmlnUmVzcG9uc2U7XHJcbiAgICAvLyBOZXR3b3JrIGludGVyZmFjZSB0byBtYWtlIHJlcXVlc3RzIHdpdGguXHJcbiAgICBwcm90ZWN0ZWQgbmV0d29ya0ludGVyZmFjZTogSU5ldHdvcmtNb2R1bGU7XHJcbiAgICAvLyBQcm90b2NvbCBtb2RlIHRvIGNvbnN0cnVjdCBlbmRwb2ludHNcclxuICAgIHByaXZhdGUgYXV0aG9yaXR5UHJvdG9jb2xNb2RlOiBQcm90b2NvbE1vZGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXV0aG9yaXR5OiBzdHJpbmcsIG5ldHdvcmtJbnRlcmZhY2U6IElOZXR3b3JrTW9kdWxlLCBwcm90b2NvbE1vZGU6IFByb3RvY29sTW9kZSkge1xyXG4gICAgICAgIHRoaXMuY2Fub25pY2FsQXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xyXG4gICAgICAgIHRoaXMuX2Nhbm9uaWNhbEF1dGhvcml0eS52YWxpZGF0ZUFzVXJpKCk7XHJcbiAgICAgICAgdGhpcy5uZXR3b3JrSW50ZXJmYWNlID0gbmV0d29ya0ludGVyZmFjZTtcclxuICAgICAgICB0aGlzLmF1dGhvcml0eVByb3RvY29sTW9kZSA9IHByb3RvY29sTW9kZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZWUgYWJvdmUgZm9yIEF1dGhvcml0eVR5cGVcclxuICAgIHB1YmxpYyBnZXQgYXV0aG9yaXR5VHlwZSgpOiBBdXRob3JpdHlUeXBlIHtcclxuICAgICAgICBjb25zdCBwYXRoU2VnbWVudHMgPSB0aGlzLmNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMuUGF0aFNlZ21lbnRzO1xyXG5cclxuICAgICAgICBpZiAocGF0aFNlZ21lbnRzLmxlbmd0aCAmJiBwYXRoU2VnbWVudHNbMF0udG9Mb3dlckNhc2UoKSA9PT0gQ29uc3RhbnRzLkFERlMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEF1dGhvcml0eVR5cGUuQWRmcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBBdXRob3JpdHlUeXBlLkRlZmF1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm90b2NvbE1vZGUgZW51bSByZXByZXNlbnRpbmcgdGhlIHdheSBlbmRwb2ludHMgYXJlIGNvbnN0cnVjdGVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHByb3RvY29sTW9kZSgpOiBQcm90b2NvbE1vZGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhvcml0eVByb3RvY29sTW9kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgVVJMIHRoYXQgaXMgdGhlIGF1dGhvcml0eSBzZXQgYnkgdGhlIGRldmVsb3BlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNhbm9uaWNhbEF1dGhvcml0eSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYW5vbmljYWxBdXRob3JpdHkudXJsU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBjYW5vbmljYWwgYXV0aG9yaXR5LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IGNhbm9uaWNhbEF1dGhvcml0eSh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2Nhbm9uaWNhbEF1dGhvcml0eSA9IG5ldyBVcmxTdHJpbmcodXJsKTtcclxuICAgICAgICB0aGlzLl9jYW5vbmljYWxBdXRob3JpdHkudmFsaWRhdGVBc1VyaSgpO1xyXG4gICAgICAgIHRoaXMuX2Nhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGF1dGhvcml0eSBjb21wb25lbnRzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMoKTogSVVyaSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMgPSB0aGlzLl9jYW5vbmljYWxBdXRob3JpdHkuZ2V0VXJsQ29tcG9uZW50cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGVuYW50IGZvciBhdXRob3JpdHkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgdGVuYW50KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsQXV0aG9yaXR5VXJsQ29tcG9uZW50cy5QYXRoU2VnbWVudHNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPQXV0aCAvYXV0aG9yaXplIGVuZHBvaW50IGZvciByZXF1ZXN0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGF1dGhvcml6YXRpb25FbmRwb2ludCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmKHRoaXMuZGlzY292ZXJ5Q29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlVGVuYW50KHRoaXMudGVuYW50RGlzY292ZXJ5UmVzcG9uc2UuYXV0aG9yaXphdGlvbl9lbmRwb2ludCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUVuZHBvaW50RGlzY292ZXJ5SW5jb21wbGV0ZUVycm9yKFwiRGlzY292ZXJ5IGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9BdXRoIC90b2tlbiBlbmRwb2ludCBmb3IgcmVxdWVzdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0b2tlbkVuZHBvaW50KCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYodGhpcy5kaXNjb3ZlcnlDb21wbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VUZW5hbnQodGhpcy50ZW5hbnREaXNjb3ZlcnlSZXNwb25zZS50b2tlbl9lbmRwb2ludCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUVuZHBvaW50RGlzY292ZXJ5SW5jb21wbGV0ZUVycm9yKFwiRGlzY292ZXJ5IGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGRldmljZUNvZGVFbmRwb2ludCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmKHRoaXMuZGlzY292ZXJ5Q29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZW5hbnREaXNjb3ZlcnlSZXNwb25zZS50b2tlbl9lbmRwb2ludC5yZXBsYWNlKFwiL3Rva2VuXCIsIFwiL2RldmljZWNvZGVcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUVuZHBvaW50RGlzY292ZXJ5SW5jb21wbGV0ZUVycm9yKFwiRGlzY292ZXJ5IGluY29tcGxldGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9BdXRoIGxvZ291dCBlbmRwb2ludCBmb3IgcmVxdWVzdHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBlbmRTZXNzaW9uRW5kcG9pbnQoKTogc3RyaW5nIHtcclxuICAgICAgICBpZih0aGlzLmRpc2NvdmVyeUNvbXBsZXRlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZVRlbmFudCh0aGlzLnRlbmFudERpc2NvdmVyeVJlc3BvbnNlLmVuZF9zZXNzaW9uX2VuZHBvaW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlRW5kcG9pbnREaXNjb3ZlcnlJbmNvbXBsZXRlRXJyb3IoXCJEaXNjb3ZlcnkgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT0F1dGggaXNzdWVyIGZvciByZXF1ZXN0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNlbGZTaWduZWRKd3RBdWRpZW5jZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmKHRoaXMuZGlzY292ZXJ5Q29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlVGVuYW50KHRoaXMudGVuYW50RGlzY292ZXJ5UmVzcG9uc2UuaXNzdWVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlRW5kcG9pbnREaXNjb3ZlcnlJbmNvbXBsZXRlRXJyb3IoXCJEaXNjb3ZlcnkgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVwbGFjZXMgdGVuYW50IGluIHVybCBwYXRoIHdpdGggY3VycmVudCB0ZW5hbnQuIERlZmF1bHRzIHRvIGNvbW1vbi5cclxuICAgICAqIEBwYXJhbSB1cmxTdHJpbmdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXBsYWNlVGVuYW50KHVybFN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdXJsU3RyaW5nLnJlcGxhY2UoL3t0ZW5hbnR9fHt0ZW5hbnRpZH0vZywgdGhpcy50ZW5hbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRlZmF1bHQgb3BlbiBpZCBjb25maWd1cmF0aW9uIGVuZHBvaW50IGZvciBhbnkgY2Fub25pY2FsIGF1dGhvcml0eS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldCBkZWZhdWx0T3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50KCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aG9yaXR5VHlwZSA9PT0gQXV0aG9yaXR5VHlwZS5BZGZzIHx8IHRoaXMucHJvdG9jb2xNb2RlID09PSBQcm90b2NvbE1vZGUuT0lEQykge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5jYW5vbmljYWxBdXRob3JpdHl9LndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb25gO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jYW5vbmljYWxBdXRob3JpdHl9djIuMC8ud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbmA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCb29sZWFuIHRoYXQgcmV0dXJucyB3aGV0aHIgb3Igbm90IHRlbmFudCBkaXNjb3ZlcnkgaGFzIGJlZW4gY29tcGxldGVkLlxyXG4gICAgICovXHJcbiAgICBkaXNjb3ZlcnlDb21wbGV0ZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnRlbmFudERpc2NvdmVyeVJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBPQXV0aCBlbmRwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gT3BlbklEIGNvbmZpZ3VyYXRpb24gZW5kcG9pbnQuXHJcbiAgICAgKiBAcGFyYW0gb3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZGlzY292ZXJFbmRwb2ludHMob3BlbklkQ29uZmlndXJhdGlvbkVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPE5ldHdvcmtSZXNwb25zZTxPcGVuSWRDb25maWdSZXNwb25zZT4+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZXR3b3JrSW50ZXJmYWNlLnNlbmRHZXRSZXF1ZXN0QXN5bmM8T3BlbklkQ29uZmlnUmVzcG9uc2U+KG9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVmYXVsdCBBQUQgSW5zdGFuY2UgRGlzY292ZXJ5IEVuZHBvaW50XHJcbiAgICBwcml2YXRlIGdldCBhYWRJbnN0YW5jZURpc2NvdmVyeUVuZHBvaW50VXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke0NvbnN0YW50cy5BQURfSU5TVEFOQ0VfRElTQ09WRVJZX0VORFBUfSR7dGhpcy5jYW5vbmljYWxBdXRob3JpdHl9b2F1dGgyL3YyLjAvYXV0aG9yaXplYDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlQW5kU2V0UHJlZmVycmVkTmV0d29yaygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBob3N0ID0gdGhpcy5jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzLkhvc3ROYW1lQW5kUG9ydDtcclxuICAgICAgICBpZiAoVHJ1c3RlZEF1dGhvcml0eS5nZXRUcnVzdGVkSG9zdExpc3QoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgYXdhaXQgVHJ1c3RlZEF1dGhvcml0eS5zZXRUcnVzdGVkQXV0aG9yaXRpZXNGcm9tTmV0d29yayh0aGlzLl9jYW5vbmljYWxBdXRob3JpdHksIHRoaXMubmV0d29ya0ludGVyZmFjZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIVRydXN0ZWRBdXRob3JpdHkuSXNJblRydXN0ZWRIb3N0TGlzdChob3N0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlVW50cnVzdGVkQXV0aG9yaXR5RXJyb3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZE5ldHdvcmsgPSBUcnVzdGVkQXV0aG9yaXR5LmdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGEoaG9zdCkucHJlZmVycmVkX25ldHdvcms7XHJcbiAgICAgICAgaWYgKGhvc3QgIT09IHByZWZlcnJlZE5ldHdvcmspIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5vbmljYWxBdXRob3JpdHkgPSB0aGlzLmNhbm9uaWNhbEF1dGhvcml0eS5yZXBsYWNlKGhvc3QsIHByZWZlcnJlZE5ldHdvcmspO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gZW5kcG9pbnQgZGlzY292ZXJ5IHRvIGRpc2NvdmVyIHRoZSAvYXV0aG9yaXplLCAvdG9rZW4gYW5kIGxvZ291dCBlbmRwb2ludHMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyByZXNvbHZlRW5kcG9pbnRzQXN5bmMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy52YWxpZGF0ZUFuZFNldFByZWZlcnJlZE5ldHdvcmsoKTtcclxuICAgICAgICBjb25zdCBvcGVuSWRDb25maWdFbmRwb2ludCA9IHRoaXMuZGVmYXVsdE9wZW5JZENvbmZpZ3VyYXRpb25FbmRwb2ludDtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZGlzY292ZXJFbmRwb2ludHMob3BlbklkQ29uZmlnRW5kcG9pbnQpO1xyXG4gICAgICAgIHRoaXMudGVuYW50RGlzY292ZXJ5UmVzcG9uc2UgPSByZXNwb25zZS5ib2R5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGVscGVyIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGVudmlyb25tZW50IGZyb20gYXV0aG9yaXR5IG9iamVjdFxyXG4gICAgICogQHBhcmFtIGF1dGhvcml0eVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVFbnZpcm9ubWVudEZyb21BdXRob3JpdHkoYXV0aG9yaXR5OiBBdXRob3JpdHkpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHJlcUVudmlyb25tZW50ID0gYXV0aG9yaXR5LmNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMuSG9zdE5hbWVBbmRQb3J0O1xyXG4gICAgICAgIHJldHVybiBUcnVzdGVkQXV0aG9yaXR5LmdldENsb3VkRGlzY292ZXJ5TWV0YWRhdGEocmVxRW52aXJvbm1lbnQpID8gVHJ1c3RlZEF1dGhvcml0eS5nZXRDbG91ZERpc2NvdmVyeU1ldGFkYXRhKHJlcUVudmlyb25tZW50KS5wcmVmZXJyZWRfY2FjaGUgOiBcIlwiO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ2xpZW50QXV0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudEF1dGhFcnJvclwiO1xyXG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gXCIuLi91dGlscy9TdHJpbmdVdGlsc1wiO1xyXG5pbXBvcnQgeyBJQ3J5cHRvIH0gZnJvbSBcIi4uL2NyeXB0by9JQ3J5cHRvXCI7XHJcblxyXG4vKipcclxuICogQ2xpZW50IGluZm8gb2JqZWN0IHdoaWNoIGNvbnNpc3RzIG9mIHR3byBJRHMuIE5lZWQgdG8gYWRkIG1vcmUgaW5mbyBoZXJlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2xpZW50SW5mbyA9IHtcclxuICAgIHVpZDogc3RyaW5nLFxyXG4gICAgdXRpZDogc3RyaW5nXHJcbn07XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdG8gYnVpbGQgYSBjbGllbnQgaW5mbyBvYmplY3RcclxuICogQHBhcmFtIHJhd0NsaWVudEluZm8gXHJcbiAqIEBwYXJhbSBjcnlwdG8gXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRDbGllbnRJbmZvKHJhd0NsaWVudEluZm86IHN0cmluZywgY3J5cHRvOiBJQ3J5cHRvKTogQ2xpZW50SW5mbyB7XHJcbiAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShyYXdDbGllbnRJbmZvKSkge1xyXG4gICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVDbGllbnRJbmZvRW1wdHlFcnJvcihyYXdDbGllbnRJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRlY29kZWRDbGllbnRJbmZvOiBzdHJpbmcgPSBjcnlwdG8uYmFzZTY0RGVjb2RlKHJhd0NsaWVudEluZm8pO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZWRDbGllbnRJbmZvKSBhcyBDbGllbnRJbmZvO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVDbGllbnRJbmZvRGVjb2RpbmdFcnJvcihlKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBTZXBhcmF0b3JzLFxyXG4gICAgQ2FjaGVBY2NvdW50VHlwZSxcclxuICAgIENhY2hlVHlwZSxcclxufSBmcm9tIFwiLi4vLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEF1dGhvcml0eSB9IGZyb20gXCIuLi8uLi9hdXRob3JpdHkvQXV0aG9yaXR5XCI7XHJcbmltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi8uLi9hY2NvdW50L0F1dGhUb2tlblwiO1xyXG5pbXBvcnQgeyBJQ3J5cHRvIH0gZnJvbSBcIi4uLy4uL2NyeXB0by9JQ3J5cHRvXCI7XHJcbmltcG9ydCB7IGJ1aWxkQ2xpZW50SW5mbyB9IGZyb20gXCIuLi8uLi9hY2NvdW50L0NsaWVudEluZm9cIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgQWNjb3VudEluZm8gfSBmcm9tIFwiLi4vLi4vYWNjb3VudC9BY2NvdW50SW5mb1wiO1xyXG5pbXBvcnQgeyBDbGllbnRBdXRoRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IEF1dGhvcml0eVR5cGUgfSBmcm9tIFwiLi4vLi4vYXV0aG9yaXR5L0F1dGhvcml0eVR5cGVcIjtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIHRoYXQgZGVmaW5lcyByZXF1aXJlZCBhbmQgb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgYW4gQWNjb3VudCBmaWVsZCAoYmFzZWQgb24gdW5pdmVyc2FsIGNhY2hlIHNjaGVtYSBpbXBsZW1lbnRlZCBieSBhbGwgTVNBTHMpLlxyXG4gKlxyXG4gKiBLZXkgOiBWYWx1ZSBTY2hlbWFcclxuICpcclxuICogS2V5OiA8aG9tZV9hY2NvdW50X2lkPi08ZW52aXJvbm1lbnQ+LTxyZWFsbSo+XHJcbiAqXHJcbiAqIFZhbHVlIFNjaGVtYTpcclxuICoge1xyXG4gKiAgICAgIGhvbWVBY2NvdW50SWQ6IGhvbWUgYWNjb3VudCBpZGVudGlmaWVyIGZvciB0aGUgYXV0aCBzY2hlbWUsXHJcbiAqICAgICAgZW52aXJvbm1lbnQ6IGVudGl0eSB0aGF0IGlzc3VlZCB0aGUgdG9rZW4sIHJlcHJlc2VudGVkIGFzIGEgZnVsbCBob3N0XHJcbiAqICAgICAgcmVhbG06IEZ1bGwgdGVuYW50IG9yIG9yZ2FuaXphdGlvbmFsIGlkZW50aWZpZXIgdGhhdCB0aGUgYWNjb3VudCBiZWxvbmdzIHRvXHJcbiAqICAgICAgbG9jYWxBY2NvdW50SWQ6IE9yaWdpbmFsIHRlbmFudC1zcGVjaWZpYyBhY2NvdW50SUQsIHVzdWFsbHkgdXNlZCBmb3IgbGVnYWN5IGNhc2VzXHJcbiAqICAgICAgdXNlcm5hbWU6IHByaW1hcnkgdXNlcm5hbWUgdGhhdCByZXByZXNlbnRzIHRoZSB1c2VyLCB1c3VhbGx5IGNvcnJlc3BvbmRzIHRvIHByZWZlcnJlZF91c2VybmFtZSBpbiB0aGUgdjIgZW5kcHRcclxuICogICAgICBhdXRob3JpdHlUeXBlOiBBY2NvdW50cyBhdXRob3JpdHkgdHlwZSBhcyBhIHN0cmluZ1xyXG4gKiAgICAgIG5hbWU6IEZ1bGwgbmFtZSBmb3IgdGhlIGFjY291bnQsIGluY2x1ZGluZyBnaXZlbiBuYW1lIGFuZCBmYW1pbHkgbmFtZSxcclxuICogICAgICBjbGllbnRJbmZvOiBGdWxsIGJhc2U2NCBlbmNvZGVkIGNsaWVudCBpbmZvIHJlY2VpdmVkIGZyb20gRVNUU1xyXG4gKiAgICAgIGxhc3RNb2RpZmljYXRpb25UaW1lOiBsYXN0IHRpbWUgdGhpcyBlbnRpdHkgd2FzIG1vZGlmaWVkIGluIHRoZSBjYWNoZVxyXG4gKiAgICAgIGxhc3RNb2RpZmljYXRpb25BcHA6XHJcbiAqICAgICAgb2JvQXNzZXJ0aW9uOiBhY2Nlc3MgdG9rZW4gcGFzc2VkIGluIGFzIHBhcnQgb2YgT0JPIHJlcXVlc3RcclxuICogfVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFjY291bnRFbnRpdHkge1xyXG4gICAgaG9tZUFjY291bnRJZDogc3RyaW5nO1xyXG4gICAgZW52aXJvbm1lbnQ6IHN0cmluZztcclxuICAgIHJlYWxtOiBzdHJpbmc7XHJcbiAgICBsb2NhbEFjY291bnRJZDogc3RyaW5nO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIGF1dGhvcml0eVR5cGU6IHN0cmluZztcclxuICAgIG5hbWU/OiBzdHJpbmc7XHJcbiAgICBjbGllbnRJbmZvPzogc3RyaW5nO1xyXG4gICAgbGFzdE1vZGlmaWNhdGlvblRpbWU/OiBzdHJpbmc7XHJcbiAgICBsYXN0TW9kaWZpY2F0aW9uQXBwPzogc3RyaW5nO1xyXG4gICAgb2JvQXNzZXJ0aW9uPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWNjb3VudCBJZCBrZXkgY29tcG9uZW50IGFzIHBlciB0aGUgc2NoZW1hOiA8aG9tZV9hY2NvdW50X2lkPi08ZW52aXJvbm1lbnQ+XHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQWNjb3VudElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudElkOiBBcnJheTxzdHJpbmc+ID0gW3RoaXMuaG9tZUFjY291bnRJZCwgdGhpcy5lbnZpcm9ubWVudF07XHJcbiAgICAgICAgcmV0dXJuIGFjY291bnRJZC5qb2luKFNlcGFyYXRvcnMuQ0FDSEVfS0VZX1NFUEFSQVRPUikudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFjY291bnQgQ2FjaGUgS2V5IGFzIHBlciB0aGUgc2NoZW1hOiA8aG9tZV9hY2NvdW50X2lkPi08ZW52aXJvbm1lbnQ+LTxyZWFsbSo+XHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQWNjb3VudEtleSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBBY2NvdW50RW50aXR5LmdlbmVyYXRlQWNjb3VudENhY2hlS2V5KHtcclxuICAgICAgICAgICAgaG9tZUFjY291bnRJZDogdGhpcy5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICBlbnZpcm9ubWVudDogdGhpcy5lbnZpcm9ubWVudCxcclxuICAgICAgICAgICAgdGVuYW50SWQ6IHRoaXMucmVhbG0sXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSBjYWNoZSAoaW4gdGhpcyBjYXNlIGFjY291bnQpXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlVHlwZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5hdXRob3JpdHlUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FjaGVBY2NvdW50VHlwZS5BREZTX0FDQ09VTlRfVFlQRTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDYWNoZVR5cGUuQURGUztcclxuICAgICAgICAgICAgY2FzZSBDYWNoZUFjY291bnRUeXBlLk1TQVYxX0FDQ09VTlRfVFlQRTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBDYWNoZVR5cGUuTVNBO1xyXG4gICAgICAgICAgICBjYXNlIENhY2hlQWNjb3VudFR5cGUuTVNTVFNfQUNDT1VOVF9UWVBFOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlVHlwZS5NU1NUUztcclxuICAgICAgICAgICAgY2FzZSBDYWNoZUFjY291bnRUeXBlLkdFTkVSSUNfQUNDT1VOVF9UWVBFOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlVHlwZS5HRU5FUklDO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEFjY291bnRUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIEFjY291bnRJbmZvIGludGVyZmFjZSBmb3IgdGhpcyBhY2NvdW50LlxyXG4gICAgICovXHJcbiAgICBnZXRBY2NvdW50SW5mbygpOiBBY2NvdW50SW5mbyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaG9tZUFjY291bnRJZDogdGhpcy5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICBlbnZpcm9ubWVudDogdGhpcy5lbnZpcm9ubWVudCxcclxuICAgICAgICAgICAgdGVuYW50SWQ6IHRoaXMucmVhbG0sXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGFjY291bnQga2V5IGZyb20gaW50ZXJmYWNlXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudEludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVBY2NvdW50Q2FjaGVLZXkoYWNjb3VudEludGVyZmFjZTogQWNjb3VudEluZm8pOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRLZXkgPSBbXHJcbiAgICAgICAgICAgIGFjY291bnRJbnRlcmZhY2UuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgYWNjb3VudEludGVyZmFjZS5lbnZpcm9ubWVudCB8fCBcIlwiLFxyXG4gICAgICAgICAgICBhY2NvdW50SW50ZXJmYWNlLnRlbmFudElkIHx8IFwiXCIsXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFjY291bnRLZXkuam9pbihTZXBhcmF0b3JzLkNBQ0hFX0tFWV9TRVBBUkFUT1IpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCdWlsZCBBY2NvdW50IGNhY2hlIGZyb20gSWRUb2tlbiwgY2xpZW50SW5mbyBhbmQgYXV0aG9yaXR5L3BvbGljeS4gQXNzb2NpYXRlZCB3aXRoIEFBRC5cclxuICAgICAqIEBwYXJhbSBjbGllbnRJbmZvXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKiBAcGFyYW0gaWRUb2tlblxyXG4gICAgICogQHBhcmFtIHBvbGljeVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlQWNjb3VudChcclxuICAgICAgICBjbGllbnRJbmZvOiBzdHJpbmcsXHJcbiAgICAgICAgYXV0aG9yaXR5OiBBdXRob3JpdHksXHJcbiAgICAgICAgaWRUb2tlbjogQXV0aFRva2VuLFxyXG4gICAgICAgIGNyeXB0bzogSUNyeXB0byxcclxuICAgICAgICBvYm9Bc3NlcnRpb24/OiBzdHJpbmdcclxuICAgICk6IEFjY291bnRFbnRpdHkge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnQ6IEFjY291bnRFbnRpdHkgPSBuZXcgQWNjb3VudEVudGl0eSgpO1xyXG5cclxuICAgICAgICBhY2NvdW50LmF1dGhvcml0eVR5cGUgPSBDYWNoZUFjY291bnRUeXBlLk1TU1RTX0FDQ09VTlRfVFlQRTtcclxuICAgICAgICBhY2NvdW50LmNsaWVudEluZm8gPSBjbGllbnRJbmZvO1xyXG4gICAgICAgIGNvbnN0IGNsaWVudEluZm9PYmogPSBidWlsZENsaWVudEluZm8oY2xpZW50SW5mbywgY3J5cHRvKTtcclxuICAgICAgICBhY2NvdW50LmhvbWVBY2NvdW50SWQgPSBgJHtjbGllbnRJbmZvT2JqLnVpZH0ke1NlcGFyYXRvcnMuQ0xJRU5UX0lORk9fU0VQQVJBVE9SfSR7Y2xpZW50SW5mb09iai51dGlkfWA7XHJcblxyXG4gICAgICAgIGNvbnN0IGVudiA9IEF1dGhvcml0eS5nZW5lcmF0ZUVudmlyb25tZW50RnJvbUF1dGhvcml0eShhdXRob3JpdHkpO1xyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KGVudikpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUludmFsaWRDYWNoZUVudmlyb25tZW50RXJyb3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFjY291bnQuZW52aXJvbm1lbnQgPSBlbnY7XHJcbiAgICAgICAgLy8gbm9uIEFBRCBzY2VuYXJpb3MgY2FuIGhhdmUgZW1wdHkgcmVhbG1cclxuICAgICAgICBhY2NvdW50LnJlYWxtID0gaWRUb2tlbi5jbGFpbXMudGlkIHx8IFwiXCI7XHJcbiAgICAgICAgYWNjb3VudC5vYm9Bc3NlcnRpb24gPSBvYm9Bc3NlcnRpb247XHJcblxyXG4gICAgICAgIGlmIChpZFRva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIEhvdyBkbyB5b3UgYWNjb3VudCBmb3IgTVNBIENJRCBoZXJlP1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhbEFjY291bnRJZCA9ICFTdHJpbmdVdGlscy5pc0VtcHR5KGlkVG9rZW4uY2xhaW1zLm9pZClcclxuICAgICAgICAgICAgICAgID8gaWRUb2tlbi5jbGFpbXMub2lkXHJcbiAgICAgICAgICAgICAgICA6IGlkVG9rZW4uY2xhaW1zLnNpZDtcclxuICAgICAgICAgICAgYWNjb3VudC5sb2NhbEFjY291bnRJZCA9IGxvY2FsQWNjb3VudElkO1xyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogSW4gQjJDIHNjZW5hcmlvcyB0aGUgZW1haWxzIGNsYWltIGlzIHVzZWQgaW5zdGVhZCBvZiBwcmVmZXJyZWRfdXNlcm5hbWUgYW5kIGl0IGlzIGFuIGFycmF5LiBJbiBtb3N0IGNhc2VzIGl0IHdpbGwgY29udGFpbiBhIHNpbmdsZSBlbWFpbC5cclxuICAgICAgICAgICAgICogVGhpcyBmaWVsZCBzaG91bGQgbm90IGJlIHJlbGllZCB1cG9uIGlmIGEgY3VzdG9tIHBvbGljeSBpcyBjb25maWd1cmVkIHRvIHJldHVybiBtb3JlIHRoYW4gMSBlbWFpbC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGFjY291bnQudXNlcm5hbWUgPSBpZFRva2VuLmNsYWltcy5wcmVmZXJyZWRfdXNlcm5hbWUgfHwgKGlkVG9rZW4uY2xhaW1zLmVtYWlscz8gaWRUb2tlbi5jbGFpbXMuZW1haWxzWzBdOiBcIlwiKTtcclxuICAgICAgICAgICAgYWNjb3VudC5uYW1lID0gaWRUb2tlbi5jbGFpbXMubmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhY2NvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQnVpbGRzIG5vbi1BQUQvQURGUyBhY2NvdW50LlxyXG4gICAgICogQHBhcmFtIGF1dGhvcml0eVxyXG4gICAgICogQHBhcmFtIGlkVG9rZW5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUdlbmVyaWNBY2NvdW50KFxyXG4gICAgICAgIGF1dGhvcml0eTogQXV0aG9yaXR5LFxyXG4gICAgICAgIGlkVG9rZW46IEF1dGhUb2tlbixcclxuICAgICAgICBvYm9Bc3NlcnRpb24/OiBzdHJpbmdcclxuICAgICk6IEFjY291bnRFbnRpdHkge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnQ6IEFjY291bnRFbnRpdHkgPSBuZXcgQWNjb3VudEVudGl0eSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFjY291bnQuYXV0aG9yaXR5VHlwZSA9IChhdXRob3JpdHkuYXV0aG9yaXR5VHlwZSA9PT0gQXV0aG9yaXR5VHlwZS5BZGZzKSA/IENhY2hlQWNjb3VudFR5cGUuQURGU19BQ0NPVU5UX1RZUEUgOiBDYWNoZUFjY291bnRUeXBlLkdFTkVSSUNfQUNDT1VOVF9UWVBFO1xyXG4gICAgICAgIGFjY291bnQuaG9tZUFjY291bnRJZCA9IGlkVG9rZW4uY2xhaW1zLnN1YjtcclxuICAgICAgICAvLyBub24gQUFEIHNjZW5hcmlvcyBjYW4gaGF2ZSBlbXB0eSByZWFsbVxyXG4gICAgICAgIGFjY291bnQucmVhbG0gPSBcIlwiO1xyXG4gICAgICAgIGFjY291bnQub2JvQXNzZXJ0aW9uID0gb2JvQXNzZXJ0aW9uO1xyXG5cclxuICAgICAgICBjb25zdCBlbnYgPSBBdXRob3JpdHkuZ2VuZXJhdGVFbnZpcm9ubWVudEZyb21BdXRob3JpdHkoYXV0aG9yaXR5KTtcclxuXHJcbiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzRW1wdHkoZW52KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlSW52YWxpZENhY2hlRW52aXJvbm1lbnRFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWNjb3VudC5lbnZpcm9ubWVudCA9IGVudjtcclxuICAgICAgICBhY2NvdW50LnVzZXJuYW1lID0gaWRUb2tlbi5jbGFpbXMudXBuO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogYWRkIHVuaXF1ZU5hbWUgdG8gY2xhaW1zXHJcbiAgICAgICAgICogYWNjb3VudC5uYW1lID0gaWRUb2tlbi5jbGFpbXMudW5pcXVlTmFtZTtcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgcmV0dXJuIGFjY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgYW4gZW50aXR5OiBjaGVja3MgZm9yIGFsbCBleHBlY3RlZCBwYXJhbXNcclxuICAgICAqIEBwYXJhbSBlbnRpdHlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQWNjb3VudEVudGl0eShlbnRpdHk6IG9iamVjdCk6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJob21lQWNjb3VudElkXCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImVudmlyb25tZW50XCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcInJlYWxtXCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImxvY2FsQWNjb3VudElkXCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcInVzZXJuYW1lXCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImF1dGhvcml0eVR5cGVcIilcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQVBQX01FVEFEQVRBLCBTZXBhcmF0b3JzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIEFQUF9NRVRBREFUQSBDYWNoZVxyXG4gKlxyXG4gKiBLZXk6VmFsdWUgU2NoZW1hOlxyXG4gKlxyXG4gKiBLZXk6IGFwcG1ldGFkYXRhLTxlbnZpcm9ubWVudD4tPGNsaWVudF9pZD5cclxuICpcclxuICogVmFsdWU6XHJcbiAqIHtcclxuICogICAgICBjbGllbnRJZDogY2xpZW50IElEIG9mIHRoZSBhcHBsaWNhdGlvblxyXG4gKiAgICAgIGVudmlyb25tZW50OiBlbnRpdHkgdGhhdCBpc3N1ZWQgdGhlIHRva2VuLCByZXByZXNlbnRlZCBhcyBhIGZ1bGwgaG9zdFxyXG4gKiAgICAgIGZhbWlseUlkOiBGYW1pbHkgSUQgaWRlbnRpZmllciwgJzEnIHJlcHJlc2VudHMgTWljcm9zb2Z0IEZhbWlseVxyXG4gKiB9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXBwTWV0YWRhdGFFbnRpdHkge1xyXG4gICAgY2xpZW50SWQ6IHN0cmluZztcclxuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XHJcbiAgICBmYW1pbHlJZD86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFwcE1ldGFkYXRhIENhY2hlIEtleSBhcyBwZXIgdGhlIHNjaGVtYTogYXBwbWV0YWRhdGEtPGVudmlyb25tZW50Pi08Y2xpZW50X2lkPlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUFwcE1ldGFkYXRhS2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEFwcE1ldGFkYXRhRW50aXR5LmdlbmVyYXRlQXBwTWV0YWRhdGFDYWNoZUtleSh0aGlzLmVudmlyb25tZW50LCB0aGlzLmNsaWVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFwcE1ldGFkYXRhIENhY2hlIEtleVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVBcHBNZXRhZGF0YUNhY2hlS2V5KGVudmlyb25tZW50OiBzdHJpbmcsIGNsaWVudElkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFwcE1ldGFEYXRhS2V5QXJyYXk6IEFycmF5PHN0cmluZz4gPSBbXHJcbiAgICAgICAgICAgIEFQUF9NRVRBREFUQSxcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgIGNsaWVudElkLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgcmV0dXJuIGFwcE1ldGFEYXRhS2V5QXJyYXkuam9pbihTZXBhcmF0b3JzLkNBQ0hFX0tFWV9TRVBBUkFUT1IpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIEFwcE1ldGFkYXRhRW50aXR5XHJcbiAgICAgKiBAcGFyYW0gY2xpZW50SWRcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICogQHBhcmFtIGZhbWlseUlkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVBcHBNZXRhZGF0YUVudGl0eShjbGllbnRJZDogc3RyaW5nLCBlbnZpcm9ubWVudDogc3RyaW5nLCBmYW1pbHlJZD86IHN0cmluZyk6IEFwcE1ldGFkYXRhRW50aXR5IHtcclxuICAgICAgICBjb25zdCBhcHBNZXRhZGF0YSA9IG5ldyBBcHBNZXRhZGF0YUVudGl0eSgpO1xyXG5cclxuICAgICAgICBhcHBNZXRhZGF0YS5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgIGFwcE1ldGFkYXRhLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XHJcbiAgICAgICAgaWYgKGZhbWlseUlkKSB7XHJcbiAgICAgICAgICAgIGFwcE1ldGFkYXRhLmZhbWlseUlkID0gZmFtaWx5SWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXBwTWV0YWRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgYW4gZW50aXR5OiBjaGVja3MgZm9yIGFsbCBleHBlY3RlZCBwYXJhbXNcclxuICAgICAqIEBwYXJhbSBlbnRpdHlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQXBwTWV0YWRhdGFFbnRpdHkoa2V5OiBzdHJpbmcsIGVudGl0eTogb2JqZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAga2V5LmluZGV4T2YoQVBQX01FVEFEQVRBKSA9PT0gMCAmJlxyXG4gICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJjbGllbnRJZFwiKSAmJlxyXG4gICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJlbnZpcm9ubWVudFwiKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBY2NvdW50Q2FjaGUsIEFjY291bnRGaWx0ZXIsIENyZWRlbnRpYWxGaWx0ZXIsIENyZWRlbnRpYWxDYWNoZSB9IGZyb20gXCIuL3V0aWxzL0NhY2hlVHlwZXNcIjtcclxuaW1wb3J0IHsgQ2FjaGVSZWNvcmQgfSBmcm9tIFwiLi9lbnRpdGllcy9DYWNoZVJlY29yZFwiO1xyXG5pbXBvcnQgeyBDYWNoZVNjaGVtYVR5cGUsIENyZWRlbnRpYWxUeXBlLCBDb25zdGFudHMsIEFQUF9NRVRBREFUQSwgVEhFX0ZBTUlMWV9JRCB9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgQ3JlZGVudGlhbEVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzL0NyZWRlbnRpYWxFbnRpdHlcIjtcclxuaW1wb3J0IHsgU2NvcGVTZXQgfSBmcm9tIFwiLi4vcmVxdWVzdC9TY29wZVNldFwiO1xyXG5pbXBvcnQgeyBBY2NvdW50RW50aXR5IH0gZnJvbSBcIi4vZW50aXRpZXMvQWNjb3VudEVudGl0eVwiO1xyXG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzL0FjY2Vzc1Rva2VuRW50aXR5XCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IElkVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi9lbnRpdGllcy9JZFRva2VuRW50aXR5XCI7XHJcbmltcG9ydCB7IFJlZnJlc2hUb2tlbkVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzL1JlZnJlc2hUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IElDYWNoZU1hbmFnZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2UvSUNhY2hlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBDbGllbnRBdXRoRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IEFjY291bnRJbmZvIH0gZnJvbSBcIi4uL2FjY291bnQvQWNjb3VudEluZm9cIjtcclxuaW1wb3J0IHsgVHJ1c3RlZEF1dGhvcml0eSB9IGZyb20gXCIuLi9hdXRob3JpdHkvVHJ1c3RlZEF1dGhvcml0eVwiO1xyXG5pbXBvcnQgeyBBcHBNZXRhZGF0YUVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzL0FwcE1ldGFkYXRhRW50aXR5XCI7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIGNsYXNzIHdoaWNoIGltcGxlbWVudCBjYWNoZSBzdG9yYWdlIGZ1bmN0aW9ucyB1c2VkIGJ5IE1TQUwgdG8gcGVyZm9ybSB2YWxpZGl0eSBjaGVja3MsIGFuZCBzdG9yZSB0b2tlbnMuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FjaGVNYW5hZ2VyIGltcGxlbWVudHMgSUNhY2hlTWFuYWdlciB7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIHNldCBpdGVtIGluIGNhY2hlLlxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBvYmplY3QsIHR5cGU/OiBzdHJpbmcpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gd2hpY2ggcmV0cmlldmVzIGl0ZW0gZnJvbSBjYWNoZS5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZ2V0SXRlbShrZXk6IHN0cmluZywgdHlwZT86IHN0cmluZyk6IHN0cmluZyB8IG9iamVjdDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIHJlbW92ZSBhbiBpdGVtIGZyb20gY2FjaGUgZ2l2ZW4gaXRzIGtleS5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgcmVtb3ZlSXRlbShrZXk6IHN0cmluZywgdHlwZT86IHN0cmluZyk6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiB3aGljaCByZXR1cm5zIGJvb2xlYW4gd2hldGhlciBjYWNoZSBjb250YWlucyBhIHNwZWNpZmljIGtleS5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgY29udGFpbnNLZXkoa2V5OiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcpOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gd2hpY2ggcmV0cmlldmVzIGFsbCBjdXJyZW50IGtleXMgZnJvbSB0aGUgY2FjaGUuXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldEtleXMoKTogc3RyaW5nW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiB3aGljaCBjbGVhcnMgY2FjaGUuXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGNsZWFyKCk6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFsbCBhY2NvdW50cyBpbiBjYWNoZVxyXG4gICAgICovXHJcbiAgICBnZXRBbGxBY2NvdW50cygpOiBBY2NvdW50SW5mb1tdIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50QWNjb3VudHM6IEFjY291bnRDYWNoZSA9IHRoaXMuZ2V0QWNjb3VudHNGaWx0ZXJlZEJ5KCk7XHJcbiAgICAgICAgY29uc3QgYWNjb3VudFZhbHVlczogQWNjb3VudEVudGl0eVtdID0gT2JqZWN0LmtleXMoY3VycmVudEFjY291bnRzKS5tYXAoYWNjb3VudEtleSA9PiBjdXJyZW50QWNjb3VudHNbYWNjb3VudEtleV0pO1xyXG4gICAgICAgIGNvbnN0IG51bUFjY291bnRzID0gYWNjb3VudFZhbHVlcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKG51bUFjY291bnRzIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYWxsQWNjb3VudHMgPSBhY2NvdW50VmFsdWVzLm1hcDxBY2NvdW50SW5mbz4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWNjb3VudE9iajogQWNjb3VudEVudGl0eSA9IG5ldyBBY2NvdW50RW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50T2JqID0gQ2FjaGVNYW5hZ2VyLnRvT2JqZWN0KGFjY291bnRPYmosIHZhbHVlKSBhcyBBY2NvdW50RW50aXR5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY291bnRPYmouZ2V0QWNjb3VudEluZm8oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhbGxBY2NvdW50cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzYXZlcyBhIGNhY2hlIHJlY29yZFxyXG4gICAgICogQHBhcmFtIGNhY2hlUmVjb3JkXHJcbiAgICAgKi9cclxuICAgIHNhdmVDYWNoZVJlY29yZChjYWNoZVJlY29yZDogQ2FjaGVSZWNvcmQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWNhY2hlUmVjb3JkKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVOdWxsT3JVbmRlZmluZWRDYWNoZVJlY29yZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEhY2FjaGVSZWNvcmQuYWNjb3VudCkge1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVBY2NvdW50KGNhY2hlUmVjb3JkLmFjY291bnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEhY2FjaGVSZWNvcmQuaWRUb2tlbikge1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVDcmVkZW50aWFsKGNhY2hlUmVjb3JkLmlkVG9rZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEhY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zYXZlQWNjZXNzVG9rZW4oY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEhY2FjaGVSZWNvcmQucmVmcmVzaFRva2VuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZUNyZWRlbnRpYWwoY2FjaGVSZWNvcmQucmVmcmVzaFRva2VuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzYXZlcyBhY2NvdW50IGludG8gY2FjaGVcclxuICAgICAqIEBwYXJhbSBhY2NvdW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2F2ZUFjY291bnQoYWNjb3VudDogQWNjb3VudEVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGFjY291bnQuZ2VuZXJhdGVBY2NvdW50S2V5KCk7XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKGtleSwgYWNjb3VudCwgQ2FjaGVTY2hlbWFUeXBlLkFDQ09VTlQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2F2ZXMgY3JlZGVudGlhbCAtIGFjY2Vzc1Rva2VuLCBpZFRva2VuIG9yIHJlZnJlc2hUb2tlbiBpbnRvIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNhdmVDcmVkZW50aWFsKGNyZWRlbnRpYWw6IENyZWRlbnRpYWxFbnRpdHkpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBjcmVkZW50aWFsLmdlbmVyYXRlQ3JlZGVudGlhbEtleSgpO1xyXG4gICAgICAgIHRoaXMuc2V0SXRlbShrZXksIGNyZWRlbnRpYWwsIENhY2hlU2NoZW1hVHlwZS5DUkVERU5USUFMKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNhdmVzIGFjY2VzcyB0b2tlbiBjcmVkZW50aWFsXHJcbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNhdmVBY2Nlc3NUb2tlbihjcmVkZW50aWFsOiBBY2Nlc3NUb2tlbkVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRUb2tlbkNhY2hlID0gdGhpcy5nZXRDcmVkZW50aWFsc0ZpbHRlcmVkQnkoe1xyXG4gICAgICAgICAgICBjbGllbnRJZDogY3JlZGVudGlhbC5jbGllbnRJZCxcclxuICAgICAgICAgICAgY3JlZGVudGlhbFR5cGU6IENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTixcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IGNyZWRlbnRpYWwuZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWQ6IGNyZWRlbnRpYWwuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgcmVhbG06IGNyZWRlbnRpYWwucmVhbG0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFNjb3BlcyA9IFNjb3BlU2V0LmZyb21TdHJpbmcoY3JlZGVudGlhbC50YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBY2Nlc3NUb2tlbnM6IEFjY2Vzc1Rva2VuRW50aXR5W10gPSBPYmplY3Qua2V5cyhjdXJyZW50VG9rZW5DYWNoZS5hY2Nlc3NUb2tlbnMpLm1hcChrZXkgPT4gY3VycmVudFRva2VuQ2FjaGUuYWNjZXNzVG9rZW5zW2tleV0pO1xyXG4gICAgICAgIGlmIChjdXJyZW50QWNjZXNzVG9rZW5zKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBY2Nlc3NUb2tlbnMuZm9yRWFjaCgodG9rZW5FbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuU2NvcGVTZXQgPSBTY29wZVNldC5mcm9tU3RyaW5nKHRva2VuRW50aXR5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5TY29wZVNldC5pbnRlcnNlY3RpbmdTY29wZVNldHMoY3VycmVudFNjb3BlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNyZWRlbnRpYWwodG9rZW5FbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zYXZlQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHJpZXZlIGFuIGFjY291bnQgZW50aXR5IGdpdmVuIHRoZSBjYWNoZSBrZXlcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgZ2V0QWNjb3VudChrZXk6IHN0cmluZyk6IEFjY291bnRFbnRpdHkgfCBudWxsIHtcclxuICAgICAgICAvLyBkb24ndCBwYXJzZSBhbnkgbm9uLWFjY291bnQgdHlwZSBjYWNoZSBlbnRpdGllc1xyXG4gICAgICAgIGlmIChDcmVkZW50aWFsRW50aXR5LmdldENyZWRlbnRpYWxUeXBlKGtleSkgIT09IENvbnN0YW50cy5OT1RfREVGSU5FRCB8fCB0aGlzLmlzQXBwTWV0YWRhdGEoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEF0dGVtcHQgcmV0cmlldmFsXHJcbiAgICAgICAgbGV0IGVudGl0eTogQWNjb3VudEVudGl0eTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBlbnRpdHkgPSB0aGlzLmdldEl0ZW0oa2V5LCBDYWNoZVNjaGVtYVR5cGUuQUNDT1VOVCkgYXMgQWNjb3VudEVudGl0eTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXV0aG9yaXR5IHR5cGUgaXMgcmVxdWlyZWQgZm9yIGFjY291bnRzLCByZXR1cm4gaWYgaXQgaXMgbm90IGF2YWlsYWJsZSAobm90IGFuIGFjY291bnQgZW50aXR5KVxyXG4gICAgICAgIGlmICghZW50aXR5IHx8IFN0cmluZ1V0aWxzLmlzRW1wdHkoZW50aXR5LmF1dGhvcml0eVR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHJpZXZlIGEgY3JlZGVudGlhbCAtIGFjY2Vzc1Rva2VuLCBpZFRva2VuIG9yIHJlZnJlc2hUb2tlbjsgZ2l2ZW4gdGhlIGNhY2hlIGtleVxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICovXHJcbiAgICBnZXRDcmVkZW50aWFsKGtleTogc3RyaW5nKTogQ3JlZGVudGlhbEVudGl0eSB8IG51bGwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEl0ZW0oa2V5LCBDYWNoZVNjaGVtYVR5cGUuQ1JFREVOVElBTCkgYXMgQ3JlZGVudGlhbEVudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHJpZXZlIGFuIGFwcG1ldGFkYXRhIGVudGl0eSBnaXZlbiB0aGUgY2FjaGUga2V5XHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIGdldEFwcE1ldGFkYXRhKGtleTogc3RyaW5nKTogQXBwTWV0YWRhdGFFbnRpdHkgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJdGVtKGtleSwgQ2FjaGVTY2hlbWFUeXBlLkFQUF9NRVRBREFUQSkgYXMgQXBwTWV0YWRhdGFFbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXRyaWV2ZSBhY2NvdW50cyBtYXRjaGluZyBhbGwgcHJvdmlkZWQgZmlsdGVyczsgaWYgbm8gZmlsdGVyIGlzIHNldCwgZ2V0IGFsbCBhY2NvdW50c1xyXG4gICAgICogbm90IGNoZWNraW5nIGZvciBjYXNpbmcgYXMga2V5cyBhcmUgYWxsIGdlbmVyYXRlZCBpbiBsb3dlciBjYXNlLCByZW1lbWJlciB0byBjb252ZXJ0IHRvIGxvd2VyIGNhc2UgaWYgb2JqZWN0IHByb3BlcnRpZXMgYXJlIGNvbXBhcmVkXHJcbiAgICAgKiBAcGFyYW0gaG9tZUFjY291bnRJZFxyXG4gICAgICogQHBhcmFtIGVudmlyb25tZW50XHJcbiAgICAgKiBAcGFyYW0gcmVhbG1cclxuICAgICAqL1xyXG4gICAgZ2V0QWNjb3VudHNGaWx0ZXJlZEJ5KGFjY291bnRGaWx0ZXI/OiBBY2NvdW50RmlsdGVyKTogQWNjb3VudENhY2hlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBY2NvdW50c0ZpbHRlcmVkQnlJbnRlcm5hbChcclxuICAgICAgICAgICAgYWNjb3VudEZpbHRlciA/IGFjY291bnRGaWx0ZXIuaG9tZUFjY291bnRJZCA6IFwiXCIsXHJcbiAgICAgICAgICAgIGFjY291bnRGaWx0ZXIgPyBhY2NvdW50RmlsdGVyLmVudmlyb25tZW50IDogXCJcIixcclxuICAgICAgICAgICAgYWNjb3VudEZpbHRlciA/IGFjY291bnRGaWx0ZXIucmVhbG0gOiBcIlwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHJpZXZlIGFjY291bnRzIG1hdGNoaW5nIGFsbCBwcm92aWRlZCBmaWx0ZXJzOyBpZiBubyBmaWx0ZXIgaXMgc2V0LCBnZXQgYWxsIGFjY291bnRzXHJcbiAgICAgKiBub3QgY2hlY2tpbmcgZm9yIGNhc2luZyBhcyBrZXlzIGFyZSBhbGwgZ2VuZXJhdGVkIGluIGxvd2VyIGNhc2UsIHJlbWVtYmVyIHRvIGNvbnZlcnQgdG8gbG93ZXIgY2FzZSBpZiBvYmplY3QgcHJvcGVydGllcyBhcmUgY29tcGFyZWRcclxuICAgICAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcclxuICAgICAqIEBwYXJhbSByZWFsbVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEFjY291bnRzRmlsdGVyZWRCeUludGVybmFsKFxyXG4gICAgICAgIGhvbWVBY2NvdW50SWQ/OiBzdHJpbmcsXHJcbiAgICAgICAgZW52aXJvbm1lbnQ/OiBzdHJpbmcsXHJcbiAgICAgICAgcmVhbG0/OiBzdHJpbmdcclxuICAgICk6IEFjY291bnRDYWNoZSB7XHJcbiAgICAgICAgY29uc3QgYWxsQ2FjaGVLZXlzID0gdGhpcy5nZXRLZXlzKCk7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdBY2NvdW50czogQWNjb3VudENhY2hlID0ge307XHJcblxyXG4gICAgICAgIGFsbENhY2hlS2V5cy5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbnRpdHk6IEFjY291bnRFbnRpdHkgfCBudWxsID0gdGhpcy5nZXRBY2NvdW50KGNhY2hlS2V5KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KGhvbWVBY2NvdW50SWQpICYmICF0aGlzLm1hdGNoSG9tZUFjY291bnRJZChlbnRpdHksIGhvbWVBY2NvdW50SWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShlbnZpcm9ubWVudCkgJiYgIXRoaXMubWF0Y2hFbnZpcm9ubWVudChlbnRpdHksIGVudmlyb25tZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkocmVhbG0pICYmICF0aGlzLm1hdGNoUmVhbG0oZW50aXR5LCByZWFsbSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWF0Y2hpbmdBY2NvdW50c1tjYWNoZUtleV0gPSBlbnRpdHk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBtYXRjaGluZ0FjY291bnRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0cmlldmUgY3JlZGVudGFpbHMgbWF0Y2hpbmcgYWxsIHByb3ZpZGVkIGZpbHRlcnM7IGlmIG5vIGZpbHRlciBpcyBzZXQsIGdldCBhbGwgY3JlZGVudGlhbHNcclxuICAgICAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcclxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFsVHlwZVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gcmVhbG1cclxuICAgICAqIEBwYXJhbSB0YXJnZXRcclxuICAgICAqL1xyXG4gICAgZ2V0Q3JlZGVudGlhbHNGaWx0ZXJlZEJ5KGZpbHRlcjogQ3JlZGVudGlhbEZpbHRlcik6IENyZWRlbnRpYWxDYWNoZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3JlZGVudGlhbHNGaWx0ZXJlZEJ5SW50ZXJuYWwoXHJcbiAgICAgICAgICAgIGZpbHRlci5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICBmaWx0ZXIuZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgIGZpbHRlci5jcmVkZW50aWFsVHlwZSxcclxuICAgICAgICAgICAgZmlsdGVyLmNsaWVudElkLFxyXG4gICAgICAgICAgICBmaWx0ZXIuZmFtaWx5SWQsXHJcbiAgICAgICAgICAgIGZpbHRlci5yZWFsbSxcclxuICAgICAgICAgICAgZmlsdGVyLnRhcmdldCxcclxuICAgICAgICAgICAgZmlsdGVyLm9ib0Fzc2VydGlvblxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdXBwb3J0IGZ1bmN0aW9uIHRvIGhlbHAgbWF0Y2ggY3JlZGVudGlhbHNcclxuICAgICAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcclxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFsVHlwZVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gcmVhbG1cclxuICAgICAqIEBwYXJhbSB0YXJnZXRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRDcmVkZW50aWFsc0ZpbHRlcmVkQnlJbnRlcm5hbChcclxuICAgICAgICBob21lQWNjb3VudElkPzogc3RyaW5nLFxyXG4gICAgICAgIGVudmlyb25tZW50Pzogc3RyaW5nLFxyXG4gICAgICAgIGNyZWRlbnRpYWxUeXBlPzogc3RyaW5nLFxyXG4gICAgICAgIGNsaWVudElkPzogc3RyaW5nLFxyXG4gICAgICAgIGZhbWlseUlkPzogc3RyaW5nLFxyXG4gICAgICAgIHJlYWxtPzogc3RyaW5nLFxyXG4gICAgICAgIHRhcmdldD86IHN0cmluZyxcclxuICAgICAgICBvYm9Bc3NlcnRpb24/OiBzdHJpbmdcclxuICAgICk6IENyZWRlbnRpYWxDYWNoZSB7XHJcbiAgICAgICAgY29uc3QgYWxsQ2FjaGVLZXlzID0gdGhpcy5nZXRLZXlzKCk7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdDcmVkZW50aWFsczogQ3JlZGVudGlhbENhY2hlID0ge1xyXG4gICAgICAgICAgICBpZFRva2Vuczoge30sXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2Vuczoge30sXHJcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbnM6IHt9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGFsbENhY2hlS2V5cy5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZW50aXR5OiBDcmVkZW50aWFsRW50aXR5O1xyXG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBhbnkgbm9uLWNyZWRlbnRpYWwgdHlwZSBjYWNoZSBlbnRpdGllc1xyXG4gICAgICAgICAgICBjb25zdCBjcmVkVHlwZSA9IENyZWRlbnRpYWxFbnRpdHkuZ2V0Q3JlZGVudGlhbFR5cGUoY2FjaGVLZXkpO1xyXG4gICAgICAgICAgICBpZiAoY3JlZFR5cGUgPT09IENvbnN0YW50cy5OT1RfREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBdHRlbXB0IHJldHJpZXZhbFxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gdGhpcy5nZXRJdGVtKGNhY2hlS2V5LCBDYWNoZVNjaGVtYVR5cGUuQ1JFREVOVElBTCkgYXMgQ3JlZGVudGlhbEVudGl0eTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkob2JvQXNzZXJ0aW9uKSAmJiAhdGhpcy5tYXRjaE9ib0Fzc2VydGlvbihlbnRpdHksIG9ib0Fzc2VydGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KGhvbWVBY2NvdW50SWQpICYmICF0aGlzLm1hdGNoSG9tZUFjY291bnRJZChlbnRpdHksIGhvbWVBY2NvdW50SWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShlbnZpcm9ubWVudCkgJiYgIXRoaXMubWF0Y2hFbnZpcm9ubWVudChlbnRpdHksIGVudmlyb25tZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkocmVhbG0pICYmICF0aGlzLm1hdGNoUmVhbG0oZW50aXR5LCByZWFsbSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KGNyZWRlbnRpYWxUeXBlKSAmJiAhdGhpcy5tYXRjaENyZWRlbnRpYWxUeXBlKGVudGl0eSwgY3JlZGVudGlhbFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShjbGllbnRJZCkgJiYgIXRoaXMubWF0Y2hDbGllbnRJZChlbnRpdHksIGNsaWVudElkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkoZmFtaWx5SWQpICYmICF0aGlzLm1hdGNoRmFtaWx5SWQoZW50aXR5LCBmYW1pbHlJZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogaWRUb2tlbnMgZG8gbm90IGhhdmUgXCJ0YXJnZXRcIiwgdGFyZ2V0IHNwZWNpZmljIHJlZnJlc2hUb2tlbnMgZG8gZXhpc3QgZm9yIHNvbWUgdHlwZXMgb2YgYXV0aGVudGljYXRpb25cclxuICAgICAgICAgICAgICogUmVzb3VyY2Ugc3BlY2lmaWMgcmVmcmVzaCB0b2tlbnMgY2FzZSB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHN1cHBvcnQgaXMgZGVlbWVkIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHRhcmdldCkgJiYgIXRoaXMubWF0Y2hUYXJnZXQoZW50aXR5LCB0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoY3JlZFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuSURfVE9LRU46XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmdDcmVkZW50aWFscy5pZFRva2Vuc1tjYWNoZUtleV0gPSBlbnRpdHkgYXMgSWRUb2tlbkVudGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOOlxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nQ3JlZGVudGlhbHMuYWNjZXNzVG9rZW5zW2NhY2hlS2V5XSA9IGVudGl0eSBhcyBBY2Nlc3NUb2tlbkVudGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQ3JlZGVudGlhbFR5cGUuUkVGUkVTSF9UT0tFTjpcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGluZ0NyZWRlbnRpYWxzLnJlZnJlc2hUb2tlbnNbY2FjaGVLZXldID0gZW50aXR5IGFzIFJlZnJlc2hUb2tlbkVudGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2hpbmdDcmVkZW50aWFscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYWxsIGFjY291bnRzIGFuZCByZWxhdGVkIHRva2VucyBmcm9tIGNhY2hlLlxyXG4gICAgICovXHJcbiAgICByZW1vdmVBbGxBY2NvdW50cygpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBhbGxDYWNoZUtleXMgPSB0aGlzLmdldEtleXMoKTtcclxuICAgICAgICBhbGxDYWNoZUtleXMuZm9yRWFjaCgoY2FjaGVLZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZW50aXR5OiBBY2NvdW50RW50aXR5IHwgbnVsbCA9IHRoaXMuZ2V0QWNjb3VudChjYWNoZUtleSk7XHJcbiAgICAgICAgICAgIGlmICghZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVBY2NvdW50KGNhY2hlS2V5KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGEgYm9vbGVhbiBpZiB0aGUgZ2l2ZW4gYWNjb3VudCBpcyByZW1vdmVkXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudFxyXG4gICAgICovXHJcbiAgICByZW1vdmVBY2NvdW50KGFjY291bnRLZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnQgPSB0aGlzLmdldEFjY291bnQoYWNjb3VudEtleSkgYXMgQWNjb3VudEVudGl0eTtcclxuICAgICAgICBpZiAoIWFjY291bnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZU5vQWNjb3VudEZvdW5kRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnJlbW92ZUFjY291bnRDb250ZXh0KGFjY291bnQpICYmIHRoaXMucmVtb3ZlSXRlbShhY2NvdW50S2V5LCBDYWNoZVNjaGVtYVR5cGUuQUNDT1VOVCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyBhIGJvb2xlYW4gaWYgdGhlIGdpdmVuIGFjY291bnQgaXMgcmVtb3ZlZFxyXG4gICAgICogQHBhcmFtIGFjY291bnRcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQWNjb3VudENvbnRleHQoYWNjb3VudDogQWNjb3VudEVudGl0eSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGFsbENhY2hlS2V5cyA9IHRoaXMuZ2V0S2V5cygpO1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRJZCA9IGFjY291bnQuZ2VuZXJhdGVBY2NvdW50SWQoKTtcclxuXHJcbiAgICAgICAgYWxsQ2FjaGVLZXlzLmZvckVhY2goKGNhY2hlS2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGFueSBub24tY3JlZGVudGlhbCB0eXBlIGNhY2hlIGVudGl0aWVzXHJcbiAgICAgICAgICAgIGlmIChDcmVkZW50aWFsRW50aXR5LmdldENyZWRlbnRpYWxUeXBlKGNhY2hlS2V5KSA9PT0gQ29uc3RhbnRzLk5PVF9ERUZJTkVEKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlRW50aXR5OiBDcmVkZW50aWFsRW50aXR5ID0gdGhpcy5nZXRJdGVtKGNhY2hlS2V5LCBDYWNoZVNjaGVtYVR5cGUuQ1JFREVOVElBTCkgYXMgQ3JlZGVudGlhbEVudGl0eTtcclxuXHJcbiAgICAgICAgICAgIGlmICghIWNhY2hlRW50aXR5ICYmIGFjY291bnRJZCA9PT0gY2FjaGVFbnRpdHkuZ2VuZXJhdGVBY2NvdW50SWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDcmVkZW50aWFsKGNhY2hlRW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgYSBib29sZWFuIGlmIHRoZSBnaXZlbiBjcmVkZW50aWFsIGlzIHJlbW92ZWRcclxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFsXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNyZWRlbnRpYWwoY3JlZGVudGlhbDogQ3JlZGVudGlhbEVudGl0eSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGNyZWRlbnRpYWwuZ2VuZXJhdGVDcmVkZW50aWFsS2V5KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlSXRlbShrZXksIENhY2hlU2NoZW1hVHlwZS5DUkVERU5USUFMKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYWxsIGFwcCBtZXRhZGF0YSBvYmplY3RzIGZyb20gY2FjaGUuXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUFwcE1ldGFkYXRhKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGFsbENhY2hlS2V5cyA9IHRoaXMuZ2V0S2V5cygpO1xyXG4gICAgICAgIGFsbENhY2hlS2V5cy5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0FwcE1ldGFkYXRhKGNhY2hlS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGNhY2hlS2V5LCBDYWNoZVNjaGVtYVR5cGUuQVBQX01FVEFEQVRBKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlIHRoZSBjYWNoZWQgY3JlZGVudGlhbHMgaW50byBhIGNhY2hlcmVjb3JkXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudFxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVzXHJcbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcclxuICAgICAqL1xyXG4gICAgcmVhZENhY2hlUmVjb3JkKGFjY291bnQ6IEFjY291bnRJbmZvLCBjbGllbnRJZDogc3RyaW5nLCBzY29wZXM6IFNjb3BlU2V0LCBlbnZpcm9ubWVudDogc3RyaW5nKTogQ2FjaGVSZWNvcmQge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZEFjY291bnQgPSB0aGlzLnJlYWRBY2NvdW50RnJvbUNhY2hlKGFjY291bnQpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZElkVG9rZW4gPSB0aGlzLnJlYWRJZFRva2VuRnJvbUNhY2hlKGNsaWVudElkLCBhY2NvdW50KTtcclxuICAgICAgICBjb25zdCBjYWNoZWRBY2Nlc3NUb2tlbiA9IHRoaXMucmVhZEFjY2Vzc1Rva2VuRnJvbUNhY2hlKGNsaWVudElkLCBhY2NvdW50LCBzY29wZXMpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZFJlZnJlc2hUb2tlbiA9IHRoaXMucmVhZFJlZnJlc2hUb2tlbkZyb21DYWNoZShjbGllbnRJZCwgYWNjb3VudCwgZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZEFwcE1ldGFkYXRhID0gdGhpcy5yZWFkQXBwTWV0YWRhdGFGcm9tQ2FjaGUoZW52aXJvbm1lbnQsIGNsaWVudElkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYWNjb3VudDogY2FjaGVkQWNjb3VudCxcclxuICAgICAgICAgICAgaWRUb2tlbjogY2FjaGVkSWRUb2tlbixcclxuICAgICAgICAgICAgYWNjZXNzVG9rZW46IGNhY2hlZEFjY2Vzc1Rva2VuLFxyXG4gICAgICAgICAgICByZWZyZXNoVG9rZW46IGNhY2hlZFJlZnJlc2hUb2tlbixcclxuICAgICAgICAgICAgYXBwTWV0YWRhdGE6IGNhY2hlZEFwcE1ldGFkYXRhLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZSBBY2NvdW50RW50aXR5IGZyb20gY2FjaGVcclxuICAgICAqIEBwYXJhbSBhY2NvdW50XHJcbiAgICAgKi9cclxuICAgIHJlYWRBY2NvdW50RnJvbUNhY2hlKGFjY291bnQ6IEFjY291bnRJbmZvKTogQWNjb3VudEVudGl0eSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRLZXk6IHN0cmluZyA9IEFjY291bnRFbnRpdHkuZ2VuZXJhdGVBY2NvdW50Q2FjaGVLZXkoYWNjb3VudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWNjb3VudChhY2NvdW50S2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlIElkVG9rZW5FbnRpdHkgZnJvbSBjYWNoZVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudFxyXG4gICAgICogQHBhcmFtIGlucHV0UmVhbG1cclxuICAgICAqL1xyXG4gICAgcmVhZElkVG9rZW5Gcm9tQ2FjaGUoY2xpZW50SWQ6IHN0cmluZywgYWNjb3VudDogQWNjb3VudEluZm8pOiBJZFRva2VuRW50aXR5IHwgbnVsbCB7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlbktleTogc3RyaW5nID0gQ3JlZGVudGlhbEVudGl0eS5nZW5lcmF0ZUNyZWRlbnRpYWxDYWNoZUtleShcclxuICAgICAgICAgICAgYWNjb3VudC5ob21lQWNjb3VudElkLFxyXG4gICAgICAgICAgICBhY2NvdW50LmVudmlyb25tZW50LFxyXG4gICAgICAgICAgICBDcmVkZW50aWFsVHlwZS5JRF9UT0tFTixcclxuICAgICAgICAgICAgY2xpZW50SWQsXHJcbiAgICAgICAgICAgIGFjY291bnQudGVuYW50SWRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDcmVkZW50aWFsKGlkVG9rZW5LZXkpIGFzIElkVG9rZW5FbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZSBBY2Nlc3NUb2tlbkVudGl0eSBmcm9tIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gY2xpZW50SWRcclxuICAgICAqIEBwYXJhbSBhY2NvdW50XHJcbiAgICAgKiBAcGFyYW0gc2NvcGVzXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRSZWFsbVxyXG4gICAgICovXHJcbiAgICByZWFkQWNjZXNzVG9rZW5Gcm9tQ2FjaGUoY2xpZW50SWQ6IHN0cmluZywgYWNjb3VudDogQWNjb3VudEluZm8sIHNjb3BlczogU2NvcGVTZXQpOiBBY2Nlc3NUb2tlbkVudGl0eSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuRmlsdGVyOiBDcmVkZW50aWFsRmlsdGVyID0ge1xyXG4gICAgICAgICAgICBob21lQWNjb3VudElkOiBhY2NvdW50LmhvbWVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGVudmlyb25tZW50OiBhY2NvdW50LmVudmlyb25tZW50LFxyXG4gICAgICAgICAgICBjcmVkZW50aWFsVHlwZTogQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOLFxyXG4gICAgICAgICAgICBjbGllbnRJZCxcclxuICAgICAgICAgICAgcmVhbG06IGFjY291bnQudGVuYW50SWQsXHJcbiAgICAgICAgICAgIHRhcmdldDogc2NvcGVzLnByaW50U2NvcGVzTG93ZXJDYXNlKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbENhY2hlOiBDcmVkZW50aWFsQ2FjaGUgPSB0aGlzLmdldENyZWRlbnRpYWxzRmlsdGVyZWRCeShhY2Nlc3NUb2tlbkZpbHRlcik7XHJcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW5zID0gT2JqZWN0LmtleXMoY3JlZGVudGlhbENhY2hlLmFjY2Vzc1Rva2VucykubWFwKChrZXkpID0+IGNyZWRlbnRpYWxDYWNoZS5hY2Nlc3NUb2tlbnNba2V5XSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG51bUFjY2Vzc1Rva2VucyA9IGFjY2Vzc1Rva2Vucy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKG51bUFjY2Vzc1Rva2VucyA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW1BY2Nlc3NUb2tlbnMgPiAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVNdWx0aXBsZU1hdGNoaW5nVG9rZW5zSW5DYWNoZUVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYWNjZXNzVG9rZW5zWzBdIGFzIEFjY2Vzc1Rva2VuRW50aXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHRvIHJldHJpZXZlIHRoZSBhcHByb3ByaWF0ZSByZWZyZXNoIHRva2VuIGZyb20gY2FjaGVcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZFxyXG4gICAgICogQHBhcmFtIGFjY291bnRcclxuICAgICAqIEBwYXJhbSBmYW1pbHlSVFxyXG4gICAgICovXHJcbiAgICByZWFkUmVmcmVzaFRva2VuRnJvbUNhY2hlKGNsaWVudElkOiBzdHJpbmcsIGFjY291bnQ6IEFjY291bnRJbmZvLCBmYW1pbHlSVDogYm9vbGVhbik6IFJlZnJlc2hUb2tlbkVudGl0eSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IGlkID0gZmFtaWx5UlQgPyBUSEVfRkFNSUxZX0lEIDogbnVsbDtcclxuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW5GaWx0ZXI6IENyZWRlbnRpYWxGaWx0ZXIgPSB7XHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWQ6IGFjY291bnQuaG9tZUFjY291bnRJZCxcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IGFjY291bnQuZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxUeXBlOiBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOLFxyXG4gICAgICAgICAgICBjbGllbnRJZDogY2xpZW50SWQsXHJcbiAgICAgICAgICAgIGZhbWlseUlkOiBpZFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxDYWNoZTogQ3JlZGVudGlhbENhY2hlID0gdGhpcy5nZXRDcmVkZW50aWFsc0ZpbHRlcmVkQnkocmVmcmVzaFRva2VuRmlsdGVyKTtcclxuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW5zID0gT2JqZWN0LmtleXMoY3JlZGVudGlhbENhY2hlLnJlZnJlc2hUb2tlbnMpLm1hcCgoa2V5KSA9PiBjcmVkZW50aWFsQ2FjaGUucmVmcmVzaFRva2Vuc1trZXldKTtcclxuXHJcbiAgICAgICAgY29uc3QgbnVtUmVmcmVzaFRva2VucyA9IHJlZnJlc2hUb2tlbnMubGVuZ3RoO1xyXG4gICAgICAgIGlmIChudW1SZWZyZXNoVG9rZW5zIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWRkcmVzcyB0aGUgZWxzZSBjYXNlIGFmdGVyIHJlbW92ZSBmdW5jdGlvbnMgYWRkcmVzcyBlbnZpcm9ubWVudCBhbGlhc2VzXHJcblxyXG4gICAgICAgIHJldHVybiByZWZyZXNoVG9rZW5zWzBdIGFzIFJlZnJlc2hUb2tlbkVudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlIEFwcE1ldGFkYXRhRW50aXR5IGZyb20gY2FjaGVcclxuICAgICAqL1xyXG4gICAgcmVhZEFwcE1ldGFkYXRhRnJvbUNhY2hlKGVudmlyb25tZW50OiBzdHJpbmcsIGNsaWVudElkOiBzdHJpbmcpOiBBcHBNZXRhZGF0YUVudGl0eSB7XHJcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBBcHBNZXRhZGF0YUVudGl0eS5nZW5lcmF0ZUFwcE1ldGFkYXRhQ2FjaGVLZXkoZW52aXJvbm1lbnQsIGNsaWVudElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBcHBNZXRhZGF0YShjYWNoZUtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIGZhbWlseV9pZCB2YWx1ZSBhc3NvY2lhdGVkICB3aXRoIEZPQ0lcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKi9cclxuICAgIGlzQXBwTWV0YWRhdGFGT0NJKGVudmlyb25tZW50OiBzdHJpbmcsIGNsaWVudElkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBhcHBNZXRhZGF0YSA9IHRoaXMucmVhZEFwcE1ldGFkYXRhRnJvbUNhY2hlKGVudmlyb25tZW50LCBjbGllbnRJZCk7XHJcbiAgICAgICAgcmV0dXJuIGFwcE1ldGFkYXRhICYmIGFwcE1ldGFkYXRhLmZhbWlseUlkID09PSBUSEVfRkFNSUxZX0lEO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGVscGVyIHRvIG1hdGNoIGFjY291bnQgaWRzXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbWF0Y2hIb21lQWNjb3VudElkKGVudGl0eTogQWNjb3VudEVudGl0eSB8IENyZWRlbnRpYWxFbnRpdHksIGhvbWVBY2NvdW50SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBlbnRpdHkuaG9tZUFjY291bnRJZCAmJiBob21lQWNjb3VudElkID09PSBlbnRpdHkuaG9tZUFjY291bnRJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGhlbHBlciB0byBtYXRjaCBhc3NlcnRpb25cclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIG9ib0Fzc2VydGlvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hdGNoT2JvQXNzZXJ0aW9uKGVudGl0eTogQWNjb3VudEVudGl0eSB8IENyZWRlbnRpYWxFbnRpdHksIG9ib0Fzc2VydGlvbjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eS5vYm9Bc3NlcnRpb24gJiYgb2JvQXNzZXJ0aW9uID09PSBlbnRpdHkub2JvQXNzZXJ0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGVscGVyIHRvIG1hdGNoIGVudmlyb25tZW50XHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hdGNoRW52aXJvbm1lbnQoZW50aXR5OiBBY2NvdW50RW50aXR5IHwgQ3JlZGVudGlhbEVudGl0eSB8IEFwcE1ldGFkYXRhRW50aXR5LCBlbnZpcm9ubWVudDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgY2xvdWRNZXRhZGF0YSA9IFRydXN0ZWRBdXRob3JpdHkuZ2V0Q2xvdWREaXNjb3ZlcnlNZXRhZGF0YShlbnZpcm9ubWVudCk7XHJcbiAgICAgICAgaWYgKGNsb3VkTWV0YWRhdGEgJiYgY2xvdWRNZXRhZGF0YS5hbGlhc2VzLmluZGV4T2YoZW50aXR5LmVudmlyb25tZW50KSA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGVscGVyIHRvIG1hdGNoIGNyZWRlbnRpYWwgdHlwZVxyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICogQHBhcmFtIGNyZWRlbnRpYWxUeXBlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbWF0Y2hDcmVkZW50aWFsVHlwZShlbnRpdHk6IENyZWRlbnRpYWxFbnRpdHksIGNyZWRlbnRpYWxUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKGVudGl0eS5jcmVkZW50aWFsVHlwZSAmJiBjcmVkZW50aWFsVHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbnRpdHkuY3JlZGVudGlhbFR5cGUudG9Mb3dlckNhc2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBoZWxwZXIgdG8gbWF0Y2ggY2xpZW50IGlkc1xyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbWF0Y2hDbGllbnRJZChlbnRpdHk6IENyZWRlbnRpYWxFbnRpdHkgfCBBcHBNZXRhZGF0YUVudGl0eSwgY2xpZW50SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBlbnRpdHkuY2xpZW50SWQgJiYgY2xpZW50SWQgPT09IGVudGl0eS5jbGllbnRJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGhlbHBlciB0byBtYXRjaCBmYW1pbHkgaWRzXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5XHJcbiAgICAgKiBAcGFyYW0gZmFtaWx5SWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXRjaEZhbWlseUlkKGVudGl0eTogQ3JlZGVudGlhbEVudGl0eSB8IEFwcE1ldGFkYXRhRW50aXR5LCBmYW1pbHlJZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eS5mYW1pbHlJZCAmJiBmYW1pbHlJZCA9PT0gZW50aXR5LmZhbWlseUlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGVscGVyIHRvIG1hdGNoIHJlYWxtXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5XHJcbiAgICAgKiBAcGFyYW0gcmVhbG1cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXRjaFJlYWxtKGVudGl0eTogQWNjb3VudEVudGl0eSB8IENyZWRlbnRpYWxFbnRpdHksIHJlYWxtOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZW50aXR5LnJlYWxtICYmIHJlYWxtID09PSBlbnRpdHkucmVhbG07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHRhcmdldCBzY29wZXMgYXJlIGEgc3Vic2V0IG9mIHRoZSBjdXJyZW50IGVudGl0eSdzIHNjb3BlcywgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICogQHBhcmFtIHRhcmdldFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hdGNoVGFyZ2V0KGVudGl0eTogQ3JlZGVudGlhbEVudGl0eSwgdGFyZ2V0OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZW50aXR5LmNyZWRlbnRpYWxUeXBlICE9PSBDcmVkZW50aWFsVHlwZS5BQ0NFU1NfVE9LRU4gfHwgU3RyaW5nVXRpbHMuaXNFbXB0eShlbnRpdHkudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbnRpdHlTY29wZVNldDogU2NvcGVTZXQgPSBTY29wZVNldC5mcm9tU3RyaW5nKGVudGl0eS50YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RUYXJnZXRTY29wZVNldDogU2NvcGVTZXQgPSBTY29wZVNldC5mcm9tU3RyaW5nKHRhcmdldCk7XHJcblxyXG4gICAgICAgIGlmICghcmVxdWVzdFRhcmdldFNjb3BlU2V0LmNvbnRhaW5zT25seURlZmF1bHRTY29wZXMoKSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0VGFyZ2V0U2NvcGVTZXQucmVtb3ZlRGVmYXVsdFNjb3BlcygpOyAvLyBpZ25vcmUgZGVmYXVsdCBzY29wZXNcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eVNjb3BlU2V0LmNvbnRhaW5zU2NvcGVTZXQocmVxdWVzdFRhcmdldFNjb3BlU2V0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgaWYgYSBnaXZlbiBjYWNoZSBlbnRpdHkgaXMgb2YgdGhlIHR5cGUgYXBwbWV0YWRhdGFcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0FwcE1ldGFkYXRhKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKEFQUF9NRVRBREFUQSkgIT09IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHRvIGNvbnZlcnQgc2VyaWFsaXplZCBkYXRhIHRvIG9iamVjdFxyXG4gICAgICogQHBhcmFtIG9ialxyXG4gICAgICogQHBhcmFtIGpzb25cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRvT2JqZWN0PFQ+KG9iajogVCwganNvbjogb2JqZWN0KTogVCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgaW4ganNvbikge1xyXG4gICAgICAgICAgICBvYmpbcHJvcGVydHlOYW1lXSA9IGpzb25bcHJvcGVydHlOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlZmF1bHRTdG9yYWdlQ2xhc3MgZXh0ZW5kcyBDYWNoZU1hbmFnZXIge1xyXG4gICAgc2V0SXRlbSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBub3RJbXBsRXJyID0gXCJTdG9yYWdlIGludGVyZmFjZSAtIHNldEl0ZW0oKSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgZm9yIHRoZSBjYWNoZVN0b3JhZ2UgaW50ZXJmYWNlLlwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9XHJcbiAgICBnZXRJdGVtKCk6IHN0cmluZyB8IG9iamVjdCB7XHJcbiAgICAgICAgY29uc3Qgbm90SW1wbEVyciA9IFwiU3RvcmFnZSBpbnRlcmZhY2UgLSBnZXRJdGVtKCkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGZvciB0aGUgY2FjaGVTdG9yYWdlIGludGVyZmFjZS5cIjtcclxuICAgICAgICB0aHJvdyBBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEVycm9yKG5vdEltcGxFcnIpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSXRlbSgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBub3RJbXBsRXJyID0gXCJTdG9yYWdlIGludGVyZmFjZSAtIHJlbW92ZUl0ZW0oKSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgZm9yIHRoZSBjYWNoZVN0b3JhZ2UgaW50ZXJmYWNlLlwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9XHJcbiAgICBjb250YWluc0tleSgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBub3RJbXBsRXJyID0gXCJTdG9yYWdlIGludGVyZmFjZSAtIGNvbnRhaW5zS2V5KCkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGZvciB0aGUgY2FjaGVTdG9yYWdlIGludGVyZmFjZS5cIjtcclxuICAgICAgICB0aHJvdyBBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEVycm9yKG5vdEltcGxFcnIpO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5cygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3Qgbm90SW1wbEVyciA9IFwiU3RvcmFnZSBpbnRlcmZhY2UgLSBnZXRLZXlzKCkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGZvciB0aGUgY2FjaGVTdG9yYWdlIGludGVyZmFjZS5cIjtcclxuICAgICAgICB0aHJvdyBBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEVycm9yKG5vdEltcGxFcnIpO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgbm90SW1wbEVyciA9IFwiU3RvcmFnZSBpbnRlcmZhY2UgLSBjbGVhcigpIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCBmb3IgdGhlIGNhY2hlU3RvcmFnZSBpbnRlcmZhY2UuXCI7XHJcbiAgICAgICAgdGhyb3cgQXV0aEVycm9yLmNyZWF0ZVVuZXhwZWN0ZWRFcnJvcihub3RJbXBsRXJyKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IElOZXR3b3JrTW9kdWxlIH0gZnJvbSBcIi4uL25ldHdvcmsvSU5ldHdvcmtNb2R1bGVcIjtcclxuaW1wb3J0IHsgSUNyeXB0bywgUGtjZUNvZGVzIH0gZnJvbSBcIi4uL2NyeXB0by9JQ3J5cHRvXCI7XHJcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9BdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgSUxvZ2dlckNhbGxiYWNrLCBMb2dMZXZlbCB9IGZyb20gXCIuLi9sb2dnZXIvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi9wYWNrYWdlLmpzb25cIjtcclxuaW1wb3J0IHsgQXV0aG9yaXR5IH0gZnJvbSBcIi4uL2F1dGhvcml0eS9BdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgQ2FjaGVNYW5hZ2VyLCBEZWZhdWx0U3RvcmFnZUNsYXNzIH0gZnJvbSBcIi4uL2NhY2hlL0NhY2hlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIH0gZnJvbSBcIi4uL3RlbGVtZXRyeS9zZXJ2ZXIvU2VydmVyVGVsZW1ldHJ5TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBQcm90b2NvbE1vZGUgfSBmcm9tIFwiLi4vYXV0aG9yaXR5L1Byb3RvY29sTW9kZVwiO1xyXG5pbXBvcnQgeyBJQ2FjaGVQbHVnaW4gfSBmcm9tIFwiLi4vY2FjaGUvaW50ZXJmYWNlL0lDYWNoZVBsdWdpblwiO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZSB9IGZyb20gXCIuLi9jYWNoZS9pbnRlcmZhY2UvSVNlcmlhbGl6YWJsZVRva2VuQ2FjaGVcIjtcclxuXHJcbi8vIFRva2VuIHJlbmV3YWwgb2Zmc2V0IGRlZmF1bHQgaW4gc2Vjb25kc1xyXG5jb25zdCBERUZBVUxUX1RPS0VOX1JFTkVXQUxfT0ZGU0VUX1NFQyA9IDMwMDtcclxuXHJcbi8qKlxyXG4gKiBVc2UgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIGNvbmZpZ3VyZSBNU0FMIE1vZHVsZXMgYW5kIGluaXRpYWxpemUgdGhlIGJhc2UgaW50ZXJmYWNlcyBmb3IgTVNBTC5cclxuICpcclxuICogVGhpcyBvYmplY3QgYWxsb3dzIHlvdSB0byBjb25maWd1cmUgaW1wb3J0YW50IGVsZW1lbnRzIG9mIE1TQUwgZnVuY3Rpb25hbGl0eTpcclxuICogLSBhdXRoT3B0aW9ucyAgICAgICAgICAgICAgICAtIEF1dGhlbnRpY2F0aW9uIGZvciBhcHBsaWNhdGlvblxyXG4gKiAtIGNyeXB0b0ludGVyZmFjZSAgICAgICAgICAgIC0gSW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIGZ1bmN0aW9uc1xyXG4gKiAtIGxpYnJhcnlJbmZvICAgICAgICAgICAgICAgIC0gTGlicmFyeSBtZXRhZGF0YVxyXG4gKiAtIGxvZ2dlck9wdGlvbnMgICAgICAgICAgICAgIC0gTG9nZ2luZyBmb3IgYXBwbGljYXRpb25cclxuICogLSBuZXR3b3JrSW50ZXJmYWNlICAgICAgICAgICAtIE5ldHdvcmsgaW1wbGVtZW50YXRpb25cclxuICogLSBzdG9yYWdlSW50ZXJmYWNlICAgICAgICAgICAtIFN0b3JhZ2UgaW1wbGVtZW50YXRpb25cclxuICogLSBzeXN0ZW1PcHRpb25zICAgICAgICAgICAgICAtIEFkZGl0aW9uYWwgbGlicmFyeSBvcHRpb25zXHJcbiAqIC0gY2xpZW50Q3JlZGVudGlhbHMgICAgICAgICAgLSBDcmVkZW50aWFscyBvcHRpb25zIGZvciBjb25maWRlbnRpYWwgY2xpZW50c1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlndXJhdGlvbiA9IHtcclxuICAgIGF1dGhPcHRpb25zOiBBdXRoT3B0aW9ucyxcclxuICAgIHN5c3RlbU9wdGlvbnM/OiBTeXN0ZW1PcHRpb25zLFxyXG4gICAgbG9nZ2VyT3B0aW9ucz86IExvZ2dlck9wdGlvbnMsXHJcbiAgICBzdG9yYWdlSW50ZXJmYWNlPzogQ2FjaGVNYW5hZ2VyLFxyXG4gICAgbmV0d29ya0ludGVyZmFjZT86IElOZXR3b3JrTW9kdWxlLFxyXG4gICAgY3J5cHRvSW50ZXJmYWNlPzogSUNyeXB0byxcclxuICAgIGNsaWVudENyZWRlbnRpYWxzPzogQ2xpZW50Q3JlZGVudGlhbHMsXHJcbiAgICBsaWJyYXJ5SW5mbz86IExpYnJhcnlJbmZvXHJcbiAgICBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyPzogU2VydmVyVGVsZW1ldHJ5TWFuYWdlcixcclxuICAgIHBlcnNpc3RlbmNlUGx1Z2luPzogSUNhY2hlUGx1Z2luLFxyXG4gICAgc2VyaWFsaXphYmxlQ2FjaGU/OiBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVzZSB0aGlzIHRvIGNvbmZpZ3VyZSB0aGUgYXV0aCBvcHRpb25zIGluIHRoZSBDbGllbnRDb25maWd1cmF0aW9uIG9iamVjdFxyXG4gKlxyXG4gKiAtIGNsaWVudElkICAgICAgICAgICAgICAgICAgICAtIENsaWVudCBJRCBvZiB5b3VyIGFwcCByZWdpc3RlcmVkIHdpdGggb3VyIEFwcGxpY2F0aW9uIHJlZ2lzdHJhdGlvbiBwb3J0YWwgOiBodHRwczovL3BvcnRhbC5henVyZS5jb20vI2JsYWRlL01pY3Jvc29mdF9BQURfSUFNL0FjdGl2ZURpcmVjdG9yeU1lbnVCbGFkZS9SZWdpc3RlcmVkQXBwc1ByZXZpZXcgaW4gTWljcm9zb2Z0IElkZW50aXR5IFBsYXRmb3JtXHJcbiAqIC0gYXV0aG9yaXR5ICAgICAgICAgICAgICAgICAgIC0gWW91IGNhbiBjb25maWd1cmUgYSBzcGVjaWZpYyBhdXRob3JpdHksIGRlZmF1bHRzIHRvIFwiIFwiIG9yIFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tL2NvbW1vblwiXHJcbiAqIC0ga25vd25BdXRob3JpdGllcyAgICAgICAgICAgIC0gQW4gYXJyYXkgb2YgVVJJcyB0aGF0IGFyZSBrbm93biB0byBiZSB2YWxpZC4gVXNlZCBpbiBCMkMgc2NlbmFyaW9zLlxyXG4gKiAtIGNsb3VkRGlzY292ZXJ5TWV0YWRhdGEgICAgICAtIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGNsb3VkIGRpc2NvdmVyeSByZXNwb25zZS4gVXNlZCBpbiBBQUQgc2NlbmFyaW9zLlxyXG4gKiAtIGNsaWVudENhcGFiaWxpdGllcyAgICAgICAgICAtIEFycmF5IG9mIGNhcGFiaWxpdGllcyB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjbGFpbXMuYWNjZXNzX3Rva2VuLnhtc19jYyByZXF1ZXN0IHByb3BlcnR5IG9uIGV2ZXJ5IG5ldHdvcmsgcmVxdWVzdC5cclxuICogLSBwcm90b2NvbE1vZGUgICAgICAgICAgICAgICAgLSBFbnVtIHRoYXQgcmVwcmVzZW50cyB0aGUgcHJvdG9jb2wgdGhhdCBtc2FsIGZvbGxvd3MuIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHByb3BlciBlbmRwb2ludHMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBBdXRoT3B0aW9ucyA9IHtcclxuICAgIGNsaWVudElkOiBzdHJpbmc7XHJcbiAgICBhdXRob3JpdHk/OiBBdXRob3JpdHk7XHJcbiAgICBrbm93bkF1dGhvcml0aWVzPzogQXJyYXk8c3RyaW5nPjtcclxuICAgIGNsb3VkRGlzY292ZXJ5TWV0YWRhdGE/OiBzdHJpbmc7XHJcbiAgICBjbGllbnRDYXBhYmlsaXRpZXM/OiBBcnJheTxzdHJpbmc+O1xyXG4gICAgcHJvdG9jb2xNb2RlPzogUHJvdG9jb2xNb2RlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVzZSB0aGlzIHRvIGNvbmZpZ3VyZSB0b2tlbiByZW5ld2FsIGluZm8gaW4gdGhlIENvbmZpZ3VyYXRpb24gb2JqZWN0XHJcbiAqXHJcbiAqIC0gdG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kcyAgICAtIFNldHMgdGhlIHdpbmRvdyBvZiBvZmZzZXQgbmVlZGVkIHRvIHJlbmV3IHRoZSB0b2tlbiBiZWZvcmUgZXhwaXJ5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTeXN0ZW1PcHRpb25zID0ge1xyXG4gICAgdG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kcz86IG51bWJlcjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAgVXNlIHRoaXMgdG8gY29uZmlndXJlIHRoZSBsb2dnaW5nIHRoYXQgTVNBTCBkb2VzLCBieSBjb25maWd1cmluZyBsb2dnZXIgb3B0aW9ucyBpbiB0aGUgQ29uZmlndXJhdGlvbiBvYmplY3RcclxuICpcclxuICogLSBsb2dnZXJDYWxsYmFjayAgICAgICAgICAgICAgICAtIENhbGxiYWNrIGZvciBsb2dnZXJcclxuICogLSBwaWlMb2dnaW5nRW5hYmxlZCAgICAgICAgICAgICAtIFNldHMgd2hldGhlciBwaWkgbG9nZ2luZyBpcyBlbmFibGVkXHJcbiAqIC0gbG9nTGV2ZWwgICAgICAgICAgICAgICAgICAgICAgLSBTZXRzIHRoZSBsZXZlbCBhdCB3aGljaCBsb2dnaW5nIGhhcHBlbnNcclxuICovXHJcbmV4cG9ydCB0eXBlIExvZ2dlck9wdGlvbnMgPSB7XHJcbiAgICBsb2dnZXJDYWxsYmFjaz86IElMb2dnZXJDYWxsYmFjayxcclxuICAgIHBpaUxvZ2dpbmdFbmFibGVkPzogYm9vbGVhbixcclxuICAgIGxvZ0xldmVsPzogTG9nTGV2ZWxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMaWJyYXJ5LXNwZWNpZmljIG9wdGlvbnNcclxuICovXHJcbmV4cG9ydCB0eXBlIExpYnJhcnlJbmZvID0ge1xyXG4gICAgc2t1OiBzdHJpbmcsXHJcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXHJcbiAgICBjcHU6IHN0cmluZyxcclxuICAgIG9zOiBzdHJpbmdcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVkZW50aWFscyBmb3IgY29uZmlkZW50aWFsIGNsaWVudHNcclxuICovXHJcbmV4cG9ydCB0eXBlIENsaWVudENyZWRlbnRpYWxzID0ge1xyXG4gICAgY2xpZW50U2VjcmV0Pzogc3RyaW5nLFxyXG4gICAgY2xpZW50QXNzZXJ0aW9uPyA6IHtcclxuICAgICAgICBhc3NlcnRpb246IHN0cmluZyxcclxuICAgICAgICBhc3NlcnRpb25UeXBlOiBzdHJpbmdcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBERUZBVUxUX0FVVEhfT1BUSU9OUzogQXV0aE9wdGlvbnMgPSB7XHJcbiAgICBjbGllbnRJZDogXCJcIixcclxuICAgIGF1dGhvcml0eTogbnVsbCxcclxuICAgIGtub3duQXV0aG9yaXRpZXM6IFtdLFxyXG4gICAgY2xvdWREaXNjb3ZlcnlNZXRhZGF0YTogXCJcIixcclxuICAgIGNsaWVudENhcGFiaWxpdGllczogW10sXHJcbiAgICBwcm90b2NvbE1vZGU6IFByb3RvY29sTW9kZS5BQURcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NZU1RFTV9PUFRJT05TOiBTeXN0ZW1PcHRpb25zID0ge1xyXG4gICAgdG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kczogREVGQVVMVF9UT0tFTl9SRU5FV0FMX09GRlNFVF9TRUNcclxufTtcclxuXHJcbmNvbnN0IERFRkFVTFRfTE9HR0VSX0lNUExFTUVOVEFUSU9OOiBMb2dnZXJPcHRpb25zID0ge1xyXG4gICAgbG9nZ2VyQ2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAvLyBhbGxvdyB1c2VycyB0byBub3Qgc2V0IGxvZ2dlckNhbGxiYWNrXHJcbiAgICB9LFxyXG4gICAgcGlpTG9nZ2luZ0VuYWJsZWQ6IGZhbHNlLFxyXG4gICAgbG9nTGV2ZWw6IExvZ0xldmVsLkluZm9cclxufTtcclxuXHJcbmNvbnN0IERFRkFVTFRfTkVUV09SS19JTVBMRU1FTlRBVElPTjogSU5ldHdvcmtNb2R1bGUgPSB7XHJcbiAgICBhc3luYyBzZW5kR2V0UmVxdWVzdEFzeW5jPFQ+KCk6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIGNvbnN0IG5vdEltcGxFcnIgPSBcIk5ldHdvcmsgaW50ZXJmYWNlIC0gc2VuZEdldFJlcXVlc3RBc3luYygpIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZFwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgc2VuZFBvc3RSZXF1ZXN0QXN5bmM8VD4oKTogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgY29uc3Qgbm90SW1wbEVyciA9IFwiTmV0d29yayBpbnRlcmZhY2UgLSBzZW5kUG9zdFJlcXVlc3RBc3luYygpIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZFwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9XHJcbn07XHJcblxyXG5jb25zdCBERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTjogSUNyeXB0byA9IHtcclxuICAgIGNyZWF0ZU5ld0d1aWQ6ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5vdEltcGxFcnIgPSBcIkNyeXB0byBpbnRlcmZhY2UgLSBjcmVhdGVOZXdHdWlkKCkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkXCI7XHJcbiAgICAgICAgdGhyb3cgQXV0aEVycm9yLmNyZWF0ZVVuZXhwZWN0ZWRFcnJvcihub3RJbXBsRXJyKTtcclxuICAgIH0sXHJcbiAgICBiYXNlNjREZWNvZGU6ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5vdEltcGxFcnIgPSBcIkNyeXB0byBpbnRlcmZhY2UgLSBiYXNlNjREZWNvZGUoKSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWRcIjtcclxuICAgICAgICB0aHJvdyBBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEVycm9yKG5vdEltcGxFcnIpO1xyXG4gICAgfSxcclxuICAgIGJhc2U2NEVuY29kZTogKCk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgY29uc3Qgbm90SW1wbEVyciA9IFwiQ3J5cHRvIGludGVyZmFjZSAtIGJhc2U2NEVuY29kZSgpIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZFwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2VuZXJhdGVQa2NlQ29kZXMoKTogUHJvbWlzZTxQa2NlQ29kZXM+IHtcclxuICAgICAgICBjb25zdCBub3RJbXBsRXJyID0gXCJDcnlwdG8gaW50ZXJmYWNlIC0gZ2VuZXJhdGVQa2NlQ29kZXMoKSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWRcIjtcclxuICAgICAgICB0aHJvdyBBdXRoRXJyb3IuY3JlYXRlVW5leHBlY3RlZEVycm9yKG5vdEltcGxFcnIpO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGdldFB1YmxpY0tleVRodW1icHJpbnQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBub3RJbXBsRXJyID0gXCJDcnlwdG8gaW50ZXJmYWNlIC0gZ2V0UHVibGljS2V5VGh1bWJwcmludCgpIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZFwiO1xyXG4gICAgICAgIHRocm93IEF1dGhFcnJvci5jcmVhdGVVbmV4cGVjdGVkRXJyb3Iobm90SW1wbEVycik7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgc2lnbkp3dCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IG5vdEltcGxFcnIgPSBcIkNyeXB0byBpbnRlcmZhY2UgLSBzaWduSnd0KCkgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkXCI7XHJcbiAgICAgICAgdGhyb3cgQXV0aEVycm9yLmNyZWF0ZVVuZXhwZWN0ZWRFcnJvcihub3RJbXBsRXJyKTtcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IERFRkFVTFRfTElCUkFSWV9JTkZPOiBMaWJyYXJ5SW5mbyA9IHtcclxuICAgIHNrdTogQ29uc3RhbnRzLlNLVSxcclxuICAgIHZlcnNpb246IHZlcnNpb24sXHJcbiAgICBjcHU6IFwiXCIsXHJcbiAgICBvczogXCJcIlxyXG59O1xyXG5cclxuY29uc3QgREVGQVVMVF9DTElFTlRfQ1JFREVOVElBTFM6IENsaWVudENyZWRlbnRpYWxzID0ge1xyXG4gICAgY2xpZW50U2VjcmV0OiBcIlwiLFxyXG4gICAgY2xpZW50QXNzZXJ0aW9uOiBudWxsXHJcbn07XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdGhhdCBzZXRzIHRoZSBkZWZhdWx0IG9wdGlvbnMgd2hlbiBub3QgZXhwbGljaXRseSBjb25maWd1cmVkIGZyb20gYXBwIGRldmVsb3BlclxyXG4gKlxyXG4gKiBAcGFyYW0gQ29uZmlndXJhdGlvblxyXG4gKlxyXG4gKiBAcmV0dXJucyBDb25maWd1cmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRDbGllbnRDb25maWd1cmF0aW9uKFxyXG4gICAge1xyXG4gICAgICAgIGF1dGhPcHRpb25zOiB1c2VyQXV0aE9wdGlvbnMsXHJcbiAgICAgICAgc3lzdGVtT3B0aW9uczogdXNlclN5c3RlbU9wdGlvbnMsXHJcbiAgICAgICAgbG9nZ2VyT3B0aW9uczogdXNlckxvZ2dlck9wdGlvbixcclxuICAgICAgICBzdG9yYWdlSW50ZXJmYWNlOiBzdG9yYWdlSW1wbGVtZW50YXRpb24sXHJcbiAgICAgICAgbmV0d29ya0ludGVyZmFjZTogbmV0d29ya0ltcGxlbWVudGF0aW9uLFxyXG4gICAgICAgIGNyeXB0b0ludGVyZmFjZTogY3J5cHRvSW1wbGVtZW50YXRpb24sXHJcbiAgICAgICAgY2xpZW50Q3JlZGVudGlhbHM6IGNsaWVudENyZWRlbnRpYWxzLFxyXG4gICAgICAgIGxpYnJhcnlJbmZvOiBsaWJyYXJ5SW5mbyxcclxuICAgICAgICBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyOiBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLCBcclxuICAgICAgICBwZXJzaXN0ZW5jZVBsdWdpbjogcGVyc2lzdGVuY2VQbHVnaW4sXHJcbiAgICAgICAgc2VyaWFsaXphYmxlQ2FjaGU6IHNlcmlhbGl6YWJsZUNhY2hlXHJcbiAgICB9IDogQ2xpZW50Q29uZmlndXJhdGlvbik6IENsaWVudENvbmZpZ3VyYXRpb24ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhdXRoT3B0aW9uczogeyAuLi5ERUZBVUxUX0FVVEhfT1BUSU9OUywgLi4udXNlckF1dGhPcHRpb25zIH0sXHJcbiAgICAgICAgc3lzdGVtT3B0aW9uczogeyAuLi5ERUZBVUxUX1NZU1RFTV9PUFRJT05TLCAuLi51c2VyU3lzdGVtT3B0aW9ucyB9LFxyXG4gICAgICAgIGxvZ2dlck9wdGlvbnM6IHsgLi4uREVGQVVMVF9MT0dHRVJfSU1QTEVNRU5UQVRJT04sIC4uLnVzZXJMb2dnZXJPcHRpb24gfSxcclxuICAgICAgICBzdG9yYWdlSW50ZXJmYWNlOiBzdG9yYWdlSW1wbGVtZW50YXRpb24gfHwgbmV3IERlZmF1bHRTdG9yYWdlQ2xhc3MoKSxcclxuICAgICAgICBuZXR3b3JrSW50ZXJmYWNlOiBuZXR3b3JrSW1wbGVtZW50YXRpb24gfHwgREVGQVVMVF9ORVRXT1JLX0lNUExFTUVOVEFUSU9OLFxyXG4gICAgICAgIGNyeXB0b0ludGVyZmFjZTogY3J5cHRvSW1wbGVtZW50YXRpb24gfHwgREVGQVVMVF9DUllQVE9fSU1QTEVNRU5UQVRJT04sXHJcbiAgICAgICAgY2xpZW50Q3JlZGVudGlhbHM6IGNsaWVudENyZWRlbnRpYWxzIHx8IERFRkFVTFRfQ0xJRU5UX0NSRURFTlRJQUxTLFxyXG4gICAgICAgIGxpYnJhcnlJbmZvOiB7IC4uLkRFRkFVTFRfTElCUkFSWV9JTkZPLCAuLi5saWJyYXJ5SW5mbyB9LFxyXG4gICAgICAgIHNlcnZlclRlbGVtZXRyeU1hbmFnZXI6IHNlcnZlclRlbGVtZXRyeU1hbmFnZXIgfHwgbnVsbCxcclxuICAgICAgICBwZXJzaXN0ZW5jZVBsdWdpbjogcGVyc2lzdGVuY2VQbHVnaW4gfHwgbnVsbCxcclxuICAgICAgICBzZXJpYWxpemFibGVDYWNoZTogc2VyaWFsaXphYmxlQ2FjaGUgfHwgbnVsbFxyXG4gICAgfTtcclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gXCIuL0F1dGhFcnJvclwiO1xyXG5cclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIHdpdGggdGhlIHNlcnZlciBjb2RlLCBmb3IgZXhhbXBsZSwgdW5hdmFpbGFiaWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG5cclxuICAgIHN1YkVycm9yOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9yTWVzc2FnZT86IHN0cmluZywgc3ViRXJyb3I/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xyXG4gICAgICAgIHRoaXMuc3ViRXJyb3IgPSBzdWJFcnJvcjtcclxuXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNlcnZlckVycm9yLnByb3RvdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBOZXR3b3JrUmVzcG9uc2UgfSBmcm9tIFwiLi9OZXR3b3JrTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZSB9IGZyb20gXCIuLi9yZXNwb25zZS9TZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBIZWFkZXJOYW1lcywgQ2FjaGVTY2hlbWFUeXBlLCBUaHJvdHRsaW5nQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBDYWNoZU1hbmFnZXIgfSBmcm9tIFwiLi4vY2FjaGUvQ2FjaGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFNlcnZlckVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL1NlcnZlckVycm9yXCI7XHJcbmltcG9ydCB7IFJlcXVlc3RUaHVtYnByaW50IH0gZnJvbSBcIi4vUmVxdWVzdFRodW1icHJpbnRcIjtcclxuaW1wb3J0IHsgVGhyb3R0bGluZ0VudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9UaHJvdHRsaW5nRW50aXR5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGhyb3R0bGluZ1V0aWxzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByZXBhcmVzIGEgUmVxdWVzdFRodW1icHJpbnQgdG8gYmUgc3RvcmVkIGFzIGEga2V5LlxyXG4gICAgICogQHBhcmFtIHRodW1icHJpbnRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdlbmVyYXRlVGhyb3R0bGluZ1N0b3JhZ2VLZXkodGh1bWJwcmludDogUmVxdWVzdFRodW1icHJpbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgJHtUaHJvdHRsaW5nQ29uc3RhbnRzLlRIUk9UVExJTkdfUFJFRklYfS4ke0pTT04uc3RyaW5naWZ5KHRodW1icHJpbnQpfWA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBuZWNlc3NhcnkgdGhyb3R0bGluZyBjaGVja3MgYmVmb3JlIGEgbmV0d29yayByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIGNhY2hlTWFuYWdlclxyXG4gICAgICogQHBhcmFtIHRodW1icHJpbnQgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwcmVQcm9jZXNzKGNhY2hlTWFuYWdlcjogQ2FjaGVNYW5hZ2VyLCB0aHVtYnByaW50OiBSZXF1ZXN0VGh1bWJwcmludCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IFRocm90dGxpbmdVdGlscy5nZW5lcmF0ZVRocm90dGxpbmdTdG9yYWdlS2V5KHRodW1icHJpbnQpO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2FjaGVNYW5hZ2VyLmdldEl0ZW0oa2V5LCBDYWNoZVNjaGVtYVR5cGUuVEhST1RUTElORykgYXMgVGhyb3R0bGluZ0VudGl0eTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS50aHJvdHRsZVRpbWUgPCBEYXRlLm5vdygpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZU1hbmFnZXIucmVtb3ZlSXRlbShrZXksIENhY2hlU2NoZW1hVHlwZS5USFJPVFRMSU5HKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VydmVyRXJyb3IodmFsdWUuZXJyb3JDb2Rlcy5qb2luKFwiIFwiKSwgdmFsdWUuZXJyb3JNZXNzYWdlLCB2YWx1ZS5zdWJFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgbmVjZXNzYXJ5IHRocm90dGxpbmcgY2hlY2tzIGFmdGVyIGEgbmV0d29yayByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIGNhY2hlTWFuYWdlclxyXG4gICAgICogQHBhcmFtIHRodW1icHJpbnQgXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqLyAgICBcclxuICAgIHN0YXRpYyBwb3N0UHJvY2VzcyhjYWNoZU1hbmFnZXI6IENhY2hlTWFuYWdlciwgdGh1bWJwcmludDogUmVxdWVzdFRodW1icHJpbnQsIHJlc3BvbnNlOiBOZXR3b3JrUmVzcG9uc2U8U2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2U+KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKFRocm90dGxpbmdVdGlscy5jaGVja1Jlc3BvbnNlU3RhdHVzKHJlc3BvbnNlKSB8fCBUaHJvdHRsaW5nVXRpbHMuY2hlY2tSZXNwb25zZUZvclJldHJ5QWZ0ZXIocmVzcG9uc2UpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRodW1icHJpbnRWYWx1ZTogVGhyb3R0bGluZ0VudGl0eSA9IHtcclxuICAgICAgICAgICAgICAgIHRocm90dGxlVGltZTogVGhyb3R0bGluZ1V0aWxzLmNhbGN1bGF0ZVRocm90dGxlVGltZShwYXJzZUludChyZXNwb25zZS5oZWFkZXJzW0hlYWRlck5hbWVzLlJFVFJZX0FGVEVSXSkpLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmJvZHkuZXJyb3IsXHJcbiAgICAgICAgICAgICAgICBlcnJvckNvZGVzOiByZXNwb25zZS5ib2R5LmVycm9yX2NvZGVzLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiByZXNwb25zZS5ib2R5LmVycm9yX2Rlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgc3ViRXJyb3I6IHJlc3BvbnNlLmJvZHkuc3ViZXJyb3JcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FjaGVNYW5hZ2VyLnNldEl0ZW0oXHJcbiAgICAgICAgICAgICAgICBUaHJvdHRsaW5nVXRpbHMuZ2VuZXJhdGVUaHJvdHRsaW5nU3RvcmFnZUtleSh0aHVtYnByaW50KSxcclxuICAgICAgICAgICAgICAgIHRodW1icHJpbnRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIENhY2hlU2NoZW1hVHlwZS5USFJPVFRMSU5HXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGEgTmV0d29ya1Jlc3BvbnNlIG9iamVjdCdzIHN0YXR1cyBjb2RlcyBhZ2FpbnN0IDQyOSBvciA1eHhcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2hlY2tSZXNwb25zZVN0YXR1cyhyZXNwb25zZTogTmV0d29ya1Jlc3BvbnNlPFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMgPT0gNDI5IHx8IHJlc3BvbnNlLnN0YXR1cyA+PSA1MDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgNjAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGEgTmV0d29ya1Jlc3BvbnNlIG9iamVjdCdzIFJldHJ5QWZ0ZXIgaGVhZGVyXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNoZWNrUmVzcG9uc2VGb3JSZXRyeUFmdGVyKHJlc3BvbnNlOiBOZXR3b3JrUmVzcG9uc2U8U2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2U+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoSGVhZGVyTmFtZXMuUkVUUllfQUZURVIpICYmIChyZXNwb25zZS5zdGF0dXMgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID49IDMwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIFVuaXgtdGltZSB2YWx1ZSBmb3IgYSB0aHJvdHRsZSB0byBleHBpcmUgZ2l2ZW4gdGhyb3R0bGVUaW1lIGluIHNlY29uZHMuXHJcbiAgICAgKiBAcGFyYW0gdGhyb3R0bGVUaW1lXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjYWxjdWxhdGVUaHJvdHRsZVRpbWUodGhyb3R0bGVUaW1lOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmKHRocm90dGxlVGltZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm90dGxlVGltZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZWNvbmRzID0gRGF0ZS5ub3coKSAvIDEwMDA7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4oXHJcbiAgICAgICAgICAgIGN1cnJlbnRTZWNvbmRzICsgKHRocm90dGxlVGltZSB8fCBUaHJvdHRsaW5nQ29uc3RhbnRzLkRFRkFVTFRfVEhST1RUTEVfVElNRV9TRUNPTkRTKSxcclxuICAgICAgICAgICAgY3VycmVudFNlY29uZHMgKyBUaHJvdHRsaW5nQ29uc3RhbnRzLkRFRkFVTFRfTUFYX1RIUk9UVExFX1RJTUVfU0VDT05EU1xyXG4gICAgICAgICkgKiAxMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlVGhyb3R0bGUoY2FjaGVNYW5hZ2VyOiBDYWNoZU1hbmFnZXIsIGNsaWVudElkOiBzdHJpbmcsIGF1dGhvcml0eTogc3RyaW5nLCBzY29wZXM6IEFycmF5PHN0cmluZz4sIGhvbWVBY2NvdW50SWRlbnRpZmllcj86IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHRodW1icHJpbnQ6IFJlcXVlc3RUaHVtYnByaW50ID0ge1xyXG4gICAgICAgICAgICBjbGllbnRJZCxcclxuICAgICAgICAgICAgYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBzY29wZXMsXHJcbiAgICAgICAgICAgIGhvbWVBY2NvdW50SWRlbnRpZmllclxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2VuZXJhdGVUaHJvdHRsaW5nU3RvcmFnZUtleSh0aHVtYnByaW50KTtcclxuICAgICAgICByZXR1cm4gY2FjaGVNYW5hZ2VyLnJlbW92ZUl0ZW0oa2V5LCBDYWNoZVNjaGVtYVR5cGUuVEhST1RUTElORyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJTmV0d29ya01vZHVsZSwgTmV0d29ya1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4vSU5ldHdvcmtNb2R1bGVcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFRodW1icHJpbnQgfSBmcm9tIFwiLi9SZXF1ZXN0VGh1bWJwcmludFwiO1xyXG5pbXBvcnQgeyBUaHJvdHRsaW5nVXRpbHMgfSBmcm9tIFwiLi9UaHJvdHRsaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgQ2FjaGVNYW5hZ2VyIH0gZnJvbSBcIi4uL2NhY2hlL0NhY2hlTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IHR5cGUgTmV0d29ya1Jlc3BvbnNlPFQ+ID0ge1xyXG4gICAgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuICAgIGJvZHk6IFQ7XHJcbiAgICBzdGF0dXM6IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBOZXR3b3JrTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIG5ldHdvcmtDbGllbnQ6IElOZXR3b3JrTW9kdWxlO1xyXG4gICAgcHJpdmF0ZSBjYWNoZU1hbmFnZXI6IENhY2hlTWFuYWdlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrQ2xpZW50OiBJTmV0d29ya01vZHVsZSwgY2FjaGVNYW5hZ2VyOiBDYWNoZU1hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLm5ldHdvcmtDbGllbnQgPSBuZXR3b3JrQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuY2FjaGVNYW5hZ2VyID0gY2FjaGVNYW5hZ2VyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JhcHMgc2VuZFBvc3RSZXF1ZXN0QXN5bmMgd2l0aCBuZWNlc3NhcnkgcHJlZmxpZ2h0IGFuZCBwb3N0ZmxpZ2h0IGxvZ2ljXHJcbiAgICAgKiBAcGFyYW0gdGh1bWJwcmludFxyXG4gICAgICogQHBhcmFtIHRva2VuRW5kcG9pbnRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNlbmRQb3N0UmVxdWVzdDxUPih0aHVtYnByaW50OiBSZXF1ZXN0VGh1bWJwcmludCwgdG9rZW5FbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBOZXR3b3JrUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPE5ldHdvcmtSZXNwb25zZTxUPj4ge1xyXG4gICAgICAgIFRocm90dGxpbmdVdGlscy5wcmVQcm9jZXNzKHRoaXMuY2FjaGVNYW5hZ2VyLCB0aHVtYnByaW50KTtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubmV0d29ya0NsaWVudC5zZW5kUG9zdFJlcXVlc3RBc3luYzxUPih0b2tlbkVuZHBvaW50LCBvcHRpb25zKTtcclxuICAgICAgICBUaHJvdHRsaW5nVXRpbHMucG9zdFByb2Nlc3ModGhpcy5jYWNoZU1hbmFnZXIsIHRodW1icHJpbnQsIHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgLy8gUGxhY2Vob2xkZXIgZm9yIFRlbGVtZXRyeSBob29rXHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb24sIGJ1aWxkQ2xpZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb25maWcvQ2xpZW50Q29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBJTmV0d29ya01vZHVsZSB9IGZyb20gXCIuLi9uZXR3b3JrL0lOZXR3b3JrTW9kdWxlXCI7XHJcbmltcG9ydCB7IE5ldHdvcmtNYW5hZ2VyLCBOZXR3b3JrUmVzcG9uc2UgfSBmcm9tIFwiLi4vbmV0d29yay9OZXR3b3JrTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBJQ3J5cHRvIH0gZnJvbSBcIi4uL2NyeXB0by9JQ3J5cHRvXCI7XHJcbmltcG9ydCB7IEF1dGhvcml0eSB9IGZyb20gXCIuLi9hdXRob3JpdHkvQXV0aG9yaXR5XCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9sb2dnZXIvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IEFBRFNlcnZlclBhcmFtS2V5cywgQ29uc3RhbnRzLCBIZWFkZXJOYW1lcyB9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2UgfSBmcm9tIFwiLi4vcmVzcG9uc2UvU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2VcIjtcclxuaW1wb3J0IHsgVHJ1c3RlZEF1dGhvcml0eSB9IGZyb20gXCIuLi9hdXRob3JpdHkvVHJ1c3RlZEF1dGhvcml0eVwiO1xyXG5pbXBvcnQgeyBDYWNoZU1hbmFnZXIgfSBmcm9tIFwiLi4vY2FjaGUvQ2FjaGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFNlcnZlclRlbGVtZXRyeU1hbmFnZXIgfSBmcm9tIFwiLi4vdGVsZW1ldHJ5L3NlcnZlci9TZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFJlcXVlc3RUaHVtYnByaW50IH0gZnJvbSBcIi4uL25ldHdvcmsvUmVxdWVzdFRodW1icHJpbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBCYXNlIGFwcGxpY2F0aW9uIGNsYXNzIHdoaWNoIHdpbGwgY29uc3RydWN0IHJlcXVlc3RzIHRvIHNlbmQgdG8gYW5kIGhhbmRsZSByZXNwb25zZXMgZnJvbSB0aGUgTWljcm9zb2Z0IFNUUyB1c2luZyB0aGUgYXV0aG9yaXphdGlvbiBjb2RlIGZsb3cuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNsaWVudCB7XHJcbiAgICAvLyBMb2dnZXIgb2JqZWN0XHJcbiAgICBwdWJsaWMgbG9nZ2VyOiBMb2dnZXI7XHJcblxyXG4gICAgLy8gQXBwbGljYXRpb24gY29uZmlnXHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBDbGllbnRDb25maWd1cmF0aW9uO1xyXG5cclxuICAgIC8vIENyeXB0byBJbnRlcmZhY2VcclxuICAgIHByb3RlY3RlZCBjcnlwdG9VdGlsczogSUNyeXB0bztcclxuXHJcbiAgICAvLyBTdG9yYWdlIEludGVyZmFjZVxyXG4gICAgcHJvdGVjdGVkIGNhY2hlTWFuYWdlcjogQ2FjaGVNYW5hZ2VyO1xyXG5cclxuICAgIC8vIE5ldHdvcmsgSW50ZXJmYWNlXHJcbiAgICBwcm90ZWN0ZWQgbmV0d29ya0NsaWVudDogSU5ldHdvcmtNb2R1bGU7XHJcblxyXG4gICAgLy8gU2VydmVyIFRlbGVtZXRyeSBNYW5hZ2VyXHJcbiAgICBwcm90ZWN0ZWQgc2VydmVyVGVsZW1ldHJ5TWFuYWdlcjogU2VydmVyVGVsZW1ldHJ5TWFuYWdlcjtcclxuXHJcbiAgICAvLyBOZXR3b3JrIE1hbmFnZXJcclxuICAgIHByb3RlY3RlZCBuZXR3b3JrTWFuYWdlcjogTmV0d29ya01hbmFnZXI7XHJcblxyXG4gICAgLy8gRGVmYXVsdCBhdXRob3JpdHkgb2JqZWN0XHJcbiAgICBwcm90ZWN0ZWQgYXV0aG9yaXR5OiBBdXRob3JpdHk7XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb246IENsaWVudENvbmZpZ3VyYXRpb24pIHtcclxuICAgICAgICAvLyBTZXQgdGhlIGNvbmZpZ3VyYXRpb25cclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGJ1aWxkQ2xpZW50Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbG9nZ2VyXHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgTG9nZ2VyKHRoaXMuY29uZmlnLmxvZ2dlck9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGNyeXB0b1xyXG4gICAgICAgIHRoaXMuY3J5cHRvVXRpbHMgPSB0aGlzLmNvbmZpZy5jcnlwdG9JbnRlcmZhY2U7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgc3RvcmFnZSBpbnRlcmZhY2VcclxuICAgICAgICB0aGlzLmNhY2hlTWFuYWdlciA9IHRoaXMuY29uZmlnLnN0b3JhZ2VJbnRlcmZhY2U7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgbmV0d29yayBpbnRlcmZhY2VcclxuICAgICAgICB0aGlzLm5ldHdvcmtDbGllbnQgPSB0aGlzLmNvbmZpZy5uZXR3b3JrSW50ZXJmYWNlO1xyXG5cclxuICAgICAgICAvLyBTZXQgdGhlIE5ldHdvcmtNYW5hZ2VyXHJcbiAgICAgICAgdGhpcy5uZXR3b3JrTWFuYWdlciA9IG5ldyBOZXR3b3JrTWFuYWdlcih0aGlzLm5ldHdvcmtDbGllbnQsIHRoaXMuY2FjaGVNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IFRlbGVtZXRyeU1hbmFnZXJcclxuICAgICAgICB0aGlzLnNlcnZlclRlbGVtZXRyeU1hbmFnZXIgPSB0aGlzLmNvbmZpZy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyO1xyXG5cclxuICAgICAgICBUcnVzdGVkQXV0aG9yaXR5LnNldFRydXN0ZWRBdXRob3JpdGllc0Zyb21Db25maWcodGhpcy5jb25maWcuYXV0aE9wdGlvbnMua25vd25BdXRob3JpdGllcywgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xvdWREaXNjb3ZlcnlNZXRhZGF0YSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXV0aG9yaXR5ID0gdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuYXV0aG9yaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBkZWZhdWx0IGhlYWRlcnMgZm9yIHJlcXVlc3RzIHRvIHRva2VuIGVuZHBvaW50XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjcmVhdGVEZWZhdWx0VG9rZW5SZXF1ZXN0SGVhZGVycygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5jcmVhdGVEZWZhdWx0TGlicmFyeUhlYWRlcnMoKTtcclxuICAgICAgICBoZWFkZXJzW0hlYWRlck5hbWVzLkNPTlRFTlRfVFlQRV0gPSBDb25zdGFudHMuVVJMX0ZPUk1fQ09OVEVOVF9UWVBFO1xyXG4gICAgICAgIGhlYWRlcnNbSGVhZGVyTmFtZXMuWF9NU19MSUJfQ0FQQUJJTElUWV0gPSBIZWFkZXJOYW1lcy5YX01TX0xJQl9DQVBBQklMSVRZX1ZBTFVFO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnNbSGVhZGVyTmFtZXMuWF9DTElFTlRfQ1VSUl9URUxFTV0gPSB0aGlzLnNlcnZlclRlbGVtZXRyeU1hbmFnZXIuZ2VuZXJhdGVDdXJyZW50UmVxdWVzdEhlYWRlclZhbHVlKCk7XHJcbiAgICAgICAgICAgIGhlYWRlcnNbSGVhZGVyTmFtZXMuWF9DTElFTlRfTEFTVF9URUxFTV0gPSB0aGlzLnNlcnZlclRlbGVtZXRyeU1hbmFnZXIuZ2VuZXJhdGVMYXN0UmVxdWVzdEhlYWRlclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZExpYnJhcnlEYXRhXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjcmVhdGVEZWZhdWx0TGlicmFyeUhlYWRlcnMoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG5cclxuICAgICAgICAvLyBjbGllbnQgaW5mbyBoZWFkZXJzXHJcbiAgICAgICAgaGVhZGVyc1tBQURTZXJ2ZXJQYXJhbUtleXMuWF9DTElFTlRfU0tVXSA9IHRoaXMuY29uZmlnLmxpYnJhcnlJbmZvLnNrdTtcclxuICAgICAgICBoZWFkZXJzW0FBRFNlcnZlclBhcmFtS2V5cy5YX0NMSUVOVF9WRVJdID0gdGhpcy5jb25maWcubGlicmFyeUluZm8udmVyc2lvbjtcclxuICAgICAgICBoZWFkZXJzW0FBRFNlcnZlclBhcmFtS2V5cy5YX0NMSUVOVF9PU10gPSB0aGlzLmNvbmZpZy5saWJyYXJ5SW5mby5vcztcclxuICAgICAgICBoZWFkZXJzW0FBRFNlcnZlclBhcmFtS2V5cy5YX0NMSUVOVF9DUFVdID0gdGhpcy5jb25maWcubGlicmFyeUluZm8uY3B1O1xyXG5cclxuICAgICAgICByZXR1cm4gaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEh0dHAgcG9zdCB0byB0b2tlbiBlbmRwb2ludFxyXG4gICAgICogQHBhcmFtIHRva2VuRW5kcG9pbnRcclxuICAgICAqIEBwYXJhbSBxdWVyeVN0cmluZ1xyXG4gICAgICogQHBhcmFtIGhlYWRlcnNcclxuICAgICAqIEBwYXJhbSB0aHVtYnByaW50XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBleGVjdXRlUG9zdFRvVG9rZW5FbmRwb2ludCh0b2tlbkVuZHBvaW50OiBzdHJpbmcsIHF1ZXJ5U3RyaW5nOiBzdHJpbmcsIGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIHRodW1icHJpbnQ6IFJlcXVlc3RUaHVtYnByaW50KTogUHJvbWlzZTxOZXR3b3JrUmVzcG9uc2U8U2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2U+PiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm5ldHdvcmtNYW5hZ2VyLnNlbmRQb3N0UmVxdWVzdDxTZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZT4oXHJcbiAgICAgICAgICAgIHRodW1icHJpbnQsXHJcbiAgICAgICAgICAgIHRva2VuRW5kcG9pbnQsIFxyXG4gICAgICAgICAgICB7IGJvZHk6IHF1ZXJ5U3RyaW5nLCBoZWFkZXJzOiBoZWFkZXJzIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jb25maWcuc2VydmVyVGVsZW1ldHJ5TWFuYWdlciAmJiByZXNwb25zZS5zdGF0dXMgPCA1MDAgJiYgcmVzcG9uc2Uuc3RhdHVzICE9PSA0MjkpIHtcclxuICAgICAgICAgICAgLy8gVGVsZW1ldHJ5IGRhdGEgc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBieSBzZXJ2ZXIsIGNsZWFyIFRlbGVtZXRyeSBjYWNoZVxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLmNsZWFyVGVsZW1ldHJ5Q2FjaGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3JcIjtcclxuaW1wb3J0IHsgUHJvbXB0VmFsdWUsIENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXN9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgU3RyaW5nRGljdCB9IGZyb20gXCIuLi91dGlscy9Nc2FsVHlwZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgc2VydmVyIGNvbnN1bWFibGUgcGFyYW1zIGZyb20gdGhlIFwicmVxdWVzdFwiIG9iamVjdHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZXF1ZXN0VmFsaWRhdG9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gY2hlY2sgaWYgdGhlIGByZWRpcmVjdFVyaWAgaW4gdGhlIHJlcXVlc3QgaXMgYSBub24tbnVsbCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZVJlZGlyZWN0VXJpKHJlZGlyZWN0VXJpOiBzdHJpbmcpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzRW1wdHkocmVkaXJlY3RVcmkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVSZWRpcmVjdFVyaUVtcHR5RXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIHByb21wdCBzZW50IGJ5IHRoZSB1c2VyIGluIHRoZSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gcHJvbXB0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZVByb21wdChwcm9tcHQ6IHN0cmluZykgOiB2b2lkIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIFByb21wdFZhbHVlLkxPR0lOLFxyXG4gICAgICAgICAgICAgICAgUHJvbXB0VmFsdWUuU0VMRUNUX0FDQ09VTlQsXHJcbiAgICAgICAgICAgICAgICBQcm9tcHRWYWx1ZS5DT05TRU5ULFxyXG4gICAgICAgICAgICAgICAgUHJvbXB0VmFsdWUuTk9ORVxyXG4gICAgICAgICAgICBdLmluZGV4T2YocHJvbXB0KSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZUludmFsaWRQcm9tcHRFcnJvcihwcm9tcHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdmFsaWRhdGVDbGFpbXMoY2xhaW1zOiBzdHJpbmcpIDogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgSlNPTi5wYXJzZShjbGFpbXMpO1xyXG4gICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlSW52YWxpZENsYWltc1JlcXVlc3RFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gdmFsaWRhdGUgY29kZV9jaGFsbGVuZ2UgYW5kIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlTWV0aG9kXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMoY29kZUNoYWxsZW5nZTogc3RyaW5nLCBjb2RlQ2hhbGxlbmdlTWV0aG9kOiBzdHJpbmcpIDogdm9pZCAge1xyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KGNvZGVDaGFsbGVuZ2UpIHx8IFN0cmluZ1V0aWxzLmlzRW1wdHkoY29kZUNoYWxsZW5nZU1ldGhvZCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZUludmFsaWRDb2RlQ2hhbGxlbmdlUGFyYW1zRXJyb3IoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQ29kZUNoYWxsZW5nZU1ldGhvZChjb2RlQ2hhbGxlbmdlTWV0aG9kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VNZXRob2RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlQ29kZUNoYWxsZW5nZU1ldGhvZChjb2RlQ2hhbGxlbmdlTWV0aG9kOiBzdHJpbmcpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBDb2RlQ2hhbGxlbmdlTWV0aG9kVmFsdWVzLlBMQUlOLFxyXG4gICAgICAgICAgICAgICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5TMjU2XHJcbiAgICAgICAgICAgIF0uaW5kZXhPZihjb2RlQ2hhbGxlbmdlTWV0aG9kKSA8IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZUludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHVubmVjZXNzYXJ5IG9yIGR1cGxpY2F0ZSBxdWVyeSBwYXJhbWV0ZXJzIGZyb20gZXh0cmFRdWVyeVBhcmFtZXRlcnNcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzYW5pdGl6ZUVRUGFyYW1zKGVRUGFyYW1zOiBTdHJpbmdEaWN0LCBxdWVyeVBhcmFtczogTWFwPHN0cmluZywgc3RyaW5nPikgOiBTdHJpbmdEaWN0IHtcclxuICAgICAgICBpZiAoIWVRUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBxdWVyeSBwYXJhbWV0ZXJzIGFscmVhZHkgaW5jbHVkZWQgaW4gU1NPIHBhcmFtc1xyXG4gICAgICAgIHF1ZXJ5UGFyYW1zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVRUGFyYW1zW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBlUVBhcmFtc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlUVBhcmFtcztcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFBRFNlcnZlclBhcmFtS2V5cywgQ29uc3RhbnRzLCBSZXNwb25zZU1vZGUsIFNTT1R5cGVzLCBDbGllbnRJbmZvLCBBdXRoZW50aWNhdGlvblNjaGVtZSwgQ2xhaW1zUmVxdWVzdEtleXMgfSBmcm9tIFwiLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFNjb3BlU2V0IH0gZnJvbSBcIi4vU2NvcGVTZXRcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvclwiO1xyXG5pbXBvcnQgeyBTdHJpbmdEaWN0IH0gZnJvbSBcIi4uL3V0aWxzL01zYWxUeXBlc1wiO1xyXG5pbXBvcnQgeyBSZXF1ZXN0VmFsaWRhdG9yIH0gZnJvbSBcIi4vUmVxdWVzdFZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBMaWJyYXJ5SW5mbyB9IGZyb20gXCIuLi9jb25maWcvQ2xpZW50Q29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gXCIuLi91dGlscy9TdHJpbmdVdGlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyIHtcclxuXHJcbiAgICBwcml2YXRlIHBhcmFtZXRlcnM6IE1hcDxzdHJpbmcsIHN0cmluZz47XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCByZXNwb25zZV90eXBlID0gY29kZVxyXG4gICAgICovXHJcbiAgICBhZGRSZXNwb25zZVR5cGVDb2RlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoXHJcbiAgICAgICAgICAgIEFBRFNlcnZlclBhcmFtS2V5cy5SRVNQT05TRV9UWVBFLCBlbmNvZGVVUklDb21wb25lbnQoQ29uc3RhbnRzLkNPREVfUkVTUE9OU0VfVFlQRSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHJlc3BvbnNlX21vZGUuIGRlZmF1bHRzIHRvIHF1ZXJ5LlxyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlTW9kZVxyXG4gICAgICovXHJcbiAgICBhZGRSZXNwb25zZU1vZGUocmVzcG9uc2VNb2RlPzogUmVzcG9uc2VNb2RlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChcclxuICAgICAgICAgICAgQUFEU2VydmVyUGFyYW1LZXlzLlJFU1BPTlNFX01PREUsXHJcbiAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCgocmVzcG9uc2VNb2RlKSA/IHJlc3BvbnNlTW9kZSA6IFJlc3BvbnNlTW9kZS5RVUVSWSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHNjb3Blcy4gc2V0IGFkZE9pZGNTY29wZXMgdG8gZmFsc2UgdG8gcHJldmVudCBkZWZhdWx0IHNjb3BlcyBpbiBub24tdXNlciBzY2VuYXJpb3NcclxuICAgICAqIEBwYXJhbSBzY29wZVNldFxyXG4gICAgICogQHBhcmFtIGFkZE9pZGNTY29wZXNcclxuICAgICAqL1xyXG4gICAgYWRkU2NvcGVzKHNjb3Blczogc3RyaW5nW10sIGFkZE9pZGNTY29wZXM6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFNjb3BlcyA9IGFkZE9pZGNTY29wZXMgPyBbLi4uc2NvcGVzIHx8IFtdLCBDb25zdGFudHMuT1BFTklEX1NDT1BFLCBDb25zdGFudHMuUFJPRklMRV9TQ09QRV0gOiBzY29wZXMgfHwgW107XHJcbiAgICAgICAgY29uc3Qgc2NvcGVTZXQgPSBuZXcgU2NvcGVTZXQocmVxdWVzdFNjb3Blcyk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuU0NPUEUsIGVuY29kZVVSSUNvbXBvbmVudChzY29wZVNldC5wcmludFNjb3BlcygpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50SWRcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZFxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRJZChjbGllbnRJZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuQ0xJRU5UX0lELCBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50SWQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCByZWRpcmVjdF91cmlcclxuICAgICAqIEBwYXJhbSByZWRpcmVjdFVyaVxyXG4gICAgICovXHJcbiAgICBhZGRSZWRpcmVjdFVyaShyZWRpcmVjdFVyaTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgUmVxdWVzdFZhbGlkYXRvci52YWxpZGF0ZVJlZGlyZWN0VXJpKHJlZGlyZWN0VXJpKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5SRURJUkVDVF9VUkksIGVuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdFVyaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGRvbWFpbl9oaW50XHJcbiAgICAgKiBAcGFyYW0gZG9tYWluSGludFxyXG4gICAgICovXHJcbiAgICBhZGREb21haW5IaW50KGRvbWFpbkhpbnQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoU1NPVHlwZXMuRE9NQUlOX0hJTlQsIGVuY29kZVVSSUNvbXBvbmVudChkb21haW5IaW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgbG9naW5faGludFxyXG4gICAgICogQHBhcmFtIGxvZ2luSGludFxyXG4gICAgICovXHJcbiAgICBhZGRMb2dpbkhpbnQobG9naW5IaW50OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFNTT1R5cGVzLkxPR0lOX0hJTlQsIGVuY29kZVVSSUNvbXBvbmVudChsb2dpbkhpbnQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBzaWRcclxuICAgICAqIEBwYXJhbSBzaWQgXHJcbiAgICAgKi9cclxuICAgIGFkZFNpZChzaWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoU1NPVHlwZXMuU0lELCBlbmNvZGVVUklDb21wb25lbnQoc2lkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xhaW1zXHJcbiAgICAgKiBAcGFyYW0gY2xhaW1zXHJcbiAgICAgKi9cclxuICAgIGFkZENsYWltcyhjbGFpbXM6IHN0cmluZywgY2xpZW50Q2FwYWJpbGl0aWVzOiBBcnJheTxzdHJpbmc+KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VkQ2xhaW1zID0gdGhpcy5hZGRDbGllbnRDYXBhYmlsaXRpZXNUb0NsYWltcyhjbGFpbXMsIGNsaWVudENhcGFiaWxpdGllcyk7XHJcbiAgICAgICAgUmVxdWVzdFZhbGlkYXRvci52YWxpZGF0ZUNsYWltcyhtZXJnZWRDbGFpbXMpO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLkNMQUlNUywgZW5jb2RlVVJJQ29tcG9uZW50KG1lcmdlZENsYWltcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGNvcnJlbGF0aW9uSWRcclxuICAgICAqIEBwYXJhbSBjb3JyZWxhdGlvbklkXHJcbiAgICAgKi9cclxuICAgIGFkZENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuQ0xJRU5UX1JFUVVFU1RfSUQsIGVuY29kZVVSSUNvbXBvbmVudChjb3JyZWxhdGlvbklkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgbGlicmFyeSBpbmZvIHF1ZXJ5IHBhcmFtc1xyXG4gICAgICogQHBhcmFtIGxpYnJhcnlJbmZvXHJcbiAgICAgKi9cclxuICAgIGFkZExpYnJhcnlJbmZvKGxpYnJhcnlJbmZvOiBMaWJyYXJ5SW5mbyk6IHZvaWQge1xyXG4gICAgICAgIC8vIFRlbGVtZXRyeSBJbmZvXHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuWF9DTElFTlRfU0tVLCBsaWJyYXJ5SW5mby5za3UpO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLlhfQ0xJRU5UX1ZFUiwgbGlicmFyeUluZm8udmVyc2lvbik7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuWF9DTElFTlRfT1MsIGxpYnJhcnlJbmZvLm9zKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5YX0NMSUVOVF9DUFUsIGxpYnJhcnlJbmZvLmNwdSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgcHJvbXB0XHJcbiAgICAgKiBAcGFyYW0gcHJvbXB0XHJcbiAgICAgKi9cclxuICAgIGFkZFByb21wdChwcm9tcHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIFJlcXVlc3RWYWxpZGF0b3IudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KGAke0FBRFNlcnZlclBhcmFtS2V5cy5QUk9NUFR9YCwgZW5jb2RlVVJJQ29tcG9uZW50KHByb21wdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgYWRkU3RhdGUoc3RhdGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShzdGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuU1RBVEUsIGVuY29kZVVSSUNvbXBvbmVudChzdGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBub25jZVxyXG4gICAgICogQHBhcmFtIG5vbmNlXHJcbiAgICAgKi9cclxuICAgIGFkZE5vbmNlKG5vbmNlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5OT05DRSwgZW5jb2RlVVJJQ29tcG9uZW50KG5vbmNlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY29kZV9jaGFsbGVuZ2UgYW5kIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogLSB0aHJvdyBpZiBlaXRoZXIgb2YgdGhlbSBhcmUgbm90IHBhc3NlZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlTWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGFkZENvZGVDaGFsbGVuZ2VQYXJhbXMoXHJcbiAgICAgICAgY29kZUNoYWxsZW5nZTogc3RyaW5nLFxyXG4gICAgICAgIGNvZGVDaGFsbGVuZ2VNZXRob2Q6IHN0cmluZ1xyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgUmVxdWVzdFZhbGlkYXRvci52YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMoY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZCk7XHJcbiAgICAgICAgaWYgKGNvZGVDaGFsbGVuZ2UgJiYgY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5DT0RFX0NIQUxMRU5HRSwgZW5jb2RlVVJJQ29tcG9uZW50KGNvZGVDaGFsbGVuZ2UpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuQ09ERV9DSEFMTEVOR0VfTUVUSE9ELCBlbmNvZGVVUklDb21wb25lbnQoY29kZUNoYWxsZW5nZU1ldGhvZCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVJbnZhbGlkQ29kZUNoYWxsZW5nZVBhcmFtc0Vycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHRoZSBgYXV0aG9yaXphdGlvbl9jb2RlYCBwYXNzZWQgYnkgdGhlIHVzZXIgdG8gZXhjaGFuZ2UgZm9yIGEgdG9rZW5cclxuICAgICAqIEBwYXJhbSBjb2RlXHJcbiAgICAgKi9cclxuICAgIGFkZEF1dGhvcml6YXRpb25Db2RlKGNvZGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLkNPREUsIGVuY29kZVVSSUNvbXBvbmVudChjb2RlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgdGhlIGBhdXRob3JpemF0aW9uX2NvZGVgIHBhc3NlZCBieSB0aGUgdXNlciB0byBleGNoYW5nZSBmb3IgYSB0b2tlblxyXG4gICAgICogQHBhcmFtIGNvZGVcclxuICAgICAqL1xyXG4gICAgYWRkRGV2aWNlQ29kZShjb2RlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5ERVZJQ0VfQ09ERSwgZW5jb2RlVVJJQ29tcG9uZW50KGNvZGUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCB0aGUgYHJlZnJlc2hUb2tlbmAgcGFzc2VkIGJ5IHRoZSB1c2VyXHJcbiAgICAgKiBAcGFyYW0gcmVmcmVzaFRva2VuXHJcbiAgICAgKi9cclxuICAgIGFkZFJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW46IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLlJFRlJFU0hfVE9LRU4sIGVuY29kZVVSSUNvbXBvbmVudChyZWZyZXNoVG9rZW4pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCB0aGUgYGNvZGVfdmVyaWZpZXJgIHBhc3NlZCBieSB0aGUgdXNlciB0byBleGNoYW5nZSBmb3IgYSB0b2tlblxyXG4gICAgICogQHBhcmFtIGNvZGVWZXJpZmllclxyXG4gICAgICovXHJcbiAgICBhZGRDb2RlVmVyaWZpZXIoY29kZVZlcmlmaWVyOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5DT0RFX1ZFUklGSUVSLCBlbmNvZGVVUklDb21wb25lbnQoY29kZVZlcmlmaWVyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50X3NlY3JldFxyXG4gICAgICogQHBhcmFtIGNsaWVudFNlY3JldFxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRTZWNyZXQoY2xpZW50U2VjcmV0OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5DTElFTlRfU0VDUkVULCBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50U2VjcmV0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50QXNzZXJ0aW9uIGZvciBjb25maWRlbnRpYWwgY2xpZW50IGZsb3dzXHJcbiAgICAgKiBAcGFyYW0gY2xpZW50QXNzZXJ0aW9uXHJcbiAgICAgKi9cclxuICAgIGFkZENsaWVudEFzc2VydGlvbihjbGllbnRBc3NlcnRpb246IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLkNMSUVOVF9BU1NFUlRJT04sIGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRBc3NlcnRpb24pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBjbGllbnRBc3NlcnRpb25UeXBlIGZvciBjb25maWRlbnRpYWwgY2xpZW50IGZsb3dzXHJcbiAgICAgKiBAcGFyYW0gY2xpZW50QXNzZXJ0aW9uVHlwZVxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRBc3NlcnRpb25UeXBlKGNsaWVudEFzc2VydGlvblR5cGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLkNMSUVOVF9BU1NFUlRJT05fVFlQRSwgZW5jb2RlVVJJQ29tcG9uZW50KGNsaWVudEFzc2VydGlvblR5cGUpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgT0JPIGFzc2VydGlvbiBmb3IgY29uZmlkZW50aWFsIGNsaWVudCBmbG93c1xyXG4gICAgICogQHBhcmFtIGNsaWVudEFzc2VydGlvblxyXG4gICAgICovXHJcbiAgICBhZGRPYm9Bc3NlcnRpb24ob2JvQXNzZXJ0aW9uOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5PQk9fQVNTRVJUSU9OLCBlbmNvZGVVUklDb21wb25lbnQob2JvQXNzZXJ0aW9uKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogYWRkIGdyYW50IHR5cGVcclxuICAgICAqIEBwYXJhbSBncmFudFR5cGVcclxuICAgICAqL1xyXG4gICAgYWRkUmVxdWVzdFRva2VuVXNlKHRva2VuVXNlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEFBRFNlcnZlclBhcmFtS2V5cy5SRVFVRVNURURfVE9LRU5fVVNFLCBlbmNvZGVVUklDb21wb25lbnQodG9rZW5Vc2UpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBncmFudCB0eXBlXHJcbiAgICAgKiBAcGFyYW0gZ3JhbnRUeXBlXHJcbiAgICAgKi9cclxuICAgIGFkZEdyYW50VHlwZShncmFudFR5cGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQUFEU2VydmVyUGFyYW1LZXlzLkdSQU5UX1RZUEUsIGVuY29kZVVSSUNvbXBvbmVudChncmFudFR5cGUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBjbGllbnQgaW5mb1xyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgYWRkQ2xpZW50SW5mbygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KENsaWVudEluZm8sIFwiMVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBleHRyYVF1ZXJ5UGFyYW1zXHJcbiAgICAgKiBAcGFyYW0gZVFwYXJhbXNcclxuICAgICAqL1xyXG4gICAgYWRkRXh0cmFRdWVyeVBhcmFtZXRlcnMoZVFwYXJhbXM6IFN0cmluZ0RpY3QpOiB2b2lkIHtcclxuICAgICAgICBSZXF1ZXN0VmFsaWRhdG9yLnNhbml0aXplRVFQYXJhbXMoZVFwYXJhbXMsIHRoaXMucGFyYW1ldGVycyk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoZVFwYXJhbXMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KGtleSwgZVFwYXJhbXNba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2xpZW50Q2FwYWJpbGl0aWVzVG9DbGFpbXMoY2xhaW1zOiBzdHJpbmcsIGNsaWVudENhcGFiaWxpdGllczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG1lcmdlZENsYWltczogb2JqZWN0O1xyXG5cclxuICAgICAgICAvLyBQYXJzZSBwcm92aWRlZCBjbGFpbXMgaW50byBKU09OIG9iamVjdCBvciBpbml0aWFsaXplIGVtcHR5IG9iamVjdFxyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KGNsYWltcykpIHtcclxuICAgICAgICAgICAgbWVyZ2VkQ2xhaW1zID0ge307XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZENsYWltcyA9IEpTT04ucGFyc2UoY2xhaW1zKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IuY3JlYXRlSW52YWxpZENsYWltc1JlcXVlc3RFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xpZW50Q2FwYWJpbGl0aWVzICYmIGNsaWVudENhcGFiaWxpdGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICghbWVyZ2VkQ2xhaW1zLmhhc093blByb3BlcnR5KENsYWltc1JlcXVlc3RLZXlzLkFDQ0VTU19UT0tFTikpe1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGFjY2Vzc190b2tlbiBrZXkgdG8gY2xhaW1zIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQ2xhaW1zW0NsYWltc1JlcXVlc3RLZXlzLkFDQ0VTU19UT0tFTl0gPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHhtc19jYyBjbGFpbSB3aXRoIHByb3ZpZGVkIGNsaWVudENhcGFiaWxpdGllcyB0byBhY2Nlc3NfdG9rZW4ga2V5XHJcbiAgICAgICAgICAgIG1lcmdlZENsYWltc1tDbGFpbXNSZXF1ZXN0S2V5cy5BQ0NFU1NfVE9LRU5dW0NsYWltc1JlcXVlc3RLZXlzLlhNU19DQ10gPSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGNsaWVudENhcGFiaWxpdGllc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1lcmdlZENsYWltcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgcG9wX2p3ayB0byBxdWVyeSBwYXJhbXNcclxuICAgICAqIEBwYXJhbSBjbmZTdHJpbmcgXHJcbiAgICAgKi9cclxuICAgIGFkZFBvcFRva2VuKGNuZlN0cmluZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KGNuZlN0cmluZykpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuVE9LRU5fVFlQRSwgQXV0aGVudGljYXRpb25TY2hlbWUuUE9QKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChBQURTZXJ2ZXJQYXJhbUtleXMuUkVRX0NORiwgZW5jb2RlVVJJQ29tcG9uZW50KGNuZlN0cmluZykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gY3JlYXRlIGEgVVJMIGZyb20gdGhlIHBhcmFtcyBtYXBcclxuICAgICAqL1xyXG4gICAgY3JlYXRlUXVlcnlTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtZXRlckFycmF5OiBBcnJheTxzdHJpbmc+ID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJBcnJheS5wdXNoKGAke2tleX09JHt2YWx1ZX1gKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5UGFyYW1ldGVyQXJyYXkuam9pbihcIiZcIik7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBUb2tlbkNsYWltcyB9IGZyb20gXCIuL1Rva2VuQ2xhaW1zXCI7XHJcbmltcG9ydCB7IERlY29kZWRBdXRoVG9rZW4gfSBmcm9tIFwiLi9EZWNvZGVkQXV0aFRva2VuXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgSUNyeXB0byB9IGZyb20gXCIuLi9jcnlwdG8vSUNyeXB0b1wiO1xyXG5cclxuLyoqXHJcbiAqIEpXVCBUb2tlbiByZXByZXNlbnRhdGlvbiBjbGFzcy4gUGFyc2VzIHRva2VuIHN0cmluZyBhbmQgZ2VuZXJhdGVzIGNsYWltcyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0aFRva2VuIHtcclxuXHJcbiAgICAvLyBSYXcgVG9rZW4gc3RyaW5nXHJcbiAgICByYXdUb2tlbjogc3RyaW5nO1xyXG4gICAgLy8gQ2xhaW1zIGluc2lkZSB0b2tlblxyXG4gICAgY2xhaW1zOiBUb2tlbkNsYWltcztcclxuICAgIGNvbnN0cnVjdG9yKHJhd1Rva2VuOiBzdHJpbmcsIGNyeXB0bzogSUNyeXB0bykge1xyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KHJhd1Rva2VuKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlVG9rZW5OdWxsT3JFbXB0eUVycm9yKHJhd1Rva2VuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmF3VG9rZW4gPSByYXdUb2tlbjtcclxuICAgICAgICB0aGlzLmNsYWltcyA9IEF1dGhUb2tlbi5leHRyYWN0VG9rZW5DbGFpbXMocmF3VG9rZW4sIGNyeXB0byk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRyYWN0IHRva2VuIGJ5IGRlY29kaW5nIHRoZSByYXdUb2tlblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbmNvZGVkVG9rZW5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGV4dHJhY3RUb2tlbkNsYWltcyhlbmNvZGVkVG9rZW46IHN0cmluZywgY3J5cHRvOiBJQ3J5cHRvKTogVG9rZW5DbGFpbXMge1xyXG4gICAgICAgIC8vIHRva2VuIHdpbGwgYmUgZGVjb2RlZCB0byBnZXQgdGhlIHVzZXJuYW1lXHJcbiAgICAgICAgY29uc3QgZGVjb2RlZFRva2VuOiBEZWNvZGVkQXV0aFRva2VuID0gU3RyaW5nVXRpbHMuZGVjb2RlQXV0aFRva2VuKGVuY29kZWRUb2tlbik7XHJcbiAgICAgICAgaWYgKCFkZWNvZGVkVG9rZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2U2NFRva2VuUGF5bG9hZCA9IGRlY29kZWRUb2tlbi5KV1NQYXlsb2FkO1xyXG4gICAgICAgICAgICAvLyBiYXNlNjREZWNvZGUoKSBzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYW4gaXNzdWVcclxuICAgICAgICAgICAgY29uc3QgYmFzZTY0RGVjb2RlZCA9IGNyeXB0by5iYXNlNjREZWNvZGUoYmFzZTY0VG9rZW5QYXlsb2FkKTtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlZCkgYXMgVG9rZW5DbGFpbXM7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVUb2tlblBhcnNpbmdFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGNsYXNzIHdoaWNoIGV4cG9zZXMgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBkYXRlIGFuZCB0aW1lIG9wZXJhdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGltZVV0aWxzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybiB0aGUgY3VycmVudCB0aW1lIGluIFVuaXggdGltZSAoc2Vjb25kcykuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBub3dTZWNvbmRzKCk6IG51bWJlciB7XHJcbiAgICAgICAgLy8gRGF0ZS5nZXRUaW1lKCkgcmV0dXJucyBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwLjApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrIGlmIGEgdG9rZW4gaXMgZXhwaXJlZCBiYXNlZCBvbiBnaXZlbiBVVEMgdGltZSBpbiBzZWNvbmRzLlxyXG4gICAgICogQHBhcmFtIGV4cGlyZXNPblxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNUb2tlbkV4cGlyZWQoZXhwaXJlc09uOiBzdHJpbmcsIG9mZnNldDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGFjY2VzcyB0b2tlbiBleHBpcnlcclxuICAgICAgICBjb25zdCBleHBpcmF0aW9uU2VjID0gTnVtYmVyKGV4cGlyZXNPbikgfHwgMDtcclxuICAgICAgICBjb25zdCBvZmZzZXRDdXJyZW50VGltZVNlYyA9IFRpbWVVdGlscy5ub3dTZWNvbmRzKCkgKyBvZmZzZXQ7IFxyXG5cclxuICAgICAgICAvLyBJZiBjdXJyZW50IHRpbWUgKyBvZmZzZXQgaXMgZ3JlYXRlciB0aGFuIHRva2VuIGV4cGlyYXRpb24gdGltZSwgdGhlbiB0b2tlbiBpcyBleHBpcmVkLlxyXG4gICAgICAgIHJldHVybiAob2Zmc2V0Q3VycmVudFRpbWVTZWMgPiBleHBpcmF0aW9uU2VjKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENyZWRlbnRpYWxFbnRpdHkgfSBmcm9tIFwiLi9DcmVkZW50aWFsRW50aXR5XCI7XHJcbmltcG9ydCB7IENyZWRlbnRpYWxUeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIElEX1RPS0VOIENhY2hlXHJcbiAqXHJcbiAqIEtleTpWYWx1ZSBTY2hlbWE6XHJcbiAqXHJcbiAqIEtleSBFeGFtcGxlOiB1aWQudXRpZC1sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tLWlkdG9rZW4tY2xpZW50SWQtY29udG9zby5jb20tXHJcbiAqXHJcbiAqIFZhbHVlIFNjaGVtYTpcclxuICoge1xyXG4gKiAgICAgIGhvbWVBY2NvdW50SWQ6IGhvbWUgYWNjb3VudCBpZGVudGlmaWVyIGZvciB0aGUgYXV0aCBzY2hlbWUsXHJcbiAqICAgICAgZW52aXJvbm1lbnQ6IGVudGl0eSB0aGF0IGlzc3VlZCB0aGUgdG9rZW4sIHJlcHJlc2VudGVkIGFzIGEgZnVsbCBob3N0XHJcbiAqICAgICAgY3JlZGVudGlhbFR5cGU6IFR5cGUgb2YgY3JlZGVudGlhbCBhcyBhIHN0cmluZywgY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBSZWZyZXNoVG9rZW4sIEFjY2Vzc1Rva2VuLCBJZFRva2VuLCBQYXNzd29yZCwgQ29va2llLCBDZXJ0aWZpY2F0ZSwgT3RoZXJcclxuICogICAgICBjbGllbnRJZDogY2xpZW50IElEIG9mIHRoZSBhcHBsaWNhdGlvblxyXG4gKiAgICAgIHNlY3JldDogQWN0dWFsIGNyZWRlbnRpYWwgYXMgYSBzdHJpbmdcclxuICogICAgICByZWFsbTogRnVsbCB0ZW5hbnQgb3Igb3JnYW5pemF0aW9uYWwgaWRlbnRpZmllciB0aGF0IHRoZSBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogfVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIElkVG9rZW5FbnRpdHkgZXh0ZW5kcyBDcmVkZW50aWFsRW50aXR5IHtcclxuICAgIHJlYWxtOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgSWRUb2tlbkVudGl0eVxyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBhdXRoZW50aWNhdGlvblJlc3VsdFxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVJZFRva2VuRW50aXR5KFxyXG4gICAgICAgIGhvbWVBY2NvdW50SWQ6IHN0cmluZyxcclxuICAgICAgICBlbnZpcm9ubWVudDogc3RyaW5nLFxyXG4gICAgICAgIGlkVG9rZW46IHN0cmluZyxcclxuICAgICAgICBjbGllbnRJZDogc3RyaW5nLFxyXG4gICAgICAgIHRlbmFudElkOiBzdHJpbmcsXHJcbiAgICAgICAgb2JvQXNzZXJ0aW9uPzogc3RyaW5nXHJcbiAgICApOiBJZFRva2VuRW50aXR5IHtcclxuICAgICAgICBjb25zdCBpZFRva2VuRW50aXR5ID0gbmV3IElkVG9rZW5FbnRpdHkoKTtcclxuXHJcbiAgICAgICAgaWRUb2tlbkVudGl0eS5jcmVkZW50aWFsVHlwZSA9IENyZWRlbnRpYWxUeXBlLklEX1RPS0VOO1xyXG4gICAgICAgIGlkVG9rZW5FbnRpdHkuaG9tZUFjY291bnRJZCA9IGhvbWVBY2NvdW50SWQ7XHJcbiAgICAgICAgaWRUb2tlbkVudGl0eS5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xyXG4gICAgICAgIGlkVG9rZW5FbnRpdHkuY2xpZW50SWQgPSBjbGllbnRJZDtcclxuICAgICAgICBpZFRva2VuRW50aXR5LnNlY3JldCA9IGlkVG9rZW47XHJcbiAgICAgICAgaWRUb2tlbkVudGl0eS5yZWFsbSA9IHRlbmFudElkO1xyXG4gICAgICAgIGlkVG9rZW5FbnRpdHkub2JvQXNzZXJ0aW9uID0gb2JvQXNzZXJ0aW9uO1xyXG5cclxuICAgICAgICByZXR1cm4gaWRUb2tlbkVudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBhbiBlbnRpdHk6IGNoZWNrcyBmb3IgYWxsIGV4cGVjdGVkIHBhcmFtc1xyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNJZFRva2VuRW50aXR5KGVudGl0eTogb2JqZWN0KTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImhvbWVBY2NvdW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiZW52aXJvbm1lbnRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY3JlZGVudGlhbFR5cGVcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwicmVhbG1cIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY2xpZW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwic2VjcmV0XCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eVtcImNyZWRlbnRpYWxUeXBlXCJdID09PSBDcmVkZW50aWFsVHlwZS5JRF9UT0tFTlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDcmVkZW50aWFsRW50aXR5IH0gZnJvbSBcIi4vQ3JlZGVudGlhbEVudGl0eVwiO1xyXG5pbXBvcnQgeyBDcmVkZW50aWFsVHlwZSwgQXV0aGVudGljYXRpb25TY2hlbWUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFRpbWVVdGlscyB9IGZyb20gXCIuLi8uLi91dGlscy9UaW1lVXRpbHNcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuXHJcbi8qKlxyXG4gKiBBQ0NFU1NfVE9LRU4gQ3JlZGVudGlhbCBUeXBlXHJcbiAqXHJcbiAqIEtleTpWYWx1ZSBTY2hlbWE6XHJcbiAqXHJcbiAqIEtleSBFeGFtcGxlOiB1aWQudXRpZC1sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tLWFjY2Vzc3Rva2VuLWNsaWVudElkLWNvbnRvc28uY29tLXVzZXIucmVhZFxyXG4gKlxyXG4gKiBWYWx1ZSBTY2hlbWE6XHJcbiAqIHtcclxuICogICAgICBob21lQWNjb3VudElkOiBob21lIGFjY291bnQgaWRlbnRpZmllciBmb3IgdGhlIGF1dGggc2NoZW1lLFxyXG4gKiAgICAgIGVudmlyb25tZW50OiBlbnRpdHkgdGhhdCBpc3N1ZWQgdGhlIHRva2VuLCByZXByZXNlbnRlZCBhcyBhIGZ1bGwgaG9zdFxyXG4gKiAgICAgIGNyZWRlbnRpYWxUeXBlOiBUeXBlIG9mIGNyZWRlbnRpYWwgYXMgYSBzdHJpbmcsIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogUmVmcmVzaFRva2VuLCBBY2Nlc3NUb2tlbiwgSWRUb2tlbiwgUGFzc3dvcmQsIENvb2tpZSwgQ2VydGlmaWNhdGUsIE90aGVyXHJcbiAqICAgICAgY2xpZW50SWQ6IGNsaWVudCBJRCBvZiB0aGUgYXBwbGljYXRpb25cclxuICogICAgICBzZWNyZXQ6IEFjdHVhbCBjcmVkZW50aWFsIGFzIGEgc3RyaW5nXHJcbiAqICAgICAgZmFtaWx5SWQ6IEZhbWlseSBJRCBpZGVudGlmaWVyLCB1c3VhbGx5IG9ubHkgdXNlZCBmb3IgcmVmcmVzaCB0b2tlbnNcclxuICogICAgICByZWFsbTogRnVsbCB0ZW5hbnQgb3Igb3JnYW5pemF0aW9uYWwgaWRlbnRpZmllciB0aGF0IHRoZSBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogICAgICB0YXJnZXQ6IFBlcm1pc3Npb25zIHRoYXQgYXJlIGluY2x1ZGVkIGluIHRoZSB0b2tlbiwgb3IgZm9yIHJlZnJlc2ggdG9rZW5zLCB0aGUgcmVzb3VyY2UgaWRlbnRpZmllci5cclxuICogICAgICBjYWNoZWRBdDogQWJzb2x1dGUgZGV2aWNlIHRpbWUgd2hlbiBlbnRyeSB3YXMgY3JlYXRlZCBpbiB0aGUgY2FjaGUuXHJcbiAqICAgICAgZXhwaXJlc09uOiBUb2tlbiBleHBpcnkgdGltZSwgY2FsY3VsYXRlZCBiYXNlZCBvbiBjdXJyZW50IFVUQyB0aW1lIGluIHNlY29uZHMuIFJlcHJlc2VudGVkIGFzIGEgc3RyaW5nLlxyXG4gKiAgICAgIGV4dGVuZGVkRXhwaXJlc09uOiBBZGRpdGlvbmFsIGV4dGVuZGVkIGV4cGlyeSB0aW1lIHVudGlsIHdoZW4gdG9rZW4gaXMgdmFsaWQgaW4gY2FzZSBvZiBzZXJ2ZXItc2lkZSBvdXRhZ2UuIFJlcHJlc2VudGVkIGFzIHN0cmluZyBpbiBVVEMgc2Vjb25kcy5cclxuICogICAgICBrZXlJZDogdXNlZCBmb3IgUE9QIGFuZCBTU0ggdG9rZW5UeXBlc1xyXG4gKiAgICAgIHRva2VuVHlwZTogVHlwZSBvZiB0aGUgdG9rZW4gaXNzdWVkLiBVc3VhbGx5IFwiQmVhcmVyXCJcclxuICogfVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFjY2Vzc1Rva2VuRW50aXR5IGV4dGVuZHMgQ3JlZGVudGlhbEVudGl0eSB7XHJcbiAgICByZWFsbTogc3RyaW5nO1xyXG4gICAgdGFyZ2V0OiBzdHJpbmc7XHJcbiAgICBjYWNoZWRBdDogc3RyaW5nO1xyXG4gICAgZXhwaXJlc09uOiBzdHJpbmc7XHJcbiAgICBleHRlbmRlZEV4cGlyZXNPbj86IHN0cmluZztcclxuICAgIHJlZnJlc2hPbj86IHN0cmluZztcclxuICAgIGtleUlkPzogc3RyaW5nOyAvLyBmb3IgUE9QIGFuZCBTU0ggdG9rZW5UeXBlc1xyXG4gICAgdG9rZW5UeXBlPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIEFjY2Vzc1Rva2VuRW50aXR5XHJcbiAgICAgKiBAcGFyYW0gaG9tZUFjY291bnRJZFxyXG4gICAgICogQHBhcmFtIGVudmlyb25tZW50XHJcbiAgICAgKiBAcGFyYW0gYWNjZXNzVG9rZW5cclxuICAgICAqIEBwYXJhbSBjbGllbnRJZFxyXG4gICAgICogQHBhcmFtIHRlbmFudElkXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVzXHJcbiAgICAgKiBAcGFyYW0gZXhwaXJlc09uXHJcbiAgICAgKiBAcGFyYW0gZXh0RXhwaXJlc09uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVBY2Nlc3NUb2tlbkVudGl0eShcclxuICAgICAgICBob21lQWNjb3VudElkOiBzdHJpbmcsXHJcbiAgICAgICAgZW52aXJvbm1lbnQ6IHN0cmluZyxcclxuICAgICAgICBhY2Nlc3NUb2tlbjogc3RyaW5nLFxyXG4gICAgICAgIGNsaWVudElkOiBzdHJpbmcsXHJcbiAgICAgICAgdGVuYW50SWQ6IHN0cmluZyxcclxuICAgICAgICBzY29wZXM6IHN0cmluZyxcclxuICAgICAgICBleHBpcmVzT246IG51bWJlcixcclxuICAgICAgICBleHRFeHBpcmVzT246IG51bWJlcixcclxuICAgICAgICB0b2tlblR5cGU/OiBzdHJpbmcsXHJcbiAgICAgICAgb2JvQXNzZXJ0aW9uPzogc3RyaW5nXHJcbiAgICApOiBBY2Nlc3NUb2tlbkVudGl0eSB7XHJcbiAgICAgICAgY29uc3QgYXRFbnRpdHk6IEFjY2Vzc1Rva2VuRW50aXR5ID0gbmV3IEFjY2Vzc1Rva2VuRW50aXR5KCk7XHJcblxyXG4gICAgICAgIGF0RW50aXR5LmhvbWVBY2NvdW50SWQgPSBob21lQWNjb3VudElkO1xyXG4gICAgICAgIGF0RW50aXR5LmNyZWRlbnRpYWxUeXBlID0gQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOO1xyXG4gICAgICAgIGF0RW50aXR5LnNlY3JldCA9IGFjY2Vzc1Rva2VuO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IFRpbWVVdGlscy5ub3dTZWNvbmRzKCk7XHJcbiAgICAgICAgYXRFbnRpdHkuY2FjaGVkQXQgPSBjdXJyZW50VGltZS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFRva2VuIGV4cGlyeSB0aW1lLlxyXG4gICAgICAgICAqIFRoaXMgdmFsdWUgc2hvdWxkIGJlIOKAr2NhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgVVRDIHRpbWUgbWVhc3VyZWQgbG9jYWxseSBhbmQgdGhlIHZhbHVlIOKAr2V4cGlyZXNfaW4gUmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcgaW4gSlNPTi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhdEVudGl0eS5leHBpcmVzT24gPSBleHBpcmVzT24udG9TdHJpbmcoKTtcclxuICAgICAgICBhdEVudGl0eS5leHRlbmRlZEV4cGlyZXNPbiA9IGV4dEV4cGlyZXNPbi50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBhdEVudGl0eS5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xyXG4gICAgICAgIGF0RW50aXR5LmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgYXRFbnRpdHkucmVhbG0gPSB0ZW5hbnRJZDtcclxuICAgICAgICBhdEVudGl0eS50YXJnZXQgPSBzY29wZXM7XHJcbiAgICAgICAgYXRFbnRpdHkub2JvQXNzZXJ0aW9uID0gb2JvQXNzZXJ0aW9uO1xyXG5cclxuICAgICAgICBhdEVudGl0eS50b2tlblR5cGUgPSBTdHJpbmdVdGlscy5pc0VtcHR5KHRva2VuVHlwZSkgPyBBdXRoZW50aWNhdGlvblNjaGVtZS5CRUFSRVIgOiB0b2tlblR5cGU7XHJcbiAgICAgICAgcmV0dXJuIGF0RW50aXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGFuIGVudGl0eTogY2hlY2tzIGZvciBhbGwgZXhwZWN0ZWQgcGFyYW1zXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0FjY2Vzc1Rva2VuRW50aXR5KGVudGl0eTogb2JqZWN0KTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImhvbWVBY2NvdW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiZW52aXJvbm1lbnRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY3JlZGVudGlhbFR5cGVcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwicmVhbG1cIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY2xpZW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwic2VjcmV0XCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcInRhcmdldFwiKSAmJlxyXG4gICAgICAgICAgICBlbnRpdHlbXCJjcmVkZW50aWFsVHlwZVwiXSA9PT0gQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENyZWRlbnRpYWxFbnRpdHkgfSBmcm9tIFwiLi9DcmVkZW50aWFsRW50aXR5XCI7XHJcbmltcG9ydCB7IENyZWRlbnRpYWxUeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIFJFRlJFU0hfVE9LRU4gQ2FjaGVcclxuICpcclxuICogS2V5OlZhbHVlIFNjaGVtYTpcclxuICpcclxuICogS2V5IEV4YW1wbGU6IHVpZC51dGlkLWxvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20tcmVmcmVzaHRva2VuLWNsaWVudElkLS1cclxuICpcclxuICogVmFsdWU6XHJcbiAqIHtcclxuICogICAgICBob21lQWNjb3VudElkOiBob21lIGFjY291bnQgaWRlbnRpZmllciBmb3IgdGhlIGF1dGggc2NoZW1lLFxyXG4gKiAgICAgIGVudmlyb25tZW50OiBlbnRpdHkgdGhhdCBpc3N1ZWQgdGhlIHRva2VuLCByZXByZXNlbnRlZCBhcyBhIGZ1bGwgaG9zdFxyXG4gKiAgICAgIGNyZWRlbnRpYWxUeXBlOiBUeXBlIG9mIGNyZWRlbnRpYWwgYXMgYSBzdHJpbmcsIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogUmVmcmVzaFRva2VuLCBBY2Nlc3NUb2tlbiwgSWRUb2tlbiwgUGFzc3dvcmQsIENvb2tpZSwgQ2VydGlmaWNhdGUsIE90aGVyXHJcbiAqICAgICAgY2xpZW50SWQ6IGNsaWVudCBJRCBvZiB0aGUgYXBwbGljYXRpb25cclxuICogICAgICBzZWNyZXQ6IEFjdHVhbCBjcmVkZW50aWFsIGFzIGEgc3RyaW5nXHJcbiAqICAgICAgZmFtaWx5SWQ6IEZhbWlseSBJRCBpZGVudGlmaWVyLCAnMScgcmVwcmVzZW50cyBNaWNyb3NvZnQgRmFtaWx5XHJcbiAqICAgICAgcmVhbG06IEZ1bGwgdGVuYW50IG9yIG9yZ2FuaXphdGlvbmFsIGlkZW50aWZpZXIgdGhhdCB0aGUgYWNjb3VudCBiZWxvbmdzIHRvXHJcbiAqICAgICAgdGFyZ2V0OiBQZXJtaXNzaW9ucyB0aGF0IGFyZSBpbmNsdWRlZCBpbiB0aGUgdG9rZW4sIG9yIGZvciByZWZyZXNoIHRva2VucywgdGhlIHJlc291cmNlIGlkZW50aWZpZXIuXHJcbiAqIH1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWZyZXNoVG9rZW5FbnRpdHkgZXh0ZW5kcyBDcmVkZW50aWFsRW50aXR5IHtcclxuICAgIGZhbWlseUlkPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIFJlZnJlc2hUb2tlbkVudGl0eVxyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBhdXRoZW50aWNhdGlvblJlc3VsdFxyXG4gICAgICogQHBhcmFtIGNsaWVudElkXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVSZWZyZXNoVG9rZW5FbnRpdHkoXHJcbiAgICAgICAgaG9tZUFjY291bnRJZDogc3RyaW5nLFxyXG4gICAgICAgIGVudmlyb25tZW50OiBzdHJpbmcsXHJcbiAgICAgICAgcmVmcmVzaFRva2VuOiBzdHJpbmcsXHJcbiAgICAgICAgY2xpZW50SWQ6IHN0cmluZyxcclxuICAgICAgICBmYW1pbHlJZD86IHN0cmluZyxcclxuICAgICAgICBvYm9Bc3NlcnRpb24/OiBzdHJpbmdcclxuICAgICk6IFJlZnJlc2hUb2tlbkVudGl0eSB7XHJcbiAgICAgICAgY29uc3QgcnRFbnRpdHkgPSBuZXcgUmVmcmVzaFRva2VuRW50aXR5KCk7XHJcblxyXG4gICAgICAgIHJ0RW50aXR5LmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgcnRFbnRpdHkuY3JlZGVudGlhbFR5cGUgPSBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOO1xyXG4gICAgICAgIHJ0RW50aXR5LmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XHJcbiAgICAgICAgcnRFbnRpdHkuaG9tZUFjY291bnRJZCA9IGhvbWVBY2NvdW50SWQ7XHJcbiAgICAgICAgcnRFbnRpdHkuc2VjcmV0ID0gcmVmcmVzaFRva2VuO1xyXG4gICAgICAgIHJ0RW50aXR5Lm9ib0Fzc2VydGlvbiA9IG9ib0Fzc2VydGlvbjtcclxuXHJcbiAgICAgICAgaWYgKGZhbWlseUlkKVxyXG4gICAgICAgICAgICBydEVudGl0eS5mYW1pbHlJZCA9IGZhbWlseUlkO1xyXG5cclxuICAgICAgICByZXR1cm4gcnRFbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgYW4gZW50aXR5OiBjaGVja3MgZm9yIGFsbCBleHBlY3RlZCBwYXJhbXNcclxuICAgICAqIEBwYXJhbSBlbnRpdHlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzUmVmcmVzaFRva2VuRW50aXR5KGVudGl0eTogb2JqZWN0KTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcImhvbWVBY2NvdW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiZW52aXJvbm1lbnRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY3JlZGVudGlhbFR5cGVcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiY2xpZW50SWRcIikgJiZcclxuICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwic2VjcmV0XCIpICYmXHJcbiAgICAgICAgICAgIGVudGl0eVtcImNyZWRlbnRpYWxUeXBlXCJdID09PSBDcmVkZW50aWFsVHlwZS5SRUZSRVNIX1RPS0VOXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IFNlcnZlckVycm9yIH0gZnJvbSBcIi4vU2VydmVyRXJyb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZSBjbGFzcyBjb250YWluaW5nIHN0cmluZyBjb25zdGFudHMgdXNlZCBieSBlcnJvciBjb2RlcyBhbmQgbWVzc2FnZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2UgPSBbXHJcbiAgICBcImludGVyYWN0aW9uX3JlcXVpcmVkXCIsXHJcbiAgICBcImNvbnNlbnRfcmVxdWlyZWRcIixcclxuICAgIFwibG9naW5fcmVxdWlyZWRcIlxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoU3ViRXJyb3JNZXNzYWdlID0gW1xyXG4gICAgXCJtZXNzYWdlX29ubHlcIixcclxuICAgIFwiYWRkaXRpb25hbF9hY3Rpb25cIixcclxuICAgIFwiYmFzaWNfYWN0aW9uXCIsXHJcbiAgICBcInVzZXJfcGFzc3dvcmRfZXhwaXJlZFwiLFxyXG4gICAgXCJjb25zZW50X3JlcXVpcmVkXCJcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBFcnJvciB0aHJvd24gd2hlbiB1c2VyIGludGVyYWN0aW9uIGlzIHJlcXVpcmVkIGF0IHRoZSBhdXRoIHNlcnZlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIGV4dGVuZHMgU2VydmVyRXJyb3Ige1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZTogc3RyaW5nLCBlcnJvck1lc3NhZ2U/OiBzdHJpbmcsIHN1YkVycm9yPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN1YkVycm9yKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIkludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JcIjtcclxuXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3IoZXJyb3JDb2RlOiBzdHJpbmcsIGVycm9yU3RyaW5nOiBzdHJpbmcsIHN1YkVycm9yPzogc3RyaW5nKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yQ29kZSA9ICFTdHJpbmdVdGlscy5pc0VtcHR5KGVycm9yQ29kZSkgJiYgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2UuaW5kZXhPZihlcnJvckNvZGUpID4gLTE7XHJcbiAgICAgICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkU3ViRXJyb3IgPSAhU3RyaW5nVXRpbHMuaXNFbXB0eShzdWJFcnJvcikgJiYgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UuaW5kZXhPZihzdWJFcnJvcikgPiAtMTtcclxuICAgICAgICBjb25zdCBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckRlc2MgPSAhU3RyaW5nVXRpbHMuaXNFbXB0eShlcnJvclN0cmluZykgJiYgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2Uuc29tZSgoaXJFcnJvckNvZGUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yU3RyaW5nLmluZGV4T2YoaXJFcnJvckNvZGUpID4gLTE7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckNvZGUgfHwgaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3JEZXNjIHx8IGlzSW50ZXJhY3Rpb25SZXF1aXJlZFN1YkVycm9yO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSWRUb2tlbkVudGl0eSB9IGZyb20gXCIuL0lkVG9rZW5FbnRpdHlcIjtcclxuaW1wb3J0IHsgQWNjZXNzVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi9BY2Nlc3NUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBSZWZyZXNoVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi9SZWZyZXNoVG9rZW5FbnRpdHlcIjtcclxuaW1wb3J0IHsgQWNjb3VudEVudGl0eSB9IGZyb20gXCIuL0FjY291bnRFbnRpdHlcIjtcclxuaW1wb3J0IHsgQXBwTWV0YWRhdGFFbnRpdHkgfSBmcm9tIFwiLi9BcHBNZXRhZGF0YUVudGl0eVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhY2hlUmVjb3JkIHtcclxuICAgIGFjY291bnQ6IEFjY291bnRFbnRpdHk7XHJcbiAgICBpZFRva2VuOiBJZFRva2VuRW50aXR5O1xyXG4gICAgYWNjZXNzVG9rZW46IEFjY2Vzc1Rva2VuRW50aXR5O1xyXG4gICAgcmVmcmVzaFRva2VuOiBSZWZyZXNoVG9rZW5FbnRpdHk7XHJcbiAgICBhcHBNZXRhZGF0YTogQXBwTWV0YWRhdGFFbnRpdHk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYWNjb3VudEVudGl0eT86IEFjY291bnRFbnRpdHksIGlkVG9rZW5FbnRpdHk/OiBJZFRva2VuRW50aXR5LCBhY2Nlc3NUb2tlbkVudGl0eT86IEFjY2Vzc1Rva2VuRW50aXR5LCByZWZyZXNoVG9rZW5FbnRpdHk/OiBSZWZyZXNoVG9rZW5FbnRpdHksIGFwcE1ldGFkYXRhRW50aXR5PzogQXBwTWV0YWRhdGFFbnRpdHkpIHtcclxuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50RW50aXR5O1xyXG4gICAgICAgIHRoaXMuaWRUb2tlbiA9IGlkVG9rZW5FbnRpdHk7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuRW50aXR5O1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuRW50aXR5O1xyXG4gICAgICAgIHRoaXMuYXBwTWV0YWRhdGEgPSBhcHBNZXRhZGF0YUVudGl0eTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4vU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IElDcnlwdG8gfSBmcm9tIFwiLi4vY3J5cHRvL0lDcnlwdG9cIjtcclxuaW1wb3J0IHsgVGltZVV0aWxzIH0gZnJvbSBcIi4vVGltZVV0aWxzXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBUeXBlIHdoaWNoIGRlZmluZXMgdGhlIG9iamVjdCB0aGF0IGlzIHN0cmluZ2lmaWVkLCBlbmNvZGVkIGFuZCBzZW50IGluIHRoZSBzdGF0ZSB2YWx1ZS5cclxuICogQ29udGFpbnMgdGhlIGZvbGxvd2luZzpcclxuICogLSBpZCAtIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHJlcXVlc3RcclxuICogLSB0cyAtIHRpbWVzdGFtcCBmb3IgdGhlIHRpbWUgdGhlIHJlcXVlc3Qgd2FzIG1hZGUuIFVzZWQgdG8gZW5zdXJlIHRoYXQgdG9rZW4gZXhwaXJhdGlvbiBpcyBub3QgY2FsY3VsYXRlZCBpbmNvcnJlY3RseS5cclxuICogLSBwbGF0Zm9ybVN0YXRlIC0gc3RyaW5nIHZhbHVlIHNlbnQgZnJvbSB0aGUgcGxhdGZvcm0uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBMaWJyYXJ5U3RhdGVPYmplY3QgPSB7XHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgdHM6IG51bWJlcixcclxuICAgIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbn07XHJcblxyXG4vKipcclxuICogVHlwZSB3aGljaCBkZWZpbmVzIHRoZSBzdHJpbmdpZmllZCBhbmQgZW5jb2RlZCBvYmplY3Qgc2VudCB0byB0aGUgc2VydmljZSBpbiB0aGUgYXV0aG9yaXplIHJlcXVlc3QuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZXF1ZXN0U3RhdGVPYmplY3QgPSB7XHJcbiAgICB1c2VyUmVxdWVzdFN0YXRlOiBzdHJpbmcsXHJcbiAgICBsaWJyYXJ5U3RhdGU6IExpYnJhcnlTdGF0ZU9iamVjdFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHdoaWNoIHByb3ZpZGVzIGhlbHBlcnMgZm9yIE9BdXRoIDIuMCBwcm90b2NvbCBzcGVjaWZpYyB2YWx1ZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm90b2NvbFV0aWxzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZHMgdXNlciBzdGF0ZSB3aXRoIHJhbmRvbSBndWlkLCBvciByZXR1cm5zIHJhbmRvbSBndWlkLlxyXG4gICAgICogQHBhcmFtIHVzZXJTdGF0ZSBcclxuICAgICAqIEBwYXJhbSByYW5kb21HdWlkIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0UmVxdWVzdFN0YXRlKGNyeXB0b09iajogSUNyeXB0bywgdXNlclN0YXRlPzogc3RyaW5nLCBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlID0gUHJvdG9jb2xVdGlscy5nZW5lcmF0ZUxpYnJhcnlTdGF0ZShjcnlwdG9PYmosIG1ldGEpO1xyXG4gICAgICAgIHJldHVybiAhU3RyaW5nVXRpbHMuaXNFbXB0eSh1c2VyU3RhdGUpID8gYCR7bGlicmFyeVN0YXRlfSR7Q29uc3RhbnRzLlJFU09VUkNFX0RFTElNfSR7dXNlclN0YXRlfWAgOiBsaWJyYXJ5U3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIHN0YXRlIHZhbHVlIHVzZWQgYnkgdGhlIGNvbW1vbiBsaWJyYXJ5LlxyXG4gICAgICogQHBhcmFtIHJhbmRvbUd1aWQgXHJcbiAgICAgKiBAcGFyYW0gY3J5cHRvT2JqIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVMaWJyYXJ5U3RhdGUoY3J5cHRvT2JqOiBJQ3J5cHRvLCBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCFjcnlwdG9PYmopIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZU5vQ3J5cHRvT2JqZWN0RXJyb3IoXCJnZW5lcmF0ZUxpYnJhcnlTdGF0ZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBhIHN0YXRlIG9iamVjdCBjb250YWluaW5nIGEgdW5pcXVlIGlkIGFuZCB0aGUgdGltZXN0YW1wIG9mIHRoZSByZXF1ZXN0IGNyZWF0aW9uXHJcbiAgICAgICAgY29uc3Qgc3RhdGVPYmo6IExpYnJhcnlTdGF0ZU9iamVjdCA9IHtcclxuICAgICAgICAgICAgaWQ6IGNyeXB0b09iai5jcmVhdGVOZXdHdWlkKCksXHJcbiAgICAgICAgICAgIHRzOiBUaW1lVXRpbHMubm93U2Vjb25kcygpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgc3RhdGVPYmoubWV0YSA9IG1ldGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzdGF0ZVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHN0YXRlT2JqKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNyeXB0b09iai5iYXNlNjRFbmNvZGUoc3RhdGVTdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHRoZSBzdGF0ZSBpbnRvIHRoZSBSZXF1ZXN0U3RhdGVPYmplY3QsIHdoaWNoIGNvbnRhaW5zIHRoZSBMaWJyYXJ5U3RhdGUgaW5mbyBhbmQgdGhlIHN0YXRlIHBhc3NlZCBieSB0aGUgdXNlci5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSBcclxuICAgICAqIEBwYXJhbSBjcnlwdG9PYmogXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwYXJzZVJlcXVlc3RTdGF0ZShjcnlwdG9PYmo6IElDcnlwdG8sIHN0YXRlOiBzdHJpbmcpOiBSZXF1ZXN0U3RhdGVPYmplY3Qge1xyXG4gICAgICAgIGlmICghY3J5cHRvT2JqKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVOb0NyeXB0b09iamVjdEVycm9yKFwicGFyc2VSZXF1ZXN0U3RhdGVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShzdGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUludmFsaWRTdGF0ZUVycm9yKHN0YXRlLCBcIk51bGwsIHVuZGVmaW5lZCBvciBlbXB0eSBzdGF0ZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFNwbGl0IHRoZSBzdGF0ZSBiZXR3ZWVuIGxpYnJhcnkgc3RhdGUgYW5kIHVzZXIgcGFzc2VkIHN0YXRlIGFuZCBkZWNvZGUgdGhlbSBzZXBhcmF0ZWx5XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0U3RhdGUgPSBkZWNvZGVVUklDb21wb25lbnQoc3RhdGUpLnNwbGl0KENvbnN0YW50cy5SRVNPVVJDRV9ERUxJTSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpYnJhcnlTdGF0ZSA9IHNwbGl0U3RhdGVbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJTdGF0ZSA9IHNwbGl0U3RhdGUubGVuZ3RoID4gMSA/IHNwbGl0U3RhdGUuc2xpY2UoMSkuam9pbihDb25zdGFudHMuUkVTT1VSQ0VfREVMSU0pIDogXCJcIjtcclxuICAgICAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlU3RyaW5nID0gY3J5cHRvT2JqLmJhc2U2NERlY29kZShsaWJyYXJ5U3RhdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGVPYmogPSBKU09OLnBhcnNlKGxpYnJhcnlTdGF0ZVN0cmluZykgYXMgTGlicmFyeVN0YXRlT2JqZWN0O1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlclJlcXVlc3RTdGF0ZTogIVN0cmluZ1V0aWxzLmlzRW1wdHkodXNlclN0YXRlKSA/IHVzZXJTdGF0ZSA6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBsaWJyYXJ5U3RhdGU6IGxpYnJhcnlTdGF0ZU9ialxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlSW52YWxpZFN0YXRlRXJyb3Ioc3RhdGUsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IElDcnlwdG8gfSBmcm9tIFwiLi9JQ3J5cHRvXCI7XHJcbmltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi9hY2NvdW50L0F1dGhUb2tlblwiO1xyXG5pbXBvcnQgeyBUb2tlbkNsYWltcyB9IGZyb20gXCIuLi9hY2NvdW50L1Rva2VuQ2xhaW1zXCI7XHJcbmltcG9ydCB7IFRpbWVVdGlscyB9IGZyb20gXCIuLi91dGlscy9UaW1lVXRpbHNcIjtcclxuaW1wb3J0IHsgVXJsU3RyaW5nIH0gZnJvbSBcIi4uL3VybC9VcmxTdHJpbmdcIjtcclxuaW1wb3J0IHsgSVVyaSB9IGZyb20gXCIuLi91cmwvSVVyaVwiO1xyXG5cclxuLyoqXHJcbiAqIFNlZSBlU1RTIGRvY3MgZm9yIG1vcmUgaW5mby5cclxuICogLSBBIGtpZCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBjb250YWluaW5nIGFuIFJGQyA3NjM4LWNvbXBsaWFudCBKV0sgdGh1bWJwcmludCB0aGF0IGlzIGJhc2U2NCBlbmNvZGVkLlxyXG4gKiAtICB4bXNfa3NsIGVsZW1lbnQsIHJlcHJlc2VudGluZyB0aGUgc3RvcmFnZSBsb2NhdGlvbiBvZiB0aGUga2V5J3Mgc2VjcmV0IGNvbXBvbmVudCBvbiB0aGUgY2xpZW50IGRldmljZS4gT25lIG9mIHR3byB2YWx1ZXM6XHJcbiAqICAgICAgLSBzdzogc29mdHdhcmUgc3RvcmFnZVxyXG4gKiAgICAgIC0gdWh3OiBoYXJkd2FyZSBzdG9yYWdlXHJcbiAqL1xyXG50eXBlIFJlcUNuZiA9IHtcclxuICAgIGtpZDogc3RyaW5nO1xyXG4gICAgeG1zX2tzbDogS2V5TG9jYXRpb247XHJcbn07XHJcblxyXG5lbnVtIEtleUxvY2F0aW9uIHtcclxuICAgIFNXID0gXCJzd1wiLFxyXG4gICAgVUhXID0gXCJ1aHdcIlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wVG9rZW5HZW5lcmF0b3Ige1xyXG5cclxuICAgIHByaXZhdGUgY3J5cHRvVXRpbHM6IElDcnlwdG87XHJcblxyXG4gICAgY29uc3RydWN0b3IoY3J5cHRvVXRpbHM6IElDcnlwdG8pIHtcclxuICAgICAgICB0aGlzLmNyeXB0b1V0aWxzID0gY3J5cHRvVXRpbHM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2VuZXJhdGVDbmYocmVzb3VyY2VSZXF1ZXN0TWV0aG9kOiBzdHJpbmcsIHJlc291cmNlUmVxdWVzdFVyaTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBraWRUaHVtYnByaW50ID0gYXdhaXQgdGhpcy5jcnlwdG9VdGlscy5nZXRQdWJsaWNLZXlUaHVtYnByaW50KHJlc291cmNlUmVxdWVzdE1ldGhvZCwgcmVzb3VyY2VSZXF1ZXN0VXJpKTtcclxuICAgICAgICBjb25zdCByZXFDbmY6IFJlcUNuZiA9IHtcclxuICAgICAgICAgICAga2lkOiBraWRUaHVtYnByaW50LFxyXG4gICAgICAgICAgICB4bXNfa3NsOiBLZXlMb2NhdGlvbi5TV1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3J5cHRvVXRpbHMuYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KHJlcUNuZikpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNpZ25Qb3BUb2tlbihhY2Nlc3NUb2tlbjogc3RyaW5nLCByZXNvdXJjZVJlcXVlc3RNZXRob2Q6IHN0cmluZywgcmVzb3VyY2VSZXF1ZXN0VXJpOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IHRva2VuQ2xhaW1zOiBUb2tlbkNsYWltcyA9IEF1dGhUb2tlbi5leHRyYWN0VG9rZW5DbGFpbXMoYWNjZXNzVG9rZW4sIHRoaXMuY3J5cHRvVXRpbHMpO1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlVXJsU3RyaW5nOiBVcmxTdHJpbmcgPSBuZXcgVXJsU3RyaW5nKHJlc291cmNlUmVxdWVzdFVyaSk7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2VVcmxDb21wb25lbnRzOiBJVXJpID0gcmVzb3VyY2VVcmxTdHJpbmcuZ2V0VXJsQ29tcG9uZW50cygpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyeXB0b1V0aWxzLnNpZ25Kd3Qoe1xyXG4gICAgICAgICAgICBhdDogYWNjZXNzVG9rZW4sXHJcbiAgICAgICAgICAgIHRzOiBgJHtUaW1lVXRpbHMubm93U2Vjb25kcygpfWAsXHJcbiAgICAgICAgICAgIG06IHJlc291cmNlUmVxdWVzdE1ldGhvZC50b1VwcGVyQ2FzZSgpLFxyXG4gICAgICAgICAgICB1OiByZXNvdXJjZVVybENvbXBvbmVudHMuSG9zdE5hbWVBbmRQb3J0IHx8IFwiXCIsXHJcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLmNyeXB0b1V0aWxzLmNyZWF0ZU5ld0d1aWQoKSxcclxuICAgICAgICAgICAgcDogcmVzb3VyY2VVcmxDb21wb25lbnRzLkFic29sdXRlUGF0aCxcclxuICAgICAgICAgICAgcTogW1tdLCByZXNvdXJjZVVybENvbXBvbmVudHMuUXVlcnlTdHJpbmddLFxyXG4gICAgICAgIH0sIHRva2VuQ2xhaW1zLmNuZi5raWQpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSVNlcmlhbGl6YWJsZVRva2VuQ2FjaGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL0lTZXJpYWxpemFibGVUb2tlbkNhY2hlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVG9rZW5DYWNoZUNvbnRleHQge1xyXG4gICAgaGFzQ2hhbmdlZDogYm9vbGVhbjtcclxuICAgIGNhY2hlOiBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbkNhY2hlOiBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZSwgaGFzQ2hhbmdlZDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuY2FjaGUgPSB0b2tlbkNhY2hlO1xyXG4gICAgICAgIHRoaXMuaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNhY2hlSGFzQ2hhbmdlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b2tlbkNhY2hlKCk6IElTZXJpYWxpemFibGVUb2tlbkNhY2hlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlIH0gZnJvbSBcIi4vU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2VcIjtcclxuaW1wb3J0IHsgYnVpbGRDbGllbnRJbmZvLCBDbGllbnRJbmZvIH0gZnJvbSBcIi4uL2FjY291bnQvQ2xpZW50SW5mb1wiO1xyXG5pbXBvcnQgeyBJQ3J5cHRvIH0gZnJvbSBcIi4uL2NyeXB0by9JQ3J5cHRvXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgU2VydmVyQXV0aG9yaXphdGlvbkNvZGVSZXNwb25zZSB9IGZyb20gXCIuL1NlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2VcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL2xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgU2VydmVyRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvU2VydmVyRXJyb3JcIjtcclxuaW1wb3J0IHsgQXV0aFRva2VuIH0gZnJvbSBcIi4uL2FjY291bnQvQXV0aFRva2VuXCI7XHJcbmltcG9ydCB7IFNjb3BlU2V0IH0gZnJvbSBcIi4uL3JlcXVlc3QvU2NvcGVTZXRcIjtcclxuaW1wb3J0IHsgVGltZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1RpbWVVdGlsc1wiO1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblJlc3VsdCB9IGZyb20gXCIuL0F1dGhlbnRpY2F0aW9uUmVzdWx0XCI7XHJcbmltcG9ydCB7IEFjY291bnRFbnRpdHkgfSBmcm9tIFwiLi4vY2FjaGUvZW50aXRpZXMvQWNjb3VudEVudGl0eVwiO1xyXG5pbXBvcnQgeyBBdXRob3JpdHkgfSBmcm9tIFwiLi4vYXV0aG9yaXR5L0F1dGhvcml0eVwiO1xyXG5pbXBvcnQgeyBBdXRob3JpdHlUeXBlIH0gZnJvbSBcIi4uL2F1dGhvcml0eS9BdXRob3JpdHlUeXBlXCI7XHJcbmltcG9ydCB7IElkVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi4vY2FjaGUvZW50aXRpZXMvSWRUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BY2Nlc3NUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBSZWZyZXNoVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi4vY2FjaGUvZW50aXRpZXMvUmVmcmVzaFRva2VuRW50aXR5XCI7XHJcbmltcG9ydCB7IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvclwiO1xyXG5pbXBvcnQgeyBDYWNoZVJlY29yZCB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9DYWNoZVJlY29yZFwiO1xyXG5pbXBvcnQgeyBDYWNoZU1hbmFnZXIgfSBmcm9tIFwiLi4vY2FjaGUvQ2FjaGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFByb3RvY29sVXRpbHMsIExpYnJhcnlTdGF0ZU9iamVjdCwgUmVxdWVzdFN0YXRlT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxzL1Byb3RvY29sVXRpbHNcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TY2hlbWUgfSBmcm9tIFwiLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFBvcFRva2VuR2VuZXJhdG9yIH0gZnJvbSBcIi4uL2NyeXB0by9Qb3BUb2tlbkdlbmVyYXRvclwiO1xyXG5pbXBvcnQgeyBBcHBNZXRhZGF0YUVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BcHBNZXRhZGF0YUVudGl0eVwiO1xyXG5pbXBvcnQgeyBJQ2FjaGVQbHVnaW4gfSBmcm9tIFwiLi4vY2FjaGUvaW50ZXJmYWNlL0lDYWNoZVBsdWdpblwiO1xyXG5pbXBvcnQgeyBUb2tlbkNhY2hlQ29udGV4dCB9IGZyb20gXCIuLi9jYWNoZS9wZXJzaXN0ZW5jZS9Ub2tlbkNhY2hlQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZSB9IGZyb20gXCIuLi9jYWNoZS9pbnRlcmZhY2UvSVNlcmlhbGl6YWJsZVRva2VuQ2FjaGVcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IGhhbmRsZXMgcmVzcG9uc2UgcGFyc2luZy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zZUhhbmRsZXIge1xyXG4gICAgcHJpdmF0ZSBjbGllbnRJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBjYWNoZVN0b3JhZ2U6IENhY2hlTWFuYWdlcjtcclxuICAgIHByaXZhdGUgY3J5cHRvT2JqOiBJQ3J5cHRvO1xyXG4gICAgcHJpdmF0ZSBsb2dnZXI6IExvZ2dlcjtcclxuICAgIHByaXZhdGUgY2xpZW50SW5mbzogQ2xpZW50SW5mbztcclxuICAgIHByaXZhdGUgaG9tZUFjY291bnRJZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHNlcmlhbGl6YWJsZUNhY2hlOiBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZTtcclxuICAgIHByaXZhdGUgcGVyc2lzdGVuY2VQbHVnaW46IElDYWNoZVBsdWdpbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjbGllbnRJZDogc3RyaW5nLCBjYWNoZVN0b3JhZ2U6IENhY2hlTWFuYWdlciwgY3J5cHRvT2JqOiBJQ3J5cHRvLCBsb2dnZXI6IExvZ2dlciwgc2VyaWFsaXphYmxlQ2FjaGU/OiBJU2VyaWFsaXphYmxlVG9rZW5DYWNoZSwgcGVyc2lzdGVuY2VQbHVnaW4/OiBJQ2FjaGVQbHVnaW4pIHtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgdGhpcy5jYWNoZVN0b3JhZ2UgPSBjYWNoZVN0b3JhZ2U7XHJcbiAgICAgICAgdGhpcy5jcnlwdG9PYmogPSBjcnlwdG9PYmo7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemFibGVDYWNoZSA9IHNlcmlhbGl6YWJsZUNhY2hlO1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VQbHVnaW4gPSBwZXJzaXN0ZW5jZVBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHdoaWNoIHZhbGlkYXRlcyBzZXJ2ZXIgYXV0aG9yaXphdGlvbiBjb2RlIHJlc3BvbnNlLlxyXG4gICAgICogQHBhcmFtIHNlcnZlclJlc3BvbnNlSGFzaFxyXG4gICAgICogQHBhcmFtIGNhY2hlZFN0YXRlXHJcbiAgICAgKiBAcGFyYW0gY3J5cHRvT2JqXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlU2VydmVyQXV0aG9yaXphdGlvbkNvZGVSZXNwb25zZShzZXJ2ZXJSZXNwb25zZUhhc2g6IFNlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2UsIGNhY2hlZFN0YXRlOiBzdHJpbmcsIGNyeXB0b09iajogSUNyeXB0byk6IHZvaWQge1xyXG4gICAgICAgIGlmIChkZWNvZGVVUklDb21wb25lbnQoc2VydmVyUmVzcG9uc2VIYXNoLnN0YXRlKSAhPT0gZGVjb2RlVVJJQ29tcG9uZW50KGNhY2hlZFN0YXRlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBDbGllbnRBdXRoRXJyb3IuY3JlYXRlU3RhdGVNaXNtYXRjaEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgZXJyb3JcclxuICAgICAgICBpZiAoc2VydmVyUmVzcG9uc2VIYXNoLmVycm9yIHx8IHNlcnZlclJlc3BvbnNlSGFzaC5lcnJvcl9kZXNjcmlwdGlvbiB8fCBzZXJ2ZXJSZXNwb25zZUhhc2guc3ViZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IuaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3Ioc2VydmVyUmVzcG9uc2VIYXNoLmVycm9yLCBzZXJ2ZXJSZXNwb25zZUhhc2guZXJyb3JfZGVzY3JpcHRpb24sIHNlcnZlclJlc3BvbnNlSGFzaC5zdWJlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yKHNlcnZlclJlc3BvbnNlSGFzaC5lcnJvciwgc2VydmVyUmVzcG9uc2VIYXNoLmVycm9yX2Rlc2NyaXB0aW9uLCBzZXJ2ZXJSZXNwb25zZUhhc2guc3ViZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VydmVyRXJyb3Ioc2VydmVyUmVzcG9uc2VIYXNoLmVycm9yLCBzZXJ2ZXJSZXNwb25zZUhhc2guZXJyb3JfZGVzY3JpcHRpb24sIHNlcnZlclJlc3BvbnNlSGFzaC5zdWJlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VydmVyUmVzcG9uc2VIYXNoLmNsaWVudF9pbmZvKSB7XHJcbiAgICAgICAgICAgIGJ1aWxkQ2xpZW50SW5mbyhzZXJ2ZXJSZXNwb25zZUhhc2guY2xpZW50X2luZm8sIGNyeXB0b09iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gd2hpY2ggdmFsaWRhdGVzIHNlcnZlciBhdXRob3JpemF0aW9uIHRva2VuIHJlc3BvbnNlLlxyXG4gICAgICogQHBhcmFtIHNlcnZlclJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlVG9rZW5SZXNwb25zZShzZXJ2ZXJSZXNwb25zZTogU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2UpOiB2b2lkIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgZXJyb3JcclxuICAgICAgICBpZiAoc2VydmVyUmVzcG9uc2UuZXJyb3IgfHwgc2VydmVyUmVzcG9uc2UuZXJyb3JfZGVzY3JpcHRpb24gfHwgc2VydmVyUmVzcG9uc2Uuc3ViZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IuaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3Ioc2VydmVyUmVzcG9uc2UuZXJyb3IsIHNlcnZlclJlc3BvbnNlLmVycm9yX2Rlc2NyaXB0aW9uLCBzZXJ2ZXJSZXNwb25zZS5zdWJlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yKHNlcnZlclJlc3BvbnNlLmVycm9yLCBzZXJ2ZXJSZXNwb25zZS5lcnJvcl9kZXNjcmlwdGlvbiwgc2VydmVyUmVzcG9uc2Uuc3ViZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlcnJTdHJpbmcgPSBgJHtzZXJ2ZXJSZXNwb25zZS5lcnJvcl9jb2Rlc30gLSBbJHtzZXJ2ZXJSZXNwb25zZS50aW1lc3RhbXB9XTogJHtzZXJ2ZXJSZXNwb25zZS5lcnJvcl9kZXNjcmlwdGlvbn0gLSBDb3JyZWxhdGlvbiBJRDogJHtzZXJ2ZXJSZXNwb25zZS5jb3JyZWxhdGlvbl9pZH0gLSBUcmFjZSBJRDogJHtzZXJ2ZXJSZXNwb25zZS50cmFjZV9pZH1gO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgU2VydmVyRXJyb3Ioc2VydmVyUmVzcG9uc2UuZXJyb3IsIGVyclN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvbnN0cnVjdGVkIHRva2VuIHJlc3BvbnNlIGJhc2VkIG9uIGdpdmVuIHN0cmluZy4gQWxzbyBtYW5hZ2VzIHRoZSBjYWNoZSB1cGRhdGVzIGFuZCBjbGVhbnVwcy5cclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJUb2tlblJlc3BvbnNlXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGhhbmRsZVNlcnZlclRva2VuUmVzcG9uc2UoXHJcbiAgICAgICAgc2VydmVyVG9rZW5SZXNwb25zZTogU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2UsXHJcbiAgICAgICAgYXV0aG9yaXR5OiBBdXRob3JpdHksXHJcbiAgICAgICAgcmVzb3VyY2VSZXF1ZXN0TWV0aG9kPzogc3RyaW5nLFxyXG4gICAgICAgIHJlc291cmNlUmVxdWVzdFVyaT86IHN0cmluZyxcclxuICAgICAgICBjYWNoZWROb25jZT86IHN0cmluZyxcclxuICAgICAgICBjYWNoZWRTdGF0ZT86IHN0cmluZyxcclxuICAgICAgICByZXF1ZXN0U2NvcGVzPzogc3RyaW5nW10sXHJcbiAgICAgICAgb2JvQXNzZXJ0aW9uPzogc3RyaW5nLFxyXG4gICAgICAgIGhhbmRsaW5nUmVmcmVzaFRva2VuUmVzcG9uc2U/OiBib29sZWFuKTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xyXG5cclxuICAgICAgICAvLyBnZW5lcmF0ZSBob21lQWNjb3VudElkXHJcbiAgICAgICAgaWYgKHNlcnZlclRva2VuUmVzcG9uc2UuY2xpZW50X2luZm8pIHtcclxuICAgICAgICAgICAgdGhpcy5jbGllbnRJbmZvID0gYnVpbGRDbGllbnRJbmZvKHNlcnZlclRva2VuUmVzcG9uc2UuY2xpZW50X2luZm8sIHRoaXMuY3J5cHRvT2JqKTtcclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHRoaXMuY2xpZW50SW5mby51aWQpICYmICFTdHJpbmdVdGlscy5pc0VtcHR5KHRoaXMuY2xpZW50SW5mby51dGlkKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob21lQWNjb3VudElkZW50aWZpZXIgPSBgJHt0aGlzLmNsaWVudEluZm8udWlkfS4ke3RoaXMuY2xpZW50SW5mby51dGlkfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiTm8gY2xpZW50IGluZm8gaW4gcmVzcG9uc2VcIik7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZUFjY291bnRJZGVudGlmaWVyID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpZFRva2VuT2JqOiBBdXRoVG9rZW4gPSBudWxsO1xyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShzZXJ2ZXJUb2tlblJlc3BvbnNlLmlkX3Rva2VuKSkge1xyXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW4gaWRUb2tlbiBvYmplY3QgKG5vdCBlbnRpdHkpXHJcbiAgICAgICAgICAgIGlkVG9rZW5PYmogPSBuZXcgQXV0aFRva2VuKHNlcnZlclRva2VuUmVzcG9uc2UuaWRfdG9rZW4sIHRoaXMuY3J5cHRvT2JqKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRva2VuIG5vbmNlIGNoZWNrIChUT0RPOiBBZGQgYSB3YXJuaW5nIGlmIG5vIG5vbmNlIGlzIGdpdmVuPylcclxuICAgICAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KGNhY2hlZE5vbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkVG9rZW5PYmouY2xhaW1zLm5vbmNlICE9PSBjYWNoZWROb25jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVOb25jZU1pc21hdGNoRXJyb3IoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2F2ZSB0aGUgcmVzcG9uc2UgdG9rZW5zXHJcbiAgICAgICAgbGV0IHJlcXVlc3RTdGF0ZU9iajogUmVxdWVzdFN0YXRlT2JqZWN0ID0gbnVsbDtcclxuICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkoY2FjaGVkU3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0ZU9iaiA9IFByb3RvY29sVXRpbHMucGFyc2VSZXF1ZXN0U3RhdGUodGhpcy5jcnlwdG9PYmosIGNhY2hlZFN0YXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNhY2hlUmVjb3JkID0gdGhpcy5nZW5lcmF0ZUNhY2hlUmVjb3JkKHNlcnZlclRva2VuUmVzcG9uc2UsIGlkVG9rZW5PYmosIGF1dGhvcml0eSwgcmVxdWVzdFN0YXRlT2JqICYmIHJlcXVlc3RTdGF0ZU9iai5saWJyYXJ5U3RhdGUsIHJlcXVlc3RTY29wZXMsIG9ib0Fzc2VydGlvbik7XHJcbiAgICAgICAgbGV0IGNhY2hlQ29udGV4dDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW5jZVBsdWdpbiAmJiB0aGlzLnNlcmlhbGl6YWJsZUNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiUGVyc2lzdGVuY2UgZW5hYmxlZCwgY2FsbGluZyBiZWZvcmVDYWNoZUFjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgIGNhY2hlQ29udGV4dCA9IG5ldyBUb2tlbkNhY2hlQ29udGV4dCh0aGlzLnNlcmlhbGl6YWJsZUNhY2hlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2VQbHVnaW4uYmVmb3JlQ2FjaGVBY2Nlc3MoY2FjaGVDb250ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgKiBXaGVuIHNhdmluZyBhIHJlZnJlc2hlZCB0b2tlbnMgdG8gdGhlIGNhY2hlLCBpdCBpcyBleHBlY3RlZCB0aGF0IHRoZSBhY2NvdW50IHRoYXQgd2FzIHVzZWQgaXMgcHJlc2VudCBpbiB0aGUgY2FjaGUuXHJcbiAgICAgICAgICAgICAqIElmIG5vdCBwcmVzZW50LCB3ZSBzaG91bGQgcmV0dXJuIG51bGwsIGFzIGl0J3MgdGhlIGNhc2UgdGhhdCBhbm90aGVyIGFwcGxpY2F0aW9uIGNhbGxlZCByZW1vdmVBY2NvdW50IGluIGJldHdlZW5cclxuICAgICAgICAgICAgICogdGhlIGNhbGxzIHRvIGdldEFsbEFjY291bnRzIGFuZCBhY3F1aXJlVG9rZW5TaWxlbnQuIFdlIHNob3VsZCBub3Qgb3ZlcndyaXRlIHRoYXQgcmVtb3ZhbC4gXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxpbmdSZWZyZXNoVG9rZW5SZXNwb25zZSAmJiBjYWNoZVJlY29yZC5hY2NvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBjYWNoZVJlY29yZC5hY2NvdW50LmdlbmVyYXRlQWNjb3VudEtleSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IHRoaXMuY2FjaGVTdG9yYWdlLmdldEFjY291bnQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm5pbmcoXCJBY2NvdW50IHVzZWQgdG8gcmVmcmVzaCB0b2tlbnMgbm90IGluIHBlcnNpc3RlbmNlLCByZWZyZXNoZWQgdG9rZW5zIHdpbGwgbm90IGJlIHN0b3JlZCBpbiB0aGUgY2FjaGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jYWNoZVN0b3JhZ2Uuc2F2ZUNhY2hlUmVjb3JkKGNhY2hlUmVjb3JkKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW5jZVBsdWdpbiAmJiB0aGlzLnNlcmlhbGl6YWJsZUNhY2hlICYmIGNhY2hlQ29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlBlcnNpc3RlbmNlIGVuYWJsZWQsIGNhbGxpbmcgYWZ0ZXJDYWNoZUFjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVyc2lzdGVuY2VQbHVnaW4uYWZ0ZXJDYWNoZUFjY2VzcyhjYWNoZUNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSZXNwb25zZUhhbmRsZXIuZ2VuZXJhdGVBdXRoZW50aWNhdGlvblJlc3VsdCh0aGlzLmNyeXB0b09iaiwgY2FjaGVSZWNvcmQsIGlkVG9rZW5PYmosIGZhbHNlLCByZXF1ZXN0U3RhdGVPYmosIHJlc291cmNlUmVxdWVzdE1ldGhvZCwgcmVzb3VyY2VSZXF1ZXN0VXJpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBDYWNoZVJlY29yZFxyXG4gICAgICogQHBhcmFtIHNlcnZlclRva2VuUmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBpZFRva2VuT2JqXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVDYWNoZVJlY29yZChzZXJ2ZXJUb2tlblJlc3BvbnNlOiBTZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZSwgaWRUb2tlbk9iajogQXV0aFRva2VuLCBhdXRob3JpdHk6IEF1dGhvcml0eSwgbGlicmFyeVN0YXRlPzogTGlicmFyeVN0YXRlT2JqZWN0LCByZXF1ZXN0U2NvcGVzPzogc3RyaW5nW10sIG9ib0Fzc2VydGlvbj86IHN0cmluZyk6IENhY2hlUmVjb3JkIHtcclxuXHJcbiAgICAgICAgY29uc3QgZW52ID0gQXV0aG9yaXR5LmdlbmVyYXRlRW52aXJvbm1lbnRGcm9tQXV0aG9yaXR5KGF1dGhvcml0eSk7XHJcblxyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KGVudikpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUludmFsaWRDYWNoZUVudmlyb25tZW50RXJyb3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElkVG9rZW46IG5vbiBBQUQgc2NlbmFyaW9zIGNhbiBoYXZlIGVtcHR5IHJlYWxtXHJcbiAgICAgICAgbGV0IGNhY2hlZElkVG9rZW46IElkVG9rZW5FbnRpdHkgPSBudWxsO1xyXG4gICAgICAgIGxldCBjYWNoZWRBY2NvdW50OiBBY2NvdW50RW50aXR5ID0gbnVsbDtcclxuICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkoc2VydmVyVG9rZW5SZXNwb25zZS5pZF90b2tlbikpIHtcclxuICAgICAgICAgICAgY2FjaGVkSWRUb2tlbiA9IElkVG9rZW5FbnRpdHkuY3JlYXRlSWRUb2tlbkVudGl0eShcclxuICAgICAgICAgICAgICAgIHRoaXMuaG9tZUFjY291bnRJZGVudGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgZW52LFxyXG4gICAgICAgICAgICAgICAgc2VydmVyVG9rZW5SZXNwb25zZS5pZF90b2tlbixcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgICAgICBpZFRva2VuT2JqLmNsYWltcy50aWQgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgIG9ib0Fzc2VydGlvblxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY2FjaGVkQWNjb3VudCA9IHRoaXMuZ2VuZXJhdGVBY2NvdW50RW50aXR5KFxyXG4gICAgICAgICAgICAgICAgc2VydmVyVG9rZW5SZXNwb25zZSxcclxuICAgICAgICAgICAgICAgIGlkVG9rZW5PYmosXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpdHksXHJcbiAgICAgICAgICAgICAgICBvYm9Bc3NlcnRpb25cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFjY2Vzc1Rva2VuXHJcbiAgICAgICAgbGV0IGNhY2hlZEFjY2Vzc1Rva2VuOiBBY2Nlc3NUb2tlbkVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHNlcnZlclRva2VuUmVzcG9uc2UuYWNjZXNzX3Rva2VuKSkge1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgc2NvcGVzIG5vdCByZXR1cm5lZCBpbiBzZXJ2ZXIgcmVzcG9uc2UsIHVzZSByZXF1ZXN0IHNjb3Blc1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVNjb3BlcyA9IHNlcnZlclRva2VuUmVzcG9uc2Uuc2NvcGUgPyBTY29wZVNldC5mcm9tU3RyaW5nKHNlcnZlclRva2VuUmVzcG9uc2Uuc2NvcGUpIDogbmV3IFNjb3BlU2V0KHJlcXVlc3RTY29wZXMgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwaXJhdGlvbiBjYWxjdWxhdGlvblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IFRpbWVVdGlscy5ub3dTZWNvbmRzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCB0aW1lc3RhbXAgd2FzIHNlbnQgaW4gdGhlIGxpYnJhcnkgc3RhdGUsIHVzZSB0aGF0IHRpbWVzdGFtcCB0byBjYWxjdWxhdGUgZXhwaXJhdGlvbi4gT3RoZXJ3aXNlLCB1c2UgY3VycmVudCB0aW1lLlxyXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBsaWJyYXJ5U3RhdGUgPyBsaWJyYXJ5U3RhdGUudHMgOiBjdXJyZW50VGltZTtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW5FeHBpcmF0aW9uU2Vjb25kcyA9IHRpbWVzdGFtcCArIHNlcnZlclRva2VuUmVzcG9uc2UuZXhwaXJlc19pbjtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kZWRUb2tlbkV4cGlyYXRpb25TZWNvbmRzID0gdG9rZW5FeHBpcmF0aW9uU2Vjb25kcyArIHNlcnZlclRva2VuUmVzcG9uc2UuZXh0X2V4cGlyZXNfaW47XHJcblxyXG4gICAgICAgICAgICAvLyBub24gQUFEIHNjZW5hcmlvcyBjYW4gaGF2ZSBlbXB0eSByZWFsbVxyXG4gICAgICAgICAgICBjYWNoZWRBY2Nlc3NUb2tlbiA9IEFjY2Vzc1Rva2VuRW50aXR5LmNyZWF0ZUFjY2Vzc1Rva2VuRW50aXR5KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ob21lQWNjb3VudElkZW50aWZpZXIsXHJcbiAgICAgICAgICAgICAgICBlbnYsXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb2tlblJlc3BvbnNlLmFjY2Vzc190b2tlbixcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgICAgICBpZFRva2VuT2JqID8gaWRUb2tlbk9iai5jbGFpbXMudGlkIHx8IFwiXCIgOiBhdXRob3JpdHkudGVuYW50LFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VTY29wZXMucHJpbnRTY29wZXMoKSxcclxuICAgICAgICAgICAgICAgIHRva2VuRXhwaXJhdGlvblNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICBleHRlbmRlZFRva2VuRXhwaXJhdGlvblNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb2tlblJlc3BvbnNlLnRva2VuX3R5cGUsXHJcbiAgICAgICAgICAgICAgICBvYm9Bc3NlcnRpb25cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlZnJlc2hUb2tlblxyXG4gICAgICAgIGxldCBjYWNoZWRSZWZyZXNoVG9rZW46IFJlZnJlc2hUb2tlbkVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHNlcnZlclRva2VuUmVzcG9uc2UucmVmcmVzaF90b2tlbikpIHtcclxuICAgICAgICAgICAgY2FjaGVkUmVmcmVzaFRva2VuID0gUmVmcmVzaFRva2VuRW50aXR5LmNyZWF0ZVJlZnJlc2hUb2tlbkVudGl0eShcclxuICAgICAgICAgICAgICAgIHRoaXMuaG9tZUFjY291bnRJZGVudGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgZW52LFxyXG4gICAgICAgICAgICAgICAgc2VydmVyVG9rZW5SZXNwb25zZS5yZWZyZXNoX3Rva2VuLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgIHNlcnZlclRva2VuUmVzcG9uc2UuZm9jaSxcclxuICAgICAgICAgICAgICAgIG9ib0Fzc2VydGlvblxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYXBwTWV0YWRhdGFcclxuICAgICAgICBsZXQgY2FjaGVkQXBwTWV0YWRhdGE6IEFwcE1ldGFkYXRhRW50aXR5ID0gbnVsbDtcclxuICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkoc2VydmVyVG9rZW5SZXNwb25zZS5mb2NpKSkge1xyXG4gICAgICAgICAgICBjYWNoZWRBcHBNZXRhZGF0YSA9IEFwcE1ldGFkYXRhRW50aXR5LmNyZWF0ZUFwcE1ldGFkYXRhRW50aXR5KHRoaXMuY2xpZW50SWQsIGVudiwgc2VydmVyVG9rZW5SZXNwb25zZS5mb2NpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgQ2FjaGVSZWNvcmQoY2FjaGVkQWNjb3VudCwgY2FjaGVkSWRUb2tlbiwgY2FjaGVkQWNjZXNzVG9rZW4sIGNhY2hlZFJlZnJlc2hUb2tlbiwgY2FjaGVkQXBwTWV0YWRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWNjb3VudFxyXG4gICAgICogQHBhcmFtIHNlcnZlclRva2VuUmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBpZFRva2VuXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVBY2NvdW50RW50aXR5KHNlcnZlclRva2VuUmVzcG9uc2U6IFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlLCBpZFRva2VuOiBBdXRoVG9rZW4sIGF1dGhvcml0eTogQXV0aG9yaXR5LCBvYm9Bc3NlcnRpb24/OiBzdHJpbmcpOiBBY2NvdW50RW50aXR5IHtcclxuICAgICAgICBjb25zdCBhdXRob3JpdHlUeXBlID0gYXV0aG9yaXR5LmF1dGhvcml0eVR5cGU7XHJcblxyXG4gICAgICAgIC8vIEFERlMgZG9lcyBub3QgcmVxdWlyZSBjbGllbnRfaW5mbyBpbiB0aGUgcmVzcG9uc2VcclxuICAgICAgICBpZiAoYXV0aG9yaXR5VHlwZSA9PT0gQXV0aG9yaXR5VHlwZS5BZGZzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJBdXRob3JpdHkgdHlwZSBpcyBBREZTLCBjcmVhdGluZyBBREZTIGFjY291bnRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50RW50aXR5LmNyZWF0ZUdlbmVyaWNBY2NvdW50KGF1dGhvcml0eSwgaWRUb2tlbiwgb2JvQXNzZXJ0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoaXMgZmFsbGJhY2sgYXBwbGllcyB0byBCMkMgYXMgd2VsbCBhcyB0aGV5IGZhbGwgdW5kZXIgYW4gQUFEIGFjY291bnQgdHlwZS5cclxuICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNFbXB0eShzZXJ2ZXJUb2tlblJlc3BvbnNlLmNsaWVudF9pbmZvKSAmJiBhdXRob3JpdHkucHJvdG9jb2xNb2RlID09PSBcIkFBRFwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVDbGllbnRJbmZvRW1wdHlFcnJvcihzZXJ2ZXJUb2tlblJlc3BvbnNlLmNsaWVudF9pbmZvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzZXJ2ZXJUb2tlblJlc3BvbnNlLmNsaWVudF9pbmZvID9cclxuICAgICAgICAgICAgQWNjb3VudEVudGl0eS5jcmVhdGVBY2NvdW50KHNlcnZlclRva2VuUmVzcG9uc2UuY2xpZW50X2luZm8sIGF1dGhvcml0eSwgaWRUb2tlbiwgdGhpcy5jcnlwdG9PYmosIG9ib0Fzc2VydGlvbikgOlxyXG4gICAgICAgICAgICBBY2NvdW50RW50aXR5LmNyZWF0ZUdlbmVyaWNBY2NvdW50KGF1dGhvcml0eSwgaWRUb2tlbiwgb2JvQXNzZXJ0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gQEF1dGhlbnRpY2F0aW9uUmVzdWx0IGZyb20gQENhY2hlUmVjb3JkICwgQElkVG9rZW4gLCBhbmQgYSBib29sZWFuIHRoYXQgc3RhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSByZXN1bHQgaXMgZnJvbSBjYWNoZS5cclxuICAgICAqXHJcbiAgICAgKiBPcHRpb25hbGx5IHRha2VzIGEgc3RhdGUgc3RyaW5nIHRoYXQgaXMgc2V0IGFzLWlzIGluIHRoZSByZXNwb25zZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FjaGVSZWNvcmRcclxuICAgICAqIEBwYXJhbSBpZFRva2VuT2JqXHJcbiAgICAgKiBAcGFyYW0gZnJvbVRva2VuQ2FjaGVcclxuICAgICAqIEBwYXJhbSBzdGF0ZVN0cmluZ1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVBdXRoZW50aWNhdGlvblJlc3VsdChjcnlwdG9PYmo6IElDcnlwdG8sIGNhY2hlUmVjb3JkOiBDYWNoZVJlY29yZCwgaWRUb2tlbk9iajogQXV0aFRva2VuLCBmcm9tVG9rZW5DYWNoZTogYm9vbGVhbiwgcmVxdWVzdFN0YXRlPzogUmVxdWVzdFN0YXRlT2JqZWN0LCByZXNvdXJjZVJlcXVlc3RNZXRob2Q/OiBzdHJpbmcsIHJlc291cmNlUmVxdWVzdFVyaT86IHN0cmluZyk6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuICAgICAgICBsZXQgYWNjZXNzVG9rZW46IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlU2NvcGVzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICAgICAgbGV0IGV4cGlyZXNPbjogRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGV4dEV4cGlyZXNPbjogRGF0ZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGZhbWlseUlkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgICAgIGlmIChjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4udG9rZW5UeXBlID09PSBBdXRoZW50aWNhdGlvblNjaGVtZS5QT1ApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcFRva2VuR2VuZXJhdG9yOiBQb3BUb2tlbkdlbmVyYXRvciA9IG5ldyBQb3BUb2tlbkdlbmVyYXRvcihjcnlwdG9PYmopO1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSBhd2FpdCBwb3BUb2tlbkdlbmVyYXRvci5zaWduUG9wVG9rZW4oY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4uc2VjcmV0LCByZXNvdXJjZVJlcXVlc3RNZXRob2QsIHJlc291cmNlUmVxdWVzdFVyaSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IGNhY2hlUmVjb3JkLmFjY2Vzc1Rva2VuLnNlY3JldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNwb25zZVNjb3BlcyA9IFNjb3BlU2V0LmZyb21TdHJpbmcoY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4udGFyZ2V0KS5hc0FycmF5KCk7XHJcbiAgICAgICAgICAgIGV4cGlyZXNPbiA9IG5ldyBEYXRlKE51bWJlcihjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbi5leHBpcmVzT24pICogMTAwMCk7XHJcbiAgICAgICAgICAgIGV4dEV4cGlyZXNPbiA9IG5ldyBEYXRlKE51bWJlcihjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbi5leHRlbmRlZEV4cGlyZXNPbikgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhY2hlUmVjb3JkLmFwcE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIGZhbWlseUlkID0gY2FjaGVSZWNvcmQuYXBwTWV0YWRhdGEuZmFtaWx5SWQgfHwgbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdWlkID0gaWRUb2tlbk9iaiA/IGlkVG9rZW5PYmouY2xhaW1zLm9pZCB8fCBpZFRva2VuT2JqLmNsYWltcy5zdWIgOiBcIlwiO1xyXG4gICAgICAgIGNvbnN0IHRpZCA9IGlkVG9rZW5PYmogPyBpZFRva2VuT2JqLmNsYWltcy50aWQgOiBcIlwiO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuaXF1ZUlkOiB1aWQsXHJcbiAgICAgICAgICAgIHRlbmFudElkOiB0aWQsXHJcbiAgICAgICAgICAgIHNjb3BlczogcmVzcG9uc2VTY29wZXMsXHJcbiAgICAgICAgICAgIGFjY291bnQ6IGNhY2hlUmVjb3JkLmFjY291bnQgPyBjYWNoZVJlY29yZC5hY2NvdW50LmdldEFjY291bnRJbmZvKCkgOiBudWxsLFxyXG4gICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuT2JqID8gaWRUb2tlbk9iai5yYXdUb2tlbiA6IFwiXCIsXHJcbiAgICAgICAgICAgIGlkVG9rZW5DbGFpbXM6IGlkVG9rZW5PYmogPyBpZFRva2VuT2JqLmNsYWltcyA6IG51bGwsXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgZnJvbUNhY2hlOiBmcm9tVG9rZW5DYWNoZSxcclxuICAgICAgICAgICAgZXhwaXJlc09uOiBleHBpcmVzT24sXHJcbiAgICAgICAgICAgIGV4dEV4cGlyZXNPbjogZXh0RXhwaXJlc09uLFxyXG4gICAgICAgICAgICBmYW1pbHlJZDogZmFtaWx5SWQsXHJcbiAgICAgICAgICAgIHRva2VuVHlwZTogY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4gPyBjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbi50b2tlblR5cGUgOiBcIlwiLFxyXG4gICAgICAgICAgICBzdGF0ZTogcmVxdWVzdFN0YXRlID8gcmVxdWVzdFN0YXRlLnVzZXJSZXF1ZXN0U3RhdGUgOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEJhc2VDbGllbnQgfSBmcm9tIFwiLi9CYXNlQ2xpZW50XCI7XHJcbmltcG9ydCB7IEF1dGhvcml6YXRpb25VcmxSZXF1ZXN0IH0gZnJvbSBcIi4uL3JlcXVlc3QvQXV0aG9yaXphdGlvblVybFJlcXVlc3RcIjtcclxuaW1wb3J0IHsgQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0IH0gZnJvbSBcIi4uL3JlcXVlc3QvQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0XCI7XHJcbmltcG9ydCB7IEF1dGhvcml0eSB9IGZyb20gXCIuLi9hdXRob3JpdHkvQXV0aG9yaXR5XCI7XHJcbmltcG9ydCB7IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyIH0gZnJvbSBcIi4uL3JlcXVlc3QvUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXJcIjtcclxuaW1wb3J0IHsgR3JhbnRUeXBlLCBBQURTZXJ2ZXJQYXJhbUtleXMsIEF1dGhlbnRpY2F0aW9uU2NoZW1lIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBDbGllbnRDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4uL2NvbmZpZy9DbGllbnRDb25maWd1cmF0aW9uXCI7XHJcbmltcG9ydCB7IFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlIH0gZnJvbSBcIi4uL3Jlc3BvbnNlL1NlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlXCI7XHJcbmltcG9ydCB7IE5ldHdvcmtSZXNwb25zZSB9IGZyb20gXCIuLi9uZXR3b3JrL05ldHdvcmtNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCIuLi9yZXNwb25zZS9SZXNwb25zZUhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vcmVzcG9uc2UvQXV0aGVudGljYXRpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgQ2xpZW50QXV0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudEF1dGhFcnJvclwiO1xyXG5pbXBvcnQgeyBVcmxTdHJpbmcgfSBmcm9tIFwiLi4vdXJsL1VybFN0cmluZ1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZVJlc3BvbnNlIH0gZnJvbSBcIi4uL3Jlc3BvbnNlL1NlcnZlckF1dGhvcml6YXRpb25Db2RlUmVzcG9uc2VcIjtcclxuaW1wb3J0IHsgQWNjb3VudEVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BY2NvdW50RW50aXR5XCI7XHJcbmltcG9ydCB7IEVuZFNlc3Npb25SZXF1ZXN0IH0gZnJvbSBcIi4uL3JlcXVlc3QvRW5kU2Vzc2lvblJlcXVlc3RcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvclwiO1xyXG5pbXBvcnQgeyBQb3BUb2tlbkdlbmVyYXRvciB9IGZyb20gXCIuLi9jcnlwdG8vUG9wVG9rZW5HZW5lcmF0b3JcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFRodW1icHJpbnQgfSBmcm9tIFwiLi4vbmV0d29yay9SZXF1ZXN0VGh1bWJwcmludFwiO1xyXG5cclxuLyoqXHJcbiAqIE9hdXRoMi4wIEF1dGhvcml6YXRpb24gQ29kZSBjbGllbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRob3JpemF0aW9uQ29kZUNsaWVudCBleHRlbmRzIEJhc2VDbGllbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb246IENsaWVudENvbmZpZ3VyYXRpb24pIHtcclxuICAgICAgICBzdXBlcihjb25maWd1cmF0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIFVSTCBvZiB0aGUgYXV0aG9yaXphdGlvbiByZXF1ZXN0IGxldHRpbmcgdGhlIHVzZXIgaW5wdXQgY3JlZGVudGlhbHMgYW5kIGNvbnNlbnQgdG8gdGhlXHJcbiAgICAgKiBhcHBsaWNhdGlvbi4gVGhlIFVSTCB0YXJnZXQgdGhlIC9hdXRob3JpemUgZW5kcG9pbnQgb2YgdGhlIGF1dGhvcml0eSBjb25maWd1cmVkIGluIHRoZVxyXG4gICAgICogYXBwbGljYXRpb24gb2JqZWN0LlxyXG4gICAgICpcclxuICAgICAqIE9uY2UgdGhlIHVzZXIgaW5wdXRzIHRoZWlyIGNyZWRlbnRpYWxzIGFuZCBjb25zZW50cywgdGhlIGF1dGhvcml0eSB3aWxsIHNlbmQgYSByZXNwb25zZSB0byB0aGUgcmVkaXJlY3QgVVJJXHJcbiAgICAgKiBzZW50IGluIHRoZSByZXF1ZXN0IGFuZCBzaG91bGQgY29udGFpbiBhbiBhdXRob3JpemF0aW9uIGNvZGUsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgdG8gYWNxdWlyZSB0b2tlbnMgdmlhXHJcbiAgICAgKiBhY3F1aXJlVG9rZW4oQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0KVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0QXV0aENvZGVVcmwocmVxdWVzdDogQXV0aG9yaXphdGlvblVybFJlcXVlc3QpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gdGhpcy5jcmVhdGVBdXRoQ29kZVVybFF1ZXJ5U3RyaW5nKHJlcXVlc3QpO1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmF1dGhvcml0eS5hdXRob3JpemF0aW9uRW5kcG9pbnR9PyR7cXVlcnlTdHJpbmd9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFQSSB0byBhY3F1aXJlIGEgdG9rZW4gaW4gZXhjaGFuZ2Ugb2YgJ2F1dGhvcml6YXRpb25fY29kZWAgYWNxdWlyZWQgYnkgdGhlIHVzZXIgaW4gdGhlIGZpcnN0IGxlZyBvZiB0aGVcclxuICAgICAqIGF1dGhvcml6YXRpb25fY29kZV9ncmFudFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgYXN5bmMgYWNxdWlyZVRva2VuKHJlcXVlc3Q6IEF1dGhvcml6YXRpb25Db2RlUmVxdWVzdCwgY2FjaGVkTm9uY2U/OiBzdHJpbmcsIGNhY2hlZFN0YXRlPzogc3RyaW5nKTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJpbiBhY3F1aXJlVG9rZW4gY2FsbFwiKTtcclxuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgU3RyaW5nVXRpbHMuaXNFbXB0eShyZXF1ZXN0LmNvZGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVUb2tlblJlcXVlc3RDYW5ub3RCZU1hZGVFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVUb2tlblJlcXVlc3QodGhpcy5hdXRob3JpdHksIHJlcXVlc3QpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSBuZXcgUmVzcG9uc2VIYW5kbGVyKFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRJZCxcclxuICAgICAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvVXRpbHMsXHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXJpYWxpemFibGVDYWNoZSxcclxuICAgICAgICAgICAgdGhpcy5jb25maWcucGVyc2lzdGVuY2VQbHVnaW5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBWYWxpZGF0ZSByZXNwb25zZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3MgYSBzZXJ2ZXIgZXJyb3IgaWYgYW4gZXJyb3IgaXMgcmV0dXJuZWQgYnkgdGhlIHNlcnZlci5cclxuICAgICAgICByZXNwb25zZUhhbmRsZXIudmFsaWRhdGVUb2tlblJlc3BvbnNlKHJlc3BvbnNlLmJvZHkpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZUhhbmRsZXIuaGFuZGxlU2VydmVyVG9rZW5SZXNwb25zZShyZXNwb25zZS5ib2R5LCB0aGlzLmF1dGhvcml0eSwgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RNZXRob2QsIHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0VXJpLCBjYWNoZWROb25jZSwgY2FjaGVkU3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgaGFzaCBmcmFnbWVudCByZXNwb25zZSBmcm9tIHB1YmxpYyBjbGllbnQgY29kZSByZXF1ZXN0LiBSZXR1cm5zIGEgY29kZSByZXNwb25zZSB1c2VkIGJ5XHJcbiAgICAgKiB0aGUgY2xpZW50IHRvIGV4Y2hhbmdlIGZvciBhIHRva2VuIGluIGFjcXVpcmVUb2tlbi5cclxuICAgICAqIEBwYXJhbSBoYXNoRnJhZ21lbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRnJhZ21lbnRSZXNwb25zZShoYXNoRnJhZ21lbnQ6IHN0cmluZywgY2FjaGVkU3RhdGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgLy8gSGFuZGxlIHJlc3BvbnNlcy5cclxuICAgICAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSBuZXcgUmVzcG9uc2VIYW5kbGVyKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLCB0aGlzLmNhY2hlTWFuYWdlciwgdGhpcy5jcnlwdG9VdGlscywgdGhpcy5sb2dnZXIpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgVXJsU3RyaW5nIG9iamVjdCB0byByZW1vdmUgbGVhZGluZyAjIHVzaW5nIGdldEhhc2goKVxyXG4gICAgICAgIGNvbnN0IGhhc2hVcmxTdHJpbmcgPSBuZXcgVXJsU3RyaW5nKGhhc2hGcmFnbWVudCk7XHJcbiAgICAgICAgLy8gRGVzZXJpYWxpemUgaGFzaCBmcmFnbWVudCByZXNwb25zZSBwYXJhbWV0ZXJzLlxyXG4gICAgICAgIGNvbnN0IHNlcnZlclBhcmFtczogU2VydmVyQXV0aG9yaXphdGlvbkNvZGVSZXNwb25zZSA9IFVybFN0cmluZy5nZXREZXNlcmlhbGl6ZWRIYXNoKGhhc2hVcmxTdHJpbmcuZ2V0SGFzaCgpKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IGNvZGUgcmVzcG9uc2VcclxuICAgICAgICByZXNwb25zZUhhbmRsZXIudmFsaWRhdGVTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZVJlc3BvbnNlKHNlcnZlclBhcmFtcywgY2FjaGVkU3RhdGUsIHRoaXMuY3J5cHRvVXRpbHMpO1xyXG4gICAgICAgIHJldHVybiBzZXJ2ZXJQYXJhbXMuY29kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZSB0byBsb2cgb3V0IHRoZSBjdXJyZW50IHVzZXIsIGFuZCByZWRpcmVjdCB0aGUgdXNlciB0byB0aGUgcG9zdExvZ291dFJlZGlyZWN0VXJpLlxyXG4gICAgICogRGVmYXVsdCBiZWhhdmlvdXIgaXMgdG8gcmVkaXJlY3QgdGhlIHVzZXIgdG8gYHdpbmRvdy5sb2NhdGlvbi5ocmVmYC5cclxuICAgICAqIEBwYXJhbSBhdXRob3JpdHlVcmlcclxuICAgICAqL1xyXG4gICAgZ2V0TG9nb3V0VXJpKGxvZ291dFJlcXVlc3Q6IEVuZFNlc3Npb25SZXF1ZXN0KTogc3RyaW5nIHtcclxuICAgICAgICAvLyBUaHJvdyBlcnJvciBpZiBsb2dvdXRSZXF1ZXN0IGlzIG51bGwvdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKCFsb2dvdXRSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVFbXB0eUxvZ291dFJlcXVlc3RFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxvZ291dFJlcXVlc3QuYWNjb3VudCkge1xyXG4gICAgICAgICAgICAvLyBDbGVhciBnaXZlbiBhY2NvdW50LlxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFuYWdlci5yZW1vdmVBY2NvdW50KEFjY291bnRFbnRpdHkuZ2VuZXJhdGVBY2NvdW50Q2FjaGVLZXkobG9nb3V0UmVxdWVzdC5hY2NvdW50KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQ2xlYXIgYWxsIGFjY291bnRzIGFuZCB0b2tlbnNcclxuICAgICAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdldCBwb3N0TG9nb3V0UmVkaXJlY3RVcmkuXHJcbiAgICAgICAgY29uc3QgcG9zdExvZ291dFVyaVBhcmFtID0gbG9nb3V0UmVxdWVzdC5wb3N0TG9nb3V0UmVkaXJlY3RVcmkgP1xyXG4gICAgICAgICAgICBgPyR7QUFEU2VydmVyUGFyYW1LZXlzLlBPU1RfTE9HT1VUX1VSSX09JHtlbmNvZGVVUklDb21wb25lbnQobG9nb3V0UmVxdWVzdC5wb3N0TG9nb3V0UmVkaXJlY3RVcmkpfWAgOiBcIlwiO1xyXG5cclxuICAgICAgICBjb25zdCBjb3JyZWxhdGlvbklkUGFyYW0gPSBsb2dvdXRSZXF1ZXN0LmNvcnJlbGF0aW9uSWQgP1xyXG4gICAgICAgICAgICBgJiR7QUFEU2VydmVyUGFyYW1LZXlzLkNMSUVOVF9SRVFVRVNUX0lEfT0ke2VuY29kZVVSSUNvbXBvbmVudChsb2dvdXRSZXF1ZXN0LmNvcnJlbGF0aW9uSWQpfWAgOiBcIlwiO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3QgbG9nb3V0IFVSSS5cclxuICAgICAgICBjb25zdCBsb2dvdXRVcmkgPSBgJHt0aGlzLmF1dGhvcml0eS5lbmRTZXNzaW9uRW5kcG9pbnR9JHtwb3N0TG9nb3V0VXJpUGFyYW19JHtjb3JyZWxhdGlvbklkUGFyYW19YDtcclxuICAgICAgICByZXR1cm4gbG9nb3V0VXJpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgUE9TVCByZXF1ZXN0IHRvIHRva2VuIGVuZHBvaW50XHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVUb2tlblJlcXVlc3QoYXV0aG9yaXR5OiBBdXRob3JpdHksIHJlcXVlc3Q6IEF1dGhvcml6YXRpb25Db2RlUmVxdWVzdCk6IFByb21pc2U8TmV0d29ya1Jlc3BvbnNlPFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlPj4ge1xyXG4gICAgICAgIGNvbnN0IHRodW1icHJpbnQ6IFJlcXVlc3RUaHVtYnByaW50ID0ge1xyXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIGF1dGhvcml0eTogYXV0aG9yaXR5LmNhbm9uaWNhbEF1dGhvcml0eSxcclxuICAgICAgICAgICAgc2NvcGVzOiByZXF1ZXN0LnNjb3Blc1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSBhd2FpdCB0aGlzLmNyZWF0ZVRva2VuUmVxdWVzdEJvZHkocmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHRoaXMuY3JlYXRlRGVmYXVsdFRva2VuUmVxdWVzdEhlYWRlcnMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVBvc3RUb1Rva2VuRW5kcG9pbnQoYXV0aG9yaXR5LnRva2VuRW5kcG9pbnQsIHJlcXVlc3RCb2R5LCBoZWFkZXJzLCB0aHVtYnByaW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIG1hcCBmb3IgYWxsIHRoZSBwYXJhbXMgdG8gYmUgc2VudCB0byB0aGUgc2VydmljZVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVUb2tlblJlcXVlc3RCb2R5KHJlcXVlc3Q6IEF1dGhvcml6YXRpb25Db2RlUmVxdWVzdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyQnVpbGRlciA9IG5ldyBSZXF1ZXN0UGFyYW1ldGVyQnVpbGRlcigpO1xyXG5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudElkKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkKTtcclxuXHJcbiAgICAgICAgLy8gdmFsaWRhdGUgdGhlIHJlZGlyZWN0VXJpICh0byBiZSBhIG5vbiBudWxsIHZhbHVlKVxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkUmVkaXJlY3RVcmkocmVxdWVzdC5yZWRpcmVjdFVyaSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBzY29wZSBhcnJheSwgcGFyYW1ldGVyIGJ1aWxkZXIgd2lsbCBhZGQgZGVmYXVsdCBzY29wZXMgYW5kIGRlZHVwZVxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkU2NvcGVzKHJlcXVlc3Quc2NvcGVzKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIGNvZGU6IHVzZXIgc2V0LCBub3QgdmFsaWRhdGVkXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRBdXRob3JpemF0aW9uQ29kZShyZXF1ZXN0LmNvZGUpO1xyXG5cclxuICAgICAgICAvLyBhZGQgY29kZV92ZXJpZmllciBpZiBwYXNzZWRcclxuICAgICAgICBpZiAocmVxdWVzdC5jb2RlVmVyaWZpZXIpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDb2RlVmVyaWZpZXIocmVxdWVzdC5jb2RlVmVyaWZpZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudFNlY3JldCkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudFNlY3JldCh0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRTZWNyZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudEFzc2VydGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRBc3NlcnRpb24gPSB0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRBc3NlcnRpb247XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xpZW50QXNzZXJ0aW9uKGNsaWVudEFzc2VydGlvbi5hc3NlcnRpb24pO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEFzc2VydGlvblR5cGUoY2xpZW50QXNzZXJ0aW9uLmFzc2VydGlvblR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRHcmFudFR5cGUoR3JhbnRUeXBlLkFVVEhPUklaQVRJT05fQ09ERV9HUkFOVCk7XHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGllbnRJbmZvKCk7XHJcblxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmF1dGhlbnRpY2F0aW9uU2NoZW1lID09PSBBdXRoZW50aWNhdGlvblNjaGVtZS5QT1ApIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wVG9rZW5HZW5lcmF0b3IgPSBuZXcgUG9wVG9rZW5HZW5lcmF0b3IodGhpcy5jcnlwdG9VdGlscyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNuZlN0cmluZyA9IGF3YWl0IHBvcFRva2VuR2VuZXJhdG9yLmdlbmVyYXRlQ25mKHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0TWV0aG9kLCByZXF1ZXN0LnJlc291cmNlUmVxdWVzdFVyaSk7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkUG9wVG9rZW4oY25mU3RyaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSByZXF1ZXN0LmNvcnJlbGF0aW9uSWQgfHwgdGhpcy5jb25maWcuY3J5cHRvSW50ZXJmYWNlLmNyZWF0ZU5ld0d1aWQoKTtcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCk7XHJcblxyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShyZXF1ZXN0LmNsYWltcykgfHwgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzICYmIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xhaW1zKHJlcXVlc3QuY2xhaW1zLCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgQVBJIHZhbGlkYXRlcyB0aGUgYEF1dGhvcml6YXRpb25Db2RlVXJsUmVxdWVzdGAgYW5kIGNyZWF0ZXMgYSBVUkxcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlQXV0aENvZGVVcmxRdWVyeVN0cmluZyhyZXF1ZXN0OiBBdXRob3JpemF0aW9uVXJsUmVxdWVzdCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyQnVpbGRlciA9IG5ldyBSZXF1ZXN0UGFyYW1ldGVyQnVpbGRlcigpO1xyXG5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudElkKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFNjb3BlcyA9IFsuLi5yZXF1ZXN0LnNjb3BlcyB8fCBbXSwgLi4ucmVxdWVzdC5leHRyYVNjb3Blc1RvQ29uc2VudCB8fCBbXV07XHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRTY29wZXMocmVxdWVzdFNjb3Blcyk7XHJcblxyXG4gICAgICAgIC8vIHZhbGlkYXRlIHRoZSByZWRpcmVjdFVyaSAodG8gYmUgYSBub24gbnVsbCB2YWx1ZSlcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZFJlZGlyZWN0VXJpKHJlcXVlc3QucmVkaXJlY3RVcmkpO1xyXG5cclxuICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgY29ycmVsYXRpb25JZCBpZiBub3Qgc2V0IGJ5IHRoZSB1c2VyIGFuZCBhZGRcclxuICAgICAgICBjb25zdCBjb3JyZWxhdGlvbklkID0gcmVxdWVzdC5jb3JyZWxhdGlvbklkIHx8IHRoaXMuY29uZmlnLmNyeXB0b0ludGVyZmFjZS5jcmVhdGVOZXdHdWlkKCk7XHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDb3JyZWxhdGlvbklkKGNvcnJlbGF0aW9uSWQpO1xyXG5cclxuICAgICAgICAvLyBhZGQgcmVzcG9uc2VfbW9kZS4gSWYgbm90IHBhc3NlZCBpbiBpdCBkZWZhdWx0cyB0byBxdWVyeS5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZFJlc3BvbnNlTW9kZShyZXF1ZXN0LnJlc3BvbnNlTW9kZSk7XHJcblxyXG4gICAgICAgIC8vIGFkZCByZXNwb25zZV90eXBlID0gY29kZVxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkUmVzcG9uc2VUeXBlQ29kZSgpO1xyXG5cclxuICAgICAgICAvLyBhZGQgbGlicmFyeSBpbmZvIHBhcmFtZXRlcnNcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZExpYnJhcnlJbmZvKHRoaXMuY29uZmlnLmxpYnJhcnlJbmZvKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIGNsaWVudF9pbmZvPTFcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEluZm8oKTtcclxuXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuY29kZUNoYWxsZW5nZSkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENvZGVDaGFsbGVuZ2VQYXJhbXMocmVxdWVzdC5jb2RlQ2hhbGxlbmdlLCByZXF1ZXN0LmNvZGVDaGFsbGVuZ2VNZXRob2QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlcXVlc3QucHJvbXB0KSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkUHJvbXB0KHJlcXVlc3QucHJvbXB0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmRvbWFpbkhpbnQpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGREb21haW5IaW50KHJlcXVlc3QuZG9tYWluSGludCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgc2lkIG9yIGxvZ2luSGludCB3aXRoIHByZWZlcmVuY2UgZm9yIHNpZCAtPiBsb2dpbkhpbnQgLT4gdXNlcm5hbWUgb2YgQWNjb3VudEluZm8gb2JqZWN0XHJcbiAgICAgICAgaWYgKHJlcXVlc3Quc2lkKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkU2lkKHJlcXVlc3Quc2lkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QubG9naW5IaW50KSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkTG9naW5IaW50KHJlcXVlc3QubG9naW5IaW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuYWNjb3VudCAmJiByZXF1ZXN0LmFjY291bnQudXNlcm5hbWUpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRMb2dpbkhpbnQocmVxdWVzdC5hY2NvdW50LnVzZXJuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXF1ZXN0Lm5vbmNlKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkTm9uY2UocmVxdWVzdC5ub25jZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0ZSkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZFN0YXRlKHJlcXVlc3Quc3RhdGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHJlcXVlc3QuY2xhaW1zKSB8fCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMgJiYgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGFpbXMocmVxdWVzdC5jbGFpbXMsIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVxdWVzdC5leHRyYVF1ZXJ5UGFyYW1ldGVycykge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZEV4dHJhUXVlcnlQYXJhbWV0ZXJzKHJlcXVlc3QuZXh0cmFRdWVyeVBhcmFtZXRlcnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERldmljZUNvZGVSZXNwb25zZSwgU2VydmVyRGV2aWNlQ29kZVJlc3BvbnNlIH0gZnJvbSBcIi4uL3Jlc3BvbnNlL0RldmljZUNvZGVSZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBCYXNlQ2xpZW50IH0gZnJvbSBcIi4vQmFzZUNsaWVudFwiO1xyXG5pbXBvcnQgeyBEZXZpY2VDb2RlUmVxdWVzdCB9IGZyb20gXCIuLi9yZXF1ZXN0L0RldmljZUNvZGVSZXF1ZXN0XCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIgfSBmcm9tIFwiLi4vcmVxdWVzdC9SZXF1ZXN0UGFyYW1ldGVyQnVpbGRlclwiO1xyXG5pbXBvcnQgeyBDb25zdGFudHMsIEdyYW50VHlwZSB9IGZyb20gXCIuLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb25maWcvQ2xpZW50Q29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBUaW1lVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvVGltZVV0aWxzXCI7XHJcbmltcG9ydCB7IFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlIH0gZnJvbSBcIi4uL3Jlc3BvbnNlL1NlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlXCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCIuLi9yZXNwb25zZS9SZXNwb25zZUhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vcmVzcG9uc2UvQXV0aGVudGljYXRpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFRodW1icHJpbnQgfSBmcm9tIFwiLi4vbmV0d29yay9SZXF1ZXN0VGh1bWJwcmludFwiO1xyXG5cclxuLyoqXHJcbiAqIE9BdXRoMi4wIERldmljZSBjb2RlIGNsaWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERldmljZUNvZGVDbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uOiBDbGllbnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGRldmljZSBjb2RlIGZyb20gZGV2aWNlIGNvZGUgZW5kcG9pbnQsIGNhbGxzIGJhY2sgdG8gd2l0aCBkZXZpY2UgY29kZSByZXNwb25zZSwgYW5kXHJcbiAgICAgKiBwb2xscyB0b2tlbiBlbmRwb2ludCB0byBleGNoYW5nZSBkZXZpY2UgY29kZSBmb3IgdG9rZW5zXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgYWNxdWlyZVRva2VuKHJlcXVlc3Q6IERldmljZUNvZGVSZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xyXG5cclxuICAgICAgICBjb25zdCBkZXZpY2VDb2RlUmVzcG9uc2U6IERldmljZUNvZGVSZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlQ29kZShyZXF1ZXN0KTtcclxuICAgICAgICByZXF1ZXN0LmRldmljZUNvZGVDYWxsYmFjayhkZXZpY2VDb2RlUmVzcG9uc2UpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBTZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZSA9IGF3YWl0IHRoaXMuYWNxdWlyZVRva2VuV2l0aERldmljZUNvZGUoXHJcbiAgICAgICAgICAgIHJlcXVlc3QsXHJcbiAgICAgICAgICAgIGRldmljZUNvZGVSZXNwb25zZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSGFuZGxlciA9IG5ldyBSZXNwb25zZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFuYWdlcixcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9VdGlscyxcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlcmlhbGl6YWJsZUNhY2hlLFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZVBsdWdpblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRlIHJlc3BvbnNlLiBUaGlzIGZ1bmN0aW9uIHRocm93cyBhIHNlcnZlciBlcnJvciBpZiBhbiBlcnJvciBpcyByZXR1cm5lZCBieSB0aGUgc2VydmVyLlxyXG4gICAgICAgIHJlc3BvbnNlSGFuZGxlci52YWxpZGF0ZVRva2VuUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZUhhbmRsZXIuaGFuZGxlU2VydmVyVG9rZW5SZXNwb25zZShcclxuICAgICAgICAgICAgcmVzcG9uc2UsXHJcbiAgICAgICAgICAgIHRoaXMuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICByZXF1ZXN0LnJlc291cmNlUmVxdWVzdE1ldGhvZCxcclxuICAgICAgICAgICAgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RVcmlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBkZXZpY2UgY29kZSByZXF1ZXN0IGFuZCBleGVjdXRlcyBodHRwIEdFVFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXREZXZpY2VDb2RlKHJlcXVlc3Q6IERldmljZUNvZGVSZXF1ZXN0KTogUHJvbWlzZTxEZXZpY2VDb2RlUmVzcG9uc2U+IHtcclxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHRoaXMuY3JlYXRlUXVlcnlTdHJpbmcocmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3JlYXRlRGVmYXVsdExpYnJhcnlIZWFkZXJzKCk7XHJcbiAgICAgICAgY29uc3QgdGh1bWJwcmludDogUmVxdWVzdFRodW1icHJpbnQgPSB7XHJcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRJZCxcclxuICAgICAgICAgICAgYXV0aG9yaXR5OiByZXF1ZXN0LmF1dGhvcml0eSxcclxuICAgICAgICAgICAgc2NvcGVzOiByZXF1ZXN0LnNjb3Blc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVQb3N0UmVxdWVzdFRvRGV2aWNlQ29kZUVuZHBvaW50KHRoaXMuYXV0aG9yaXR5LmRldmljZUNvZGVFbmRwb2ludCwgcXVlcnlTdHJpbmcsIGhlYWRlcnMsIHRodW1icHJpbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgUE9TVCByZXF1ZXN0IHRvIGRldmljZSBjb2RlIGVuZHBvaW50XHJcbiAgICAgKiBAcGFyYW0gZGV2aWNlQ29kZUVuZHBvaW50XHJcbiAgICAgKiBAcGFyYW0gcXVlcnlTdHJpbmdcclxuICAgICAqIEBwYXJhbSBoZWFkZXJzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVBvc3RSZXF1ZXN0VG9EZXZpY2VDb2RlRW5kcG9pbnQoXHJcbiAgICAgICAgZGV2aWNlQ29kZUVuZHBvaW50OiBzdHJpbmcsXHJcbiAgICAgICAgcXVlcnlTdHJpbmc6IHN0cmluZyxcclxuICAgICAgICBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG4gICAgICAgIHRodW1icHJpbnQ6IFJlcXVlc3RUaHVtYnByaW50KTogUHJvbWlzZTxEZXZpY2VDb2RlUmVzcG9uc2U+IHtcclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgICB1c2VyX2NvZGU6IHVzZXJDb2RlLFxyXG4gICAgICAgICAgICAgICAgZGV2aWNlX2NvZGU6IGRldmljZUNvZGUsXHJcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fdXJpOiB2ZXJpZmljYXRpb25VcmksXHJcbiAgICAgICAgICAgICAgICBleHBpcmVzX2luOiBleHBpcmVzSW4sXHJcbiAgICAgICAgICAgICAgICBpbnRlcnZhbCxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gPSBhd2FpdCB0aGlzLm5ldHdvcmtNYW5hZ2VyLnNlbmRQb3N0UmVxdWVzdDxTZXJ2ZXJEZXZpY2VDb2RlUmVzcG9uc2U+KFxyXG4gICAgICAgICAgICB0aHVtYnByaW50LFxyXG4gICAgICAgICAgICBkZXZpY2VDb2RlRW5kcG9pbnQsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IHF1ZXJ5U3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlckNvZGUsXHJcbiAgICAgICAgICAgIGRldmljZUNvZGUsXHJcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvblVyaSxcclxuICAgICAgICAgICAgZXhwaXJlc0luLFxyXG4gICAgICAgICAgICBpbnRlcnZhbCxcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgZGV2aWNlIGNvZGUgZW5kcG9pbnQgcXVlcnkgcGFyYW1ldGVycyBhbmQgcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVRdWVyeVN0cmluZyhyZXF1ZXN0OiBEZXZpY2VDb2RlUmVxdWVzdCk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlckJ1aWxkZXI6IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyID0gbmV3IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkU2NvcGVzKHJlcXVlc3Quc2NvcGVzKTtcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudElkKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIVN0cmluZ1V0aWxzLmlzRW1wdHkocmVxdWVzdC5jbGFpbXMpIHx8IHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcyAmJiB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsYWltcyhyZXF1ZXN0LmNsYWltcywgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJCdWlsZGVyLmNyZWF0ZVF1ZXJ5U3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRva2VuIHJlcXVlc3Qgd2l0aCBkZXZpY2UgY29kZSByZXNwb25zZSBhbmQgcG9sbHMgdG9rZW4gZW5kcG9pbnQgYXQgaW50ZXJ2YWwgc2V0IGJ5IHRoZSBkZXZpY2UgY29kZVxyXG4gICAgICogcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gZGV2aWNlQ29kZVJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgYWNxdWlyZVRva2VuV2l0aERldmljZUNvZGUoXHJcbiAgICAgICAgcmVxdWVzdDogRGV2aWNlQ29kZVJlcXVlc3QsXHJcbiAgICAgICAgZGV2aWNlQ29kZVJlc3BvbnNlOiBEZXZpY2VDb2RlUmVzcG9uc2UpOiBQcm9taXNlPFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlPiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gdGhpcy5jcmVhdGVUb2tlblJlcXVlc3RCb2R5KHJlcXVlc3QsIGRldmljZUNvZGVSZXNwb25zZSk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHRoaXMuY3JlYXRlRGVmYXVsdFRva2VuUmVxdWVzdEhlYWRlcnMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGV2aWNlQ29kZUV4cGlyYXRpb25UaW1lID0gVGltZVV0aWxzLm5vd1NlY29uZHMoKSArIGRldmljZUNvZGVSZXNwb25zZS5leHBpcmVzSW47XHJcbiAgICAgICAgY29uc3QgcG9sbGluZ0ludGVydmFsTWlsbGkgPSBkZXZpY2VDb2RlUmVzcG9uc2UuaW50ZXJ2YWwgKiAxMDAwO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFBvbGwgdG9rZW4gZW5kcG9pbnQgd2hpbGUgKGRldmljZSBjb2RlIGlzIG5vdCBleHBpcmVkIEFORCBvcGVyYXRpb24gaGFzIG5vdCBiZWVuIGNhbmNlbGxlZCBieVxyXG4gICAgICAgICAqIHNldHRpbmcgQ2FuY2VsbGF0aW9uVG9rZW4uY2FuY2VsID0gdHJ1ZSkuIFBPU1QgcmVxdWVzdCBpcyBzZW50IGF0IGludGVydmFsIHNldCBieSBwb2xsaW5nSW50ZXJ2YWxNaWxsaVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJ2ZXJBdXRob3JpemF0aW9uVG9rZW5SZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWxJZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LmNhbmNlbCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJUb2tlbiByZXF1ZXN0IGNhbmNlbGxlZCBieSBzZXR0aW5nIERldmljZUNvZGVSZXF1ZXN0LmNhbmNlbCA9IHRydWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChDbGllbnRBdXRoRXJyb3IuY3JlYXRlRGV2aWNlQ29kZUNhbmNlbGxlZEVycm9yKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFRpbWVVdGlscy5ub3dTZWNvbmRzKCkgPiBkZXZpY2VDb2RlRXhwaXJhdGlvblRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYERldmljZSBjb2RlIGV4cGlyZWQuIEV4cGlyYXRpb24gdGltZSBvZiBkZXZpY2UgY29kZSB3YXMgJHtkZXZpY2VDb2RlRXhwaXJhdGlvblRpbWV9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChDbGllbnRBdXRoRXJyb3IuY3JlYXRlRGV2aWNlQ29kZUV4cGlyZWRFcnJvcigpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGh1bWJwcmludDogUmVxdWVzdFRodW1icHJpbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHk6IHJlcXVlc3QuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVzOiByZXF1ZXN0LnNjb3Blc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVBvc3RUb1Rva2VuRW5kcG9pbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhvcml0eS50b2tlbkVuZHBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJwcmludCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYm9keSAmJiByZXNwb25zZS5ib2R5LmVycm9yID09IENvbnN0YW50cy5BVVRIT1JJWkFUSU9OX1BFTkRJTkcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZXIgYXV0aG9yaXphdGlvbiBpcyBwZW5kaW5nLiBTbGVlcCBmb3IgcG9sbGluZyBpbnRlcnZhbCBhbmQgdHJ5IGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKHJlc3BvbnNlLmJvZHkuZXJyb3JfZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuYm9keSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgcG9sbGluZ0ludGVydmFsTWlsbGkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBxdWVyeSBwYXJhbWV0ZXJzIGFuZCBjb252ZXJ0cyB0byBzdHJpbmcuXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIGRldmljZUNvZGVSZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVRva2VuUmVxdWVzdEJvZHkocmVxdWVzdDogRGV2aWNlQ29kZVJlcXVlc3QsIGRldmljZUNvZGVSZXNwb25zZTogRGV2aWNlQ29kZVJlc3BvbnNlKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFBhcmFtZXRlcnM6IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyID0gbmV3IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgIHJlcXVlc3RQYXJhbWV0ZXJzLmFkZFNjb3BlcyhyZXF1ZXN0LnNjb3Blcyk7XHJcbiAgICAgICAgcmVxdWVzdFBhcmFtZXRlcnMuYWRkQ2xpZW50SWQodGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQpO1xyXG4gICAgICAgIHJlcXVlc3RQYXJhbWV0ZXJzLmFkZEdyYW50VHlwZShHcmFudFR5cGUuREVWSUNFX0NPREVfR1JBTlQpO1xyXG4gICAgICAgIHJlcXVlc3RQYXJhbWV0ZXJzLmFkZERldmljZUNvZGUoZGV2aWNlQ29kZVJlc3BvbnNlLmRldmljZUNvZGUpO1xyXG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSByZXF1ZXN0LmNvcnJlbGF0aW9uSWQgfHwgdGhpcy5jb25maWcuY3J5cHRvSW50ZXJmYWNlLmNyZWF0ZU5ld0d1aWQoKTtcclxuICAgICAgICByZXF1ZXN0UGFyYW1ldGVycy5hZGRDb3JyZWxhdGlvbklkKGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIHJlcXVlc3RQYXJhbWV0ZXJzLmFkZENsaWVudEluZm8oKTtcclxuXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHJlcXVlc3QuY2xhaW1zKSB8fCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMgJiYgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmVxdWVzdFBhcmFtZXRlcnMuYWRkQ2xhaW1zKHJlcXVlc3QuY2xhaW1zLCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdFBhcmFtZXRlcnMuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlnL0NsaWVudENvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgQmFzZUNsaWVudCB9IGZyb20gXCIuL0Jhc2VDbGllbnRcIjtcclxuaW1wb3J0IHsgUmVmcmVzaFRva2VuUmVxdWVzdCB9IGZyb20gXCIuLi9yZXF1ZXN0L1JlZnJlc2hUb2tlblJlcXVlc3RcIjtcclxuaW1wb3J0IHsgQXV0aG9yaXR5IH0gZnJvbSBcIi4uL2F1dGhvcml0eS9BdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2UgfSBmcm9tIFwiLi4vcmVzcG9uc2UvU2VydmVyQXV0aG9yaXphdGlvblRva2VuUmVzcG9uc2VcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIgfSBmcm9tIFwiLi4vcmVxdWVzdC9SZXF1ZXN0UGFyYW1ldGVyQnVpbGRlclwiO1xyXG5pbXBvcnQgeyBHcmFudFR5cGUsIEF1dGhlbnRpY2F0aW9uU2NoZW1lLCBFcnJvcnMgIH0gZnJvbSBcIi4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBSZXNwb25zZUhhbmRsZXIgfSBmcm9tIFwiLi4vcmVzcG9uc2UvUmVzcG9uc2VIYW5kbGVyXCI7XHJcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uUmVzdWx0IH0gZnJvbSBcIi4uL3Jlc3BvbnNlL0F1dGhlbnRpY2F0aW9uUmVzdWx0XCI7XHJcbmltcG9ydCB7IFBvcFRva2VuR2VuZXJhdG9yIH0gZnJvbSBcIi4uL2NyeXB0by9Qb3BUb2tlbkdlbmVyYXRvclwiO1xyXG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gXCIuLi91dGlscy9TdHJpbmdVdGlsc1wiO1xyXG5pbXBvcnQgeyBSZXF1ZXN0VGh1bWJwcmludCB9IGZyb20gXCIuLi9uZXR3b3JrL1JlcXVlc3RUaHVtYnByaW50XCI7XHJcbmltcG9ydCB7IE5ldHdvcmtSZXNwb25zZSB9IGZyb20gXCIuLi9uZXR3b3JrL05ldHdvcmtNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFNpbGVudEZsb3dSZXF1ZXN0IH0gZnJvbSBcIi4uL3JlcXVlc3QvU2lsZW50Rmxvd1JlcXVlc3RcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvclwiO1xyXG5pbXBvcnQgeyBDbGllbnRBdXRoRXJyb3IsIENsaWVudEF1dGhFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IFNlcnZlckVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL1NlcnZlckVycm9yXCI7XHJcblxyXG4vKipcclxuICogT0F1dGgyLjAgcmVmcmVzaCB0b2tlbiBjbGllbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWZyZXNoVG9rZW5DbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uOiBDbGllbnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGFjcXVpcmVUb2tlbihyZXF1ZXN0OiBSZWZyZXNoVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVUb2tlblJlcXVlc3QocmVxdWVzdCwgdGhpcy5hdXRob3JpdHkpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSBuZXcgUmVzcG9uc2VIYW5kbGVyKFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRJZCxcclxuICAgICAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvVXRpbHMsXHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXJpYWxpemFibGVDYWNoZSxcclxuICAgICAgICAgICAgdGhpcy5jb25maWcucGVyc2lzdGVuY2VQbHVnaW5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXNwb25zZUhhbmRsZXIudmFsaWRhdGVUb2tlblJlc3BvbnNlKHJlc3BvbnNlLmJvZHkpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZUhhbmRsZXIuaGFuZGxlU2VydmVyVG9rZW5SZXNwb25zZShcclxuICAgICAgICAgICAgcmVzcG9uc2UuYm9keSxcclxuICAgICAgICAgICAgdGhpcy5hdXRob3JpdHksXHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0TWV0aG9kLFxyXG4gICAgICAgICAgICByZXF1ZXN0LnJlc291cmNlUmVxdWVzdFVyaSxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGNhY2hlZCByZWZyZXNoIHRva2VuIGFuZCBhdHRhY2hlcyB0byByZXF1ZXN0LCB0aGVuIGNhbGxzIGFjcXVpcmVUb2tlbiBBUElcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBhY3F1aXJlVG9rZW5CeVJlZnJlc2hUb2tlbihyZXF1ZXN0OiBTaWxlbnRGbG93UmVxdWVzdCk6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuICAgICAgICAvLyBDYW5ub3QgcmVuZXcgdG9rZW4gaWYgbm8gcmVxdWVzdCBvYmplY3QgaXMgZ2l2ZW4uXHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVFbXB0eVRva2VuUmVxdWVzdEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBjdXJyZW50bHkgZG8gbm90IHN1cHBvcnQgc2lsZW50IGZsb3cgZm9yIGFjY291bnQgPT09IG51bGwgdXNlIGNhc2VzOyBUaGlzIHdpbGwgYmUgcmV2aXNpdGVkIGZvciBjb25maWRlbnRpYWwgZmxvdyB1c2VjYXNlc1xyXG4gICAgICAgIGlmICghcmVxdWVzdC5hY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVOb0FjY291bnRJblNpbGVudFJlcXVlc3RFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJ5IGNoZWNraW5nIGlmIEZPQ0kgaXMgZW5hYmxlZCBmb3IgdGhlIGdpdmVuIGFwcGxpY2F0aW9uXHJcbiAgICAgICAgY29uc3QgaXNGT0NJID0gdGhpcy5jYWNoZU1hbmFnZXIuaXNBcHBNZXRhZGF0YUZPQ0kocmVxdWVzdC5hY2NvdW50LmVudmlyb25tZW50LCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRJZCk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSBhcHAgaXMgcGFydCBvZiB0aGUgZmFtaWx5LCByZXRyaXZlIGEgRmFtaWx5IHJlZnJlc2ggdG9rZW4gaWYgcHJlc2VudCBhbmQgbWFrZSBhIHJlZnJlc2hUb2tlblJlcXVlc3RcclxuICAgICAgICBpZiAoaXNGT0NJKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY3F1aXJlVG9rZW5XaXRoQ2FjaGVkUmVmcmVzaFRva2VuKHJlcXVlc3QsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub0ZhbWlseVJUSW5DYWNoZSA9IGUgaW5zdGFuY2VvZiBDbGllbnRBdXRoRXJyb3IgJiYgZS5lcnJvckNvZGUgPT09IENsaWVudEF1dGhFcnJvck1lc3NhZ2Uubm9Ub2tlbnNGb3VuZEVycm9yLmNvZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRNaXNtYXRjaEVycm9yV2l0aEZhbWlseVJUID0gZSBpbnN0YW5jZW9mIFNlcnZlckVycm9yICYmIGUuZXJyb3JDb2RlID09PSBFcnJvcnMuSU5WQUxJRF9HUkFOVF9FUlJPUiAmJiBlLnN1YkVycm9yID09PSBFcnJvcnMuQ0xJRU5UX01JU01BVENIX0VSUk9SO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGZhbWlseSBSZWZyZXNoIFRva2VuIChGUlQpIGNhY2hlIGFjcXVpc2l0aW9uIGZhaWxzIG9yIGlmIGNsaWVudF9taXNtYXRjaCBlcnJvciBpcyBzZWVuIHdpdGggRlJULCByZWF0dGVtcHQgd2l0aCBhcHBsaWNhdGlvbiBSZWZyZXNoIFRva2VuIChBUlQpXHJcbiAgICAgICAgICAgICAgICBpZiAobm9GYW1pbHlSVEluQ2FjaGUgfHwgY2xpZW50TWlzbWF0Y2hFcnJvcldpdGhGYW1pbHlSVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFjcXVpcmVUb2tlbldpdGhDYWNoZWRSZWZyZXNoVG9rZW4ocmVxdWVzdCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgaW4gYWxsIG90aGVyIGNhc2VzXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmYWxsIGJhY2sgdG8gYXBwbGljYXRpb24gcmVmcmVzaCB0b2tlbiBhY3F1aXNpdGlvblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFjcXVpcmVUb2tlbldpdGhDYWNoZWRSZWZyZXNoVG9rZW4ocmVxdWVzdCwgZmFsc2UpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG1ha2VzIGEgbmV0d29yayBjYWxsIHRvIGFjcXVpcmUgdG9rZW5zIGJ5IGV4Y2hhbmdpbmcgUmVmcmVzaFRva2VuIGF2YWlsYWJsZSBpbiB1c2VyQ2FjaGU7IHRocm93cyBpZiByZWZyZXNoIHRva2VuIGlzIG5vdCBjYWNoZWRcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgYWNxdWlyZVRva2VuV2l0aENhY2hlZFJlZnJlc2hUb2tlbihyZXF1ZXN0OiBTaWxlbnRGbG93UmVxdWVzdCwgZm9jaTogYm9vbGVhbikge1xyXG4gICAgICAgIC8vIGZldGNoZXMgZmFtaWx5IFJUIG9yIGFwcGxpY2F0aW9uIFJUIGJhc2VkIG9uIEZPQ0kgdmFsdWVcclxuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSB0aGlzLmNhY2hlTWFuYWdlci5yZWFkUmVmcmVzaFRva2VuRnJvbUNhY2hlKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLCByZXF1ZXN0LmFjY291bnQsIGZvY2kpO1xyXG5cclxuICAgICAgICAvLyBubyByZWZyZXNoIFRva2VuXHJcbiAgICAgICAgaWYgKCFyZWZyZXNoVG9rZW4pIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZU5vVG9rZW5zRm91bmRFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuUmVxdWVzdDogUmVmcmVzaFRva2VuUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgLi4ucmVxdWVzdCxcclxuICAgICAgICAgICAgcmVmcmVzaFRva2VuOiByZWZyZXNoVG9rZW4uc2VjcmV0XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNxdWlyZVRva2VuKHJlZnJlc2hUb2tlblJlcXVlc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0cyB0aGUgbmV0d29yayBtZXNzYWdlIGFuZCBtYWtlcyBhIE5XIGNhbGwgdG8gdGhlIHVuZGVybHlpbmcgc2VjdXJlIHRva2VuIHNlcnZpY2VcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVRva2VuUmVxdWVzdChyZXF1ZXN0OiBSZWZyZXNoVG9rZW5SZXF1ZXN0LCBhdXRob3JpdHk6IEF1dGhvcml0eSlcclxuICAgICAgICA6IFByb21pc2U8TmV0d29ya1Jlc3BvbnNlPFNlcnZlckF1dGhvcml6YXRpb25Ub2tlblJlc3BvbnNlPj4ge1xyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGF3YWl0IHRoaXMuY3JlYXRlVG9rZW5SZXF1ZXN0Qm9keShyZXF1ZXN0KTtcclxuICAgICAgICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gdGhpcy5jcmVhdGVEZWZhdWx0VG9rZW5SZXF1ZXN0SGVhZGVycygpO1xyXG4gICAgICAgIGNvbnN0IHRodW1icHJpbnQ6IFJlcXVlc3RUaHVtYnByaW50ID0ge1xyXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIGF1dGhvcml0eTogYXV0aG9yaXR5LmNhbm9uaWNhbEF1dGhvcml0eSxcclxuICAgICAgICAgICAgc2NvcGVzOiByZXF1ZXN0LnNjb3Blc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVQb3N0VG9Ub2tlbkVuZHBvaW50KGF1dGhvcml0eS50b2tlbkVuZHBvaW50LCByZXF1ZXN0Qm9keSwgaGVhZGVycywgdGh1bWJwcmludCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSB0b2tlbiByZXF1ZXN0IGJvZHlcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlVG9rZW5SZXF1ZXN0Qm9keShyZXF1ZXN0OiBSZWZyZXNoVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJCdWlsZGVyID0gbmV3IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xpZW50SWQodGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQpO1xyXG5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZFNjb3BlcyhyZXF1ZXN0LnNjb3Blcyk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkR3JhbnRUeXBlKEdyYW50VHlwZS5SRUZSRVNIX1RPS0VOX0dSQU5UKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGllbnRJbmZvKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSByZXF1ZXN0LmNvcnJlbGF0aW9uSWQgfHwgdGhpcy5jb25maWcuY3J5cHRvSW50ZXJmYWNlLmNyZWF0ZU5ld0d1aWQoKTtcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkUmVmcmVzaFRva2VuKHJlcXVlc3QucmVmcmVzaFRva2VuKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudFNlY3JldCkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudFNlY3JldCh0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRTZWNyZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudEFzc2VydGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRBc3NlcnRpb24gPSB0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRBc3NlcnRpb247XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xpZW50QXNzZXJ0aW9uKGNsaWVudEFzc2VydGlvbi5hc3NlcnRpb24pO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEFzc2VydGlvblR5cGUoY2xpZW50QXNzZXJ0aW9uLmFzc2VydGlvblR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUgPT09IEF1dGhlbnRpY2F0aW9uU2NoZW1lLlBPUCkge1xyXG4gICAgICAgICAgICBjb25zdCBwb3BUb2tlbkdlbmVyYXRvciA9IG5ldyBQb3BUb2tlbkdlbmVyYXRvcih0aGlzLmNyeXB0b1V0aWxzKTtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRQb3BUb2tlbihhd2FpdCBwb3BUb2tlbkdlbmVyYXRvci5nZW5lcmF0ZUNuZihyZXF1ZXN0LnJlc291cmNlUmVxdWVzdE1ldGhvZCwgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RVcmkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFTdHJpbmdVdGlscy5pc0VtcHR5KHJlcXVlc3QuY2xhaW1zKSB8fCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMgJiYgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGFpbXMocmVxdWVzdC5jbGFpbXMsIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGFyYW1ldGVyQnVpbGRlci5jcmVhdGVRdWVyeVN0cmluZygpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbiB9IGZyb20gXCIuLi9jb25maWcvQ2xpZW50Q29uZmlndXJhdGlvblwiO1xyXG5pbXBvcnQgeyBCYXNlQ2xpZW50IH0gZnJvbSBcIi4vQmFzZUNsaWVudFwiO1xyXG5pbXBvcnQgeyBBdXRob3JpdHkgfSBmcm9tIFwiLi4vYXV0aG9yaXR5L0F1dGhvcml0eVwiO1xyXG5pbXBvcnQgeyBSZXF1ZXN0UGFyYW1ldGVyQnVpbGRlciB9IGZyb20gXCIuLi9yZXF1ZXN0L1JlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyXCI7XHJcbmltcG9ydCB7IFNjb3BlU2V0IH0gZnJvbSBcIi4uL3JlcXVlc3QvU2NvcGVTZXRcIjtcclxuaW1wb3J0IHsgR3JhbnRUeXBlICwgQ3JlZGVudGlhbFR5cGUgfSBmcm9tIFwiLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCIuLi9yZXNwb25zZS9SZXNwb25zZUhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vcmVzcG9uc2UvQXV0aGVudGljYXRpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q3JlZGVudGlhbFJlcXVlc3QgfSBmcm9tIFwiLi4vcmVxdWVzdC9DbGllbnRDcmVkZW50aWFsUmVxdWVzdFwiO1xyXG5pbXBvcnQgeyBDcmVkZW50aWFsRmlsdGVyLCBDcmVkZW50aWFsQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGUvdXRpbHMvQ2FjaGVUeXBlc1wiO1xyXG5cclxuaW1wb3J0IHsgQWNjZXNzVG9rZW5FbnRpdHkgfSBmcm9tIFwiLi4vY2FjaGUvZW50aXRpZXMvQWNjZXNzVG9rZW5FbnRpdHlcIjtcclxuaW1wb3J0IHsgVGltZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1RpbWVVdGlsc1wiO1xyXG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gXCIuLi91dGlscy9TdHJpbmdVdGlsc1wiO1xyXG5pbXBvcnQgeyBSZXF1ZXN0VGh1bWJwcmludCB9IGZyb20gXCIuLi9uZXR3b3JrL1JlcXVlc3RUaHVtYnByaW50XCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBPQXV0aDIuMCBjbGllbnQgY3JlZGVudGlhbCBncmFudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsaWVudENyZWRlbnRpYWxDbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcclxuXHJcbiAgICBwcml2YXRlIHNjb3BlU2V0OiBTY29wZVNldDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uOiBDbGllbnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGFjcXVpcmVUb2tlbihyZXF1ZXN0OiBDbGllbnRDcmVkZW50aWFsUmVxdWVzdCk6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuXHJcbiAgICAgICAgdGhpcy5zY29wZVNldCA9IG5ldyBTY29wZVNldChyZXF1ZXN0LnNjb3BlcyB8fCBbXSk7XHJcblxyXG4gICAgICAgIGlmIChyZXF1ZXN0LnNraXBDYWNoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlVG9rZW5SZXF1ZXN0KHJlcXVlc3QsIHRoaXMuYXV0aG9yaXR5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNhY2hlZEF1dGhlbnRpY2F0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRDYWNoZWRBdXRoZW50aWNhdGlvblJlc3VsdCgpO1xyXG4gICAgICAgIGlmIChjYWNoZWRBdXRoZW50aWNhdGlvblJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRBdXRoZW50aWNhdGlvblJlc3VsdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlVG9rZW5SZXF1ZXN0KHJlcXVlc3QsIHRoaXMuYXV0aG9yaXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRDYWNoZWRBdXRoZW50aWNhdGlvblJlc3VsdCgpOiBQcm9taXNlPEF1dGhlbnRpY2F0aW9uUmVzdWx0PiB7XHJcbiAgICAgICAgY29uc3QgY2FjaGVkQWNjZXNzVG9rZW4gPSB0aGlzLnJlYWRBY2Nlc3NUb2tlbkZyb21DYWNoZSgpO1xyXG4gICAgICAgIGlmICghY2FjaGVkQWNjZXNzVG9rZW4gfHxcclxuICAgICAgICAgICAgVGltZVV0aWxzLmlzVG9rZW5FeHBpcmVkKGNhY2hlZEFjY2Vzc1Rva2VuLmV4cGlyZXNPbiwgdGhpcy5jb25maWcuc3lzdGVtT3B0aW9ucy50b2tlblJlbmV3YWxPZmZzZXRTZWNvbmRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCBSZXNwb25zZUhhbmRsZXIuZ2VuZXJhdGVBdXRoZW50aWNhdGlvblJlc3VsdChcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9VdGlscyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBjYWNoZWRBY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICAgIGlkVG9rZW46IG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhcHBNZXRhZGF0YTogbnVsbFxyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgbnVsbCwgXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZEFjY2Vzc1Rva2VuRnJvbUNhY2hlKCk6IEFjY2Vzc1Rva2VuRW50aXR5IHtcclxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbkZpbHRlcjogQ3JlZGVudGlhbEZpbHRlciA9IHtcclxuICAgICAgICAgICAgaG9tZUFjY291bnRJZDogXCJcIixcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuYXV0aG9yaXR5LmNhbm9uaWNhbEF1dGhvcml0eVVybENvbXBvbmVudHMuSG9zdE5hbWVBbmRQb3J0LFxyXG4gICAgICAgICAgICBjcmVkZW50aWFsVHlwZTogQ3JlZGVudGlhbFR5cGUuQUNDRVNTX1RPS0VOLFxyXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHJlYWxtOiB0aGlzLmF1dGhvcml0eS50ZW5hbnQsXHJcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5zY29wZVNldC5wcmludFNjb3Blc0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjcmVkZW50aWFsQ2FjaGU6IENyZWRlbnRpYWxDYWNoZSA9IHRoaXMuY2FjaGVNYW5hZ2VyLmdldENyZWRlbnRpYWxzRmlsdGVyZWRCeShhY2Nlc3NUb2tlbkZpbHRlcik7XHJcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW5zID0gT2JqZWN0LmtleXMoY3JlZGVudGlhbENhY2hlLmFjY2Vzc1Rva2VucykubWFwKGtleSA9PiBjcmVkZW50aWFsQ2FjaGUuYWNjZXNzVG9rZW5zW2tleV0pO1xyXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9IGVsc2UgaWYgKGFjY2Vzc1Rva2Vucy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVNdWx0aXBsZU1hdGNoaW5nVG9rZW5zSW5DYWNoZUVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbnNbMF0gYXMgQWNjZXNzVG9rZW5FbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBleGVjdXRlVG9rZW5SZXF1ZXN0KHJlcXVlc3Q6IENsaWVudENyZWRlbnRpYWxSZXF1ZXN0LCBhdXRob3JpdHk6IEF1dGhvcml0eSlcclxuICAgICAgICA6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB0aGlzLmNyZWF0ZVRva2VuUmVxdWVzdEJvZHkocmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHRoaXMuY3JlYXRlRGVmYXVsdFRva2VuUmVxdWVzdEhlYWRlcnMoKTtcclxuICAgICAgICBjb25zdCB0aHVtYnByaW50OiBSZXF1ZXN0VGh1bWJwcmludCA9IHtcclxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICBhdXRob3JpdHk6IHJlcXVlc3QuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBzY29wZXM6IHJlcXVlc3Quc2NvcGVzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVQb3N0VG9Ub2tlbkVuZHBvaW50KGF1dGhvcml0eS50b2tlbkVuZHBvaW50LCByZXF1ZXN0Qm9keSwgaGVhZGVycywgdGh1bWJwcmludCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSGFuZGxlciA9IG5ldyBSZXNwb25zZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFuYWdlcixcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9VdGlscyxcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlcmlhbGl6YWJsZUNhY2hlLFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZVBsdWdpblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJlc3BvbnNlSGFuZGxlci52YWxpZGF0ZVRva2VuUmVzcG9uc2UocmVzcG9uc2UuYm9keSk7XHJcbiAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlSGFuZGxlci5oYW5kbGVTZXJ2ZXJUb2tlblJlc3BvbnNlKFxyXG4gICAgICAgICAgICByZXNwb25zZS5ib2R5LFxyXG4gICAgICAgICAgICB0aGlzLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RNZXRob2QsXHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0VXJpLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICByZXF1ZXN0LnNjb3Blc1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiB0b2tlblJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlVG9rZW5SZXF1ZXN0Qm9keShyZXF1ZXN0OiBDbGllbnRDcmVkZW50aWFsUmVxdWVzdCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyQnVpbGRlciA9IG5ldyBSZXF1ZXN0UGFyYW1ldGVyQnVpbGRlcigpO1xyXG5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudElkKHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRTY29wZXMocmVxdWVzdC5zY29wZXMsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRHcmFudFR5cGUoR3JhbnRUeXBlLkNMSUVOVF9DUkVERU5USUFMU19HUkFOVCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSByZXF1ZXN0LmNvcnJlbGF0aW9uSWQgfHwgdGhpcy5jb25maWcuY3J5cHRvSW50ZXJmYWNlLmNyZWF0ZU5ld0d1aWQoKTtcclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRTZWNyZXQpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGllbnRTZWNyZXQodGhpcy5jb25maWcuY2xpZW50Q3JlZGVudGlhbHMuY2xpZW50U2VjcmV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRBc3NlcnRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpZW50QXNzZXJ0aW9uID0gdGhpcy5jb25maWcuY2xpZW50Q3JlZGVudGlhbHMuY2xpZW50QXNzZXJ0aW9uO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEFzc2VydGlvbihjbGllbnRBc3NlcnRpb24uYXNzZXJ0aW9uKTtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGllbnRBc3NlcnRpb25UeXBlKGNsaWVudEFzc2VydGlvbi5hc3NlcnRpb25UeXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghU3RyaW5nVXRpbHMuaXNFbXB0eShyZXF1ZXN0LmNsYWltcykgfHwgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzICYmIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xhaW1zKHJlcXVlc3QuY2xhaW1zLCB0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlnL0NsaWVudENvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgQmFzZUNsaWVudCB9IGZyb20gXCIuL0Jhc2VDbGllbnRcIjtcclxuaW1wb3J0IHsgQXV0aG9yaXR5IH0gZnJvbSBcIi4uL2F1dGhvcml0eS9BdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIgfSBmcm9tIFwiLi4vcmVxdWVzdC9SZXF1ZXN0UGFyYW1ldGVyQnVpbGRlclwiO1xyXG5pbXBvcnQgeyBTY29wZVNldCB9IGZyb20gXCIuLi9yZXF1ZXN0L1Njb3BlU2V0XCI7XHJcbmltcG9ydCB7IEdyYW50VHlwZSwgQUFEU2VydmVyUGFyYW1LZXlzICwgQ3JlZGVudGlhbFR5cGUgfSBmcm9tIFwiLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCIuLi9yZXNwb25zZS9SZXNwb25zZUhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vcmVzcG9uc2UvQXV0aGVudGljYXRpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgT25CZWhhbGZPZlJlcXVlc3QgfSBmcm9tIFwiLi4vcmVxdWVzdC9PbkJlaGFsZk9mUmVxdWVzdFwiO1xyXG5pbXBvcnQgeyBUaW1lVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvVGltZVV0aWxzXCI7XHJcbmltcG9ydCB7IENyZWRlbnRpYWxGaWx0ZXIsIENyZWRlbnRpYWxDYWNoZSB9IGZyb20gXCIuLi9jYWNoZS91dGlscy9DYWNoZVR5cGVzXCI7XHJcblxyXG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BY2Nlc3NUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBJZFRva2VuRW50aXR5IH0gZnJvbSBcIi4uL2NhY2hlL2VudGl0aWVzL0lkVG9rZW5FbnRpdHlcIjtcclxuaW1wb3J0IHsgQWNjb3VudEVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BY2NvdW50RW50aXR5XCI7XHJcbmltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi9hY2NvdW50L0F1dGhUb2tlblwiO1xyXG5pbXBvcnQgeyBDbGllbnRBdXRoRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IFJlcXVlc3RUaHVtYnByaW50IH0gZnJvbSBcIi4uL25ldHdvcmsvUmVxdWVzdFRodW1icHJpbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBPbi1CZWhhbGYtT2YgY2xpZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT25CZWhhbGZPZkNsaWVudCBleHRlbmRzIEJhc2VDbGllbnQge1xyXG5cclxuICAgIHByaXZhdGUgc2NvcGVTZXQ6IFNjb3BlU2V0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb246IENsaWVudENvbmZpZ3VyYXRpb24pIHtcclxuICAgICAgICBzdXBlcihjb25maWd1cmF0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgYWNxdWlyZVRva2VuKHJlcXVlc3Q6IE9uQmVoYWxmT2ZSZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xyXG4gICAgICAgIHRoaXMuc2NvcGVTZXQgPSBuZXcgU2NvcGVTZXQocmVxdWVzdC5zY29wZXMgfHwgW10pO1xyXG5cclxuICAgICAgICBpZiAocmVxdWVzdC5za2lwQ2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZVRva2VuUmVxdWVzdChyZXF1ZXN0LCB0aGlzLmF1dGhvcml0eSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjYWNoZWRBdXRoZW50aWNhdGlvblJlc3VsdCA9IHRoaXMuZ2V0Q2FjaGVkQXV0aGVudGljYXRpb25SZXN1bHQocmVxdWVzdCk7XHJcbiAgICAgICAgaWYgKGNhY2hlZEF1dGhlbnRpY2F0aW9uUmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZEF1dGhlbnRpY2F0aW9uUmVzdWx0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVUb2tlblJlcXVlc3QocmVxdWVzdCwgdGhpcy5hdXRob3JpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldENhY2hlZEF1dGhlbnRpY2F0aW9uUmVzdWx0KHJlcXVlc3Q6IE9uQmVoYWxmT2ZSZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZEFjY2Vzc1Rva2VuID0gdGhpcy5yZWFkQWNjZXNzVG9rZW5Gcm9tQ2FjaGUocmVxdWVzdCk7XHJcbiAgICAgICAgaWYgKCFjYWNoZWRBY2Nlc3NUb2tlbiB8fFxyXG4gICAgICAgICAgICBUaW1lVXRpbHMuaXNUb2tlbkV4cGlyZWQoY2FjaGVkQWNjZXNzVG9rZW4uZXhwaXJlc09uLCB0aGlzLmNvbmZpZy5zeXN0ZW1PcHRpb25zLnRva2VuUmVuZXdhbE9mZnNldFNlY29uZHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2FjaGVkSWRUb2tlbiA9IHRoaXMucmVhZElkVG9rZW5Gcm9tQ2FjaGUocmVxdWVzdCk7XHJcbiAgICAgICAgbGV0IGlkVG9rZW5PYmplY3Q6IEF1dGhUb2tlbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNhY2hlZEFjY291bnQ6IEFjY291bnRFbnRpdHkgPSBudWxsO1xyXG4gICAgICAgIGlmIChjYWNoZWRJZFRva2VuKSB7XHJcbiAgICAgICAgICAgIGlkVG9rZW5PYmplY3QgPSBuZXcgQXV0aFRva2VuKGNhY2hlZElkVG9rZW4uc2VjcmV0LCB0aGlzLmNvbmZpZy5jcnlwdG9JbnRlcmZhY2UpO1xyXG4gICAgICAgICAgICBjb25zdCBhY2NvdW50S2V5ID0gQWNjb3VudEVudGl0eS5nZW5lcmF0ZUFjY291bnRDYWNoZUtleSh7XHJcbiAgICAgICAgICAgICAgICBob21lQWNjb3VudElkOiBjYWNoZWRJZFRva2VuLmhvbWVBY2NvdW50SWQsXHJcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogY2FjaGVkSWRUb2tlbi5lbnZpcm9ubWVudCxcclxuICAgICAgICAgICAgICAgIHRlbmFudElkOiBjYWNoZWRJZFRva2VuLnJlYWxtLFxyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IG51bGxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYWNoZWRBY2NvdW50ID0gdGhpcy5jYWNoZU1hbmFnZXIuZ2V0QWNjb3VudChhY2NvdW50S2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCBSZXNwb25zZUhhbmRsZXIuZ2VuZXJhdGVBdXRoZW50aWNhdGlvblJlc3VsdChcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9VdGlscyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudDogY2FjaGVkQWNjb3VudCxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBjYWNoZWRBY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICAgIGlkVG9rZW46IGNhY2hlZElkVG9rZW4sXHJcbiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhcHBNZXRhZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgfSwgaWRUb2tlbk9iamVjdCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkQWNjZXNzVG9rZW5Gcm9tQ2FjaGUocmVxdWVzdDogT25CZWhhbGZPZlJlcXVlc3QpOiBBY2Nlc3NUb2tlbkVudGl0eSB7XHJcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW5GaWx0ZXI6IENyZWRlbnRpYWxGaWx0ZXIgPSB7XHJcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLmF1dGhvcml0eS5jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzLkhvc3ROYW1lQW5kUG9ydCxcclxuICAgICAgICAgICAgY3JlZGVudGlhbFR5cGU6IENyZWRlbnRpYWxUeXBlLkFDQ0VTU19UT0tFTixcclxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICByZWFsbTogdGhpcy5hdXRob3JpdHkudGVuYW50LFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuc2NvcGVTZXQucHJpbnRTY29wZXNMb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgb2JvQXNzZXJ0aW9uOiByZXF1ZXN0Lm9ib0Fzc2VydGlvblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxDYWNoZTogQ3JlZGVudGlhbENhY2hlID0gdGhpcy5jYWNoZU1hbmFnZXIuZ2V0Q3JlZGVudGlhbHNGaWx0ZXJlZEJ5KGFjY2Vzc1Rva2VuRmlsdGVyKTtcclxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbnMgPSBPYmplY3Qua2V5cyhjcmVkZW50aWFsQ2FjaGUuYWNjZXNzVG9rZW5zKS5tYXAoa2V5ID0+IGNyZWRlbnRpYWxDYWNoZS5hY2Nlc3NUb2tlbnNba2V5XSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG51bUFjY2Vzc1Rva2VucyA9IGFjY2Vzc1Rva2Vucy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKG51bUFjY2Vzc1Rva2VucyA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW1BY2Nlc3NUb2tlbnMgPiAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVNdWx0aXBsZU1hdGNoaW5nVG9rZW5zSW5DYWNoZUVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2Nlc3NUb2tlbnNbMF0gYXMgQWNjZXNzVG9rZW5FbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkSWRUb2tlbkZyb21DYWNoZShyZXF1ZXN0OiBPbkJlaGFsZk9mUmVxdWVzdCk6IElkVG9rZW5FbnRpdHkge1xyXG4gICAgICAgIGNvbnN0IGlkVG9rZW5GaWx0ZXI6IENyZWRlbnRpYWxGaWx0ZXIgPSB7XHJcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB0aGlzLmF1dGhvcml0eS5jYW5vbmljYWxBdXRob3JpdHlVcmxDb21wb25lbnRzLkhvc3ROYW1lQW5kUG9ydCxcclxuICAgICAgICAgICAgY3JlZGVudGlhbFR5cGU6IENyZWRlbnRpYWxUeXBlLklEX1RPS0VOLFxyXG4gICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHJlYWxtOiB0aGlzLmF1dGhvcml0eS50ZW5hbnQsXHJcbiAgICAgICAgICAgIG9ib0Fzc2VydGlvbjogcmVxdWVzdC5vYm9Bc3NlcnRpb25cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBjcmVkZW50aWFsQ2FjaGU6IENyZWRlbnRpYWxDYWNoZSA9IHRoaXMuY2FjaGVNYW5hZ2VyLmdldENyZWRlbnRpYWxzRmlsdGVyZWRCeShpZFRva2VuRmlsdGVyKTtcclxuICAgICAgICBjb25zdCBpZFRva2VucyA9IE9iamVjdC5rZXlzKGNyZWRlbnRpYWxDYWNoZS5pZFRva2VucykubWFwKGtleSA9PiBjcmVkZW50aWFsQ2FjaGUuaWRUb2tlbnNba2V5XSk7XHJcbiAgICAgICAgLy8gV2hlbiBhY3F1aXJpbmcgYSB0b2tlbiBvbiBiZWhhbGYgb2YgYW4gYXBwbGljYXRpb24sIHRoZXJlIG1pZ2h0IG5vdCBiZSBhbiBpZCB0b2tlbiBpbiB0aGUgY2FjaGVcclxuICAgICAgICBpZiAoaWRUb2tlbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlkVG9rZW5zWzBdIGFzIElkVG9rZW5FbnRpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBleGVjdXRlVG9rZW5SZXF1ZXN0KHJlcXVlc3Q6IE9uQmVoYWxmT2ZSZXF1ZXN0LCBhdXRob3JpdHk6IEF1dGhvcml0eSlcclxuICAgICAgICA6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSB0aGlzLmNyZWF0ZVRva2VuUmVxdWVzdEJvZHkocmVxdWVzdCk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHRoaXMuY3JlYXRlRGVmYXVsdFRva2VuUmVxdWVzdEhlYWRlcnMoKTtcclxuICAgICAgICBjb25zdCB0aHVtYnByaW50OiBSZXF1ZXN0VGh1bWJwcmludCA9IHtcclxuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICBhdXRob3JpdHk6IHJlcXVlc3QuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBzY29wZXM6IHJlcXVlc3Quc2NvcGVzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVQb3N0VG9Ub2tlbkVuZHBvaW50KGF1dGhvcml0eS50b2tlbkVuZHBvaW50LCByZXF1ZXN0Qm9keSwgaGVhZGVycywgdGh1bWJwcmludCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSGFuZGxlciA9IG5ldyBSZXNwb25zZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmF1dGhPcHRpb25zLmNsaWVudElkLFxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFuYWdlcixcclxuICAgICAgICAgICAgdGhpcy5jcnlwdG9VdGlscyxcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlcmlhbGl6YWJsZUNhY2hlLFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZVBsdWdpblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJlc3BvbnNlSGFuZGxlci52YWxpZGF0ZVRva2VuUmVzcG9uc2UocmVzcG9uc2UuYm9keSk7XHJcbiAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlSGFuZGxlci5oYW5kbGVTZXJ2ZXJUb2tlblJlc3BvbnNlKFxyXG4gICAgICAgICAgICByZXNwb25zZS5ib2R5LFxyXG4gICAgICAgICAgICB0aGlzLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RNZXRob2QsXHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVzb3VyY2VSZXF1ZXN0VXJpLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICByZXF1ZXN0LnNjb3BlcyxcclxuICAgICAgICAgICAgcmVxdWVzdC5vYm9Bc3NlcnRpb25cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gdG9rZW5SZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZVRva2VuUmVxdWVzdEJvZHkocmVxdWVzdDogT25CZWhhbGZPZlJlcXVlc3QpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlckJ1aWxkZXIgPSBuZXcgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIoKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRDbGllbnRJZCh0aGlzLmNvbmZpZy5hdXRoT3B0aW9ucy5jbGllbnRJZCk7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkU2NvcGVzKHJlcXVlc3Quc2NvcGVzKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRHcmFudFR5cGUoR3JhbnRUeXBlLkpXVF9CRUFSRVIpO1xyXG5cclxuICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEluZm8oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29ycmVsYXRpb25JZCA9IHJlcXVlc3QuY29ycmVsYXRpb25JZCB8fCB0aGlzLmNvbmZpZy5jcnlwdG9JbnRlcmZhY2UuY3JlYXRlTmV3R3VpZCgpO1xyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ29ycmVsYXRpb25JZChjb3JyZWxhdGlvbklkKTtcclxuXHJcbiAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRSZXF1ZXN0VG9rZW5Vc2UoQUFEU2VydmVyUGFyYW1LZXlzLk9OX0JFSEFMRl9PRik7XHJcblxyXG4gICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkT2JvQXNzZXJ0aW9uKHJlcXVlc3Qub2JvQXNzZXJ0aW9uKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudFNlY3JldCkge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudFNlY3JldCh0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRTZWNyZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNsaWVudENyZWRlbnRpYWxzLmNsaWVudEFzc2VydGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBjbGllbnRBc3NlcnRpb24gPSB0aGlzLmNvbmZpZy5jbGllbnRDcmVkZW50aWFscy5jbGllbnRBc3NlcnRpb247XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckJ1aWxkZXIuYWRkQ2xpZW50QXNzZXJ0aW9uKGNsaWVudEFzc2VydGlvbi5hc3NlcnRpb24pO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJCdWlsZGVyLmFkZENsaWVudEFzc2VydGlvblR5cGUoY2xpZW50QXNzZXJ0aW9uLmFzc2VydGlvblR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEJhc2VDbGllbnQgfSBmcm9tIFwiLi9CYXNlQ2xpZW50XCI7XHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlnL0NsaWVudENvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgU2lsZW50Rmxvd1JlcXVlc3QgfSBmcm9tIFwiLi4vcmVxdWVzdC9TaWxlbnRGbG93UmVxdWVzdFwiO1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblJlc3VsdCB9IGZyb20gXCIuLi9yZXNwb25zZS9BdXRoZW50aWNhdGlvblJlc3VsdFwiO1xyXG5pbXBvcnQgeyBBY2Nlc3NUb2tlbkVudGl0eSB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9BY2Nlc3NUb2tlbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBTY29wZVNldCB9IGZyb20gXCIuLi9yZXF1ZXN0L1Njb3BlU2V0XCI7XHJcbmltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi9hY2NvdW50L0F1dGhUb2tlblwiO1xyXG5pbXBvcnQgeyBUaW1lVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvVGltZVV0aWxzXCI7XHJcbmltcG9ydCB7IFJlZnJlc2hUb2tlbkNsaWVudCB9IGZyb20gXCIuL1JlZnJlc2hUb2tlbkNsaWVudFwiO1xyXG5pbXBvcnQgeyBDbGllbnRBdXRoRXJyb3IsIENsaWVudEF1dGhFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IENsaWVudENvbmZpZ3VyYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3JcIjtcclxuaW1wb3J0IHsgUmVzcG9uc2VIYW5kbGVyIH0gZnJvbSBcIi4uL3Jlc3BvbnNlL1Jlc3BvbnNlSGFuZGxlclwiO1xyXG5pbXBvcnQgeyBDYWNoZVJlY29yZCB9IGZyb20gXCIuLi9jYWNoZS9lbnRpdGllcy9DYWNoZVJlY29yZFwiO1xyXG5pbXBvcnQgeyBBdXRob3JpdHkgfSBmcm9tIFwiLi4vYXV0aG9yaXR5L0F1dGhvcml0eVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpbGVudEZsb3dDbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uOiBDbGllbnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgYSB0b2tlbiBmcm9tIGNhY2hlIGlmIGl0IGlzIHN0aWxsIHZhbGlkLCBvciB1c2VzIHRoZSBjYWNoZWQgcmVmcmVzaCB0b2tlbiB0byByZW5ld1xyXG4gICAgICogdGhlIGdpdmVuIHRva2VuIGFuZCByZXR1cm5zIHRoZSByZW5ld2VkIHRva2VuXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBhc3luYyBhY3F1aXJlVG9rZW4ocmVxdWVzdDogU2lsZW50Rmxvd1JlcXVlc3QpOiBQcm9taXNlPEF1dGhlbnRpY2F0aW9uUmVzdWx0PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYWNxdWlyZUNhY2hlZFRva2VuKHJlcXVlc3QpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBDbGllbnRBdXRoRXJyb3IgJiYgZS5lcnJvckNvZGUgPT09IENsaWVudEF1dGhFcnJvck1lc3NhZ2UudG9rZW5SZWZyZXNoUmVxdWlyZWQuY29kZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuQ2xpZW50ID0gbmV3IFJlZnJlc2hUb2tlbkNsaWVudCh0aGlzLmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVmcmVzaFRva2VuQ2xpZW50LmFjcXVpcmVUb2tlbkJ5UmVmcmVzaFRva2VuKHJlcXVlc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyB0b2tlbiBmcm9tIGNhY2hlIG9yIHRocm93cyBhbiBlcnJvciBpZiBpdCBtdXN0IGJlIHJlZnJlc2hlZC5cclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGFjcXVpcmVDYWNoZWRUb2tlbihyZXF1ZXN0OiBTaWxlbnRGbG93UmVxdWVzdCk6IFByb21pc2U8QXV0aGVudGljYXRpb25SZXN1bHQ+IHtcclxuICAgICAgICAvLyBDYW5ub3QgcmVuZXcgdG9rZW4gaWYgbm8gcmVxdWVzdCBvYmplY3QgaXMgZ2l2ZW4uXHJcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudENvbmZpZ3VyYXRpb25FcnJvci5jcmVhdGVFbXB0eVRva2VuUmVxdWVzdEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBjdXJyZW50bHkgZG8gbm90IHN1cHBvcnQgc2lsZW50IGZsb3cgZm9yIGFjY291bnQgPT09IG51bGwgdXNlIGNhc2VzOyBUaGlzIHdpbGwgYmUgcmV2aXNpdGVkIGZvciBjb25maWRlbnRpYWwgZmxvdyB1c2VjYXNlc1xyXG4gICAgICAgIGlmICghcmVxdWVzdC5hY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVOb0FjY291bnRJblNpbGVudFJlcXVlc3RFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFNjb3BlcyA9IG5ldyBTY29wZVNldChyZXF1ZXN0LnNjb3BlcyB8fCBbXSk7XHJcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnQgPSByZXF1ZXN0LmF1dGhvcml0eSB8fCBBdXRob3JpdHkuZ2VuZXJhdGVFbnZpcm9ubWVudEZyb21BdXRob3JpdHkodGhpcy5hdXRob3JpdHkpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlUmVjb3JkID0gdGhpcy5jYWNoZU1hbmFnZXIucmVhZENhY2hlUmVjb3JkKHJlcXVlc3QuYWNjb3VudCwgdGhpcy5jb25maWcuYXV0aE9wdGlvbnMuY2xpZW50SWQsIHJlcXVlc3RTY29wZXMsIGVudmlyb25tZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWZyZXNoUmVxdWlyZWQocmVxdWVzdCwgY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHRocm93IENsaWVudEF1dGhFcnJvci5jcmVhdGVSZWZyZXNoUmVxdWlyZWRFcnJvcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLmluY3JlbWVudENhY2hlSGl0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdlbmVyYXRlUmVzdWx0RnJvbUNhY2hlUmVjb3JkKGNhY2hlUmVjb3JkLCByZXF1ZXN0LnJlc291cmNlUmVxdWVzdE1ldGhvZCwgcmVxdWVzdC5yZXNvdXJjZVJlcXVlc3RVcmkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBidWlsZCByZXNwb25zZSBvYmplY3QgZnJvbSB0aGUgQ2FjaGVSZWNvcmRcclxuICAgICAqIEBwYXJhbSBjYWNoZVJlY29yZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUmVzdWx0RnJvbUNhY2hlUmVjb3JkKGNhY2hlUmVjb3JkOiBDYWNoZVJlY29yZCwgcmVzb3VyY2VSZXF1ZXN0TWV0aG9kPzogc3RyaW5nLCByZXNvdXJjZVJlcXVlc3RVcmk/OiBzdHJpbmcpOiBQcm9taXNlPEF1dGhlbnRpY2F0aW9uUmVzdWx0PiB7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlbk9iaiA9IG5ldyBBdXRoVG9rZW4oY2FjaGVSZWNvcmQuaWRUb2tlbi5zZWNyZXQsIHRoaXMuY29uZmlnLmNyeXB0b0ludGVyZmFjZSk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IFJlc3BvbnNlSGFuZGxlci5nZW5lcmF0ZUF1dGhlbnRpY2F0aW9uUmVzdWx0KFxyXG4gICAgICAgICAgICB0aGlzLmNyeXB0b1V0aWxzLFxyXG4gICAgICAgICAgICBjYWNoZVJlY29yZCxcclxuICAgICAgICAgICAgaWRUb2tlbk9iaiwgXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIHJlc291cmNlUmVxdWVzdE1ldGhvZCxcclxuICAgICAgICAgICAgcmVzb3VyY2VSZXF1ZXN0VXJpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgcmVxdWVzdCBvYmplY3QgYW5kIGFuIGFjY2Vzc1Rva2VuRW50aXR5IGRldGVybWluZSBpZiB0aGUgYWNjZXNzVG9rZW4gbmVlZHMgdG8gYmUgcmVmcmVzaGVkXHJcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIGNhY2hlZEFjY2Vzc1Rva2VuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNSZWZyZXNoUmVxdWlyZWQocmVxdWVzdDogU2lsZW50Rmxvd1JlcXVlc3QsIGNhY2hlZEFjY2Vzc1Rva2VuOiBBY2Nlc3NUb2tlbkVudGl0eXxudWxsKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHJlcXVlc3QuZm9yY2VSZWZyZXNoIHx8IHJlcXVlc3QuY2xhaW1zKSB7XHJcbiAgICAgICAgICAgIC8vIE11c3QgcmVmcmVzaCBkdWUgdG8gcmVxdWVzdCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWNhY2hlZEFjY2Vzc1Rva2VuIHx8IFRpbWVVdGlscy5pc1Rva2VuRXhwaXJlZChjYWNoZWRBY2Nlc3NUb2tlbi5leHBpcmVzT24sIHRoaXMuY29uZmlnLnN5c3RlbU9wdGlvbnMudG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kcykpIHtcclxuICAgICAgICAgICAgLy8gTXVzdCByZWZyZXNoIGR1ZSB0byBleHBpcmVkIG9yIG5vbi1leGlzdGVudCBhY2Nlc3NfdG9rZW5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBdXRob3JpdHkgfSBmcm9tIFwiLi9BdXRob3JpdHlcIjtcclxuaW1wb3J0IHsgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvclwiO1xyXG5pbXBvcnQgeyBJTmV0d29ya01vZHVsZSB9IGZyb20gXCIuLi9uZXR3b3JrL0lOZXR3b3JrTW9kdWxlXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxzXCI7XHJcbmltcG9ydCB7IENsaWVudEF1dGhFcnJvciB9IGZyb20gXCIuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JcIjtcclxuaW1wb3J0IHsgUHJvdG9jb2xNb2RlIH0gZnJvbSBcIi4vUHJvdG9jb2xNb2RlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXV0aG9yaXR5RmFjdG9yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYW4gYXV0aG9yaXR5IG9iamVjdCBvZiB0aGUgY29ycmVjdCB0eXBlIGJhc2VkIG9uIHRoZSB1cmxcclxuICAgICAqIFBlcmZvcm1zIGJhc2ljIGF1dGhvcml0eSB2YWxpZGF0aW9uIC0gY2hlY2tzIHRvIHNlZSBpZiB0aGUgYXV0aG9yaXR5IGlzIG9mIGEgdmFsaWQgdHlwZSAoaS5lLiBhYWQsIGIyYywgYWRmcylcclxuICAgICAqIFxyXG4gICAgICogQWxzbyBwZXJmb3JtcyBlbmRwb2ludCBkaXNjb3ZlcnkuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBhdXRob3JpdHlVcmlcclxuICAgICAqIEBwYXJhbSBuZXR3b3JrQ2xpZW50XHJcbiAgICAgKiBAcGFyYW0gcHJvdG9jb2xNb2RlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UoYXV0aG9yaXR5VXJpOiBzdHJpbmcsIG5ldHdvcmtDbGllbnQ6IElOZXR3b3JrTW9kdWxlLCBwcm90b2NvbE1vZGU6IFByb3RvY29sTW9kZSk6IFByb21pc2U8QXV0aG9yaXR5PiB7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhdXRob3JpdHkgYW5kIHBlcmZvcm0gZGlzY292ZXJ5IGVuZHBvaW50IGNoZWNrLlxyXG4gICAgICAgIGNvbnN0IGFjcXVpcmVUb2tlbkF1dGhvcml0eTogQXV0aG9yaXR5ID0gQXV0aG9yaXR5RmFjdG9yeS5jcmVhdGVJbnN0YW5jZShhdXRob3JpdHlVcmksIG5ldHdvcmtDbGllbnQsIHByb3RvY29sTW9kZSk7XHJcblxyXG4gICAgICAgIGlmIChhY3F1aXJlVG9rZW5BdXRob3JpdHkuZGlzY292ZXJ5Q29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWNxdWlyZVRva2VuQXV0aG9yaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgYWNxdWlyZVRva2VuQXV0aG9yaXR5LnJlc29sdmVFbmRwb2ludHNBc3luYygpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNxdWlyZVRva2VuQXV0aG9yaXR5O1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50QXV0aEVycm9yLmNyZWF0ZUVuZHBvaW50RGlzY292ZXJ5SW5jb21wbGV0ZUVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhbiBhdXRob3JpdHkgb2JqZWN0IG9mIHRoZSBjb3JyZWN0IHR5cGUgYmFzZWQgb24gdGhlIHVybFxyXG4gICAgICogUGVyZm9ybXMgYmFzaWMgYXV0aG9yaXR5IHZhbGlkYXRpb24gLSBjaGVja3MgdG8gc2VlIGlmIHRoZSBhdXRob3JpdHkgaXMgb2YgYSB2YWxpZCB0eXBlIChpLmUuIGFhZCwgYjJjLCBhZGZzKVxyXG4gICAgICogXHJcbiAgICAgKiBEb2VzIG5vdCBwZXJmb3JtIGVuZHBvaW50IGRpc2NvdmVyeS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGF1dGhvcml0eVVybCBcclxuICAgICAqIEBwYXJhbSBuZXR3b3JrSW50ZXJmYWNlIFxyXG4gICAgICogQHBhcmFtIHByb3RvY29sTW9kZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlSW5zdGFuY2UoYXV0aG9yaXR5VXJsOiBzdHJpbmcsIG5ldHdvcmtJbnRlcmZhY2U6IElOZXR3b3JrTW9kdWxlLCBwcm90b2NvbE1vZGU6IFByb3RvY29sTW9kZSk6IEF1dGhvcml0eSB7XHJcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgYXV0aG9yaXR5IHVybCBpcyBlbXB0eVxyXG4gICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0VtcHR5KGF1dGhvcml0eVVybCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLmNyZWF0ZVVybEVtcHR5RXJyb3IoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgQXV0aG9yaXR5KGF1dGhvcml0eVVybCwgbmV0d29ya0ludGVyZmFjZSwgcHJvdG9jb2xNb2RlKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNFUlZFUl9URUxFTV9DT05TVEFOVFMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ29uc3RhbnRzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VydmVyVGVsZW1ldHJ5RW50aXR5IHtcclxuICAgIGZhaWxlZFJlcXVlc3RzOiBBcnJheTxzdHJpbmd8bnVtYmVyPjtcclxuICAgIGVycm9yczogc3RyaW5nW107XHJcbiAgICBjYWNoZUhpdHM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmZhaWxlZFJlcXVlc3RzID0gW107XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhY2hlSGl0cyA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB2YWxpZGF0ZXMgaWYgYSBnaXZlbiBjYWNoZSBlbnRyeSBpcyBcIlRlbGVtZXRyeVwiLCBwYXJzZXMgPGtleSx2YWx1ZT5cclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSBlbnRpdHlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzU2VydmVyVGVsZW1ldHJ5RW50aXR5KGtleTogc3RyaW5nLCBlbnRpdHk/OiBvYmplY3QpOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGVLZXk6IGJvb2xlYW4gPSBrZXkuaW5kZXhPZihTRVJWRVJfVEVMRU1fQ09OU1RBTlRTLkNBQ0hFX0tFWSkgPT09IDA7XHJcbiAgICAgICAgbGV0IHZhbGlkYXRlRW50aXR5OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKGVudGl0eSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUVudGl0eSA9XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJmYWlsZWRSZXF1ZXN0c1wiKSAmJlxyXG4gICAgICAgICAgICAgICAgZW50aXR5Lmhhc093blByb3BlcnR5KFwiZXJyb3JzXCIpICYmXHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJlcnJvckNvdW50XCIpICYmXHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuaGFzT3duUHJvcGVydHkoXCJjYWNoZUhpdHNcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsaWRhdGVLZXkgJiYgdmFsaWRhdGVFbnRpdHk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBUaHJvdHRsaW5nQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0NvbnN0YW50c1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRocm90dGxpbmdFbnRpdHkge1xyXG4gICAgLy8gVW5peC10aW1lIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgZXhwaXJhdGlvbiBvZiB0aGUgdGhyb3R0bGVcclxuICAgIHRocm90dGxlVGltZTogbnVtYmVyO1xyXG4gICAgLy8gSW5mb3JtYXRpb24gcHJvdmlkZWQgYnkgdGhlIHNlcnZlclxyXG4gICAgZXJyb3I/OiBzdHJpbmc7XHJcbiAgICBlcnJvckNvZGVzPzogQXJyYXk8c3RyaW5nPjtcclxuICAgIGVycm9yTWVzc2FnZT86IHN0cmluZztcclxuICAgIHN1YkVycm9yPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogdmFsaWRhdGVzIGlmIGEgZ2l2ZW4gY2FjaGUgZW50cnkgaXMgXCJUaHJvdHRsaW5nXCIsIHBhcnNlcyA8a2V5LHZhbHVlPlxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHBhcmFtIGVudGl0eVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNUaHJvdHRsaW5nRW50aXR5KGtleTogc3RyaW5nLCBlbnRpdHk/OiBvYmplY3QpOiBib29sZWFuIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdmFsaWRhdGVLZXk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlS2V5ID0ga2V5LmluZGV4T2YoVGhyb3R0bGluZ0NvbnN0YW50cy5USFJPVFRMSU5HX1BSRUZJWCkgPT09IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB2YWxpZGF0ZUVudGl0eTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVudGl0eSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUVudGl0eSA9IGVudGl0eS5oYXNPd25Qcm9wZXJ0eShcInRocm90dGxlVGltZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWxpZGF0ZUtleSAmJiB2YWxpZGF0ZUVudGl0eTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFNFUlZFUl9URUxFTV9DT05TVEFOVFMsIENhY2hlU2NoZW1hVHlwZSwgU2VwYXJhdG9ycyB9IGZyb20gXCIuLi8uLi91dGlscy9Db25zdGFudHNcIjtcclxuaW1wb3J0IHsgQ2FjaGVNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2NhY2hlL0NhY2hlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvQXV0aEVycm9yXCI7XHJcbmltcG9ydCB7IFNlcnZlclRlbGVtZXRyeVJlcXVlc3QgfSBmcm9tIFwiLi9TZXJ2ZXJUZWxlbWV0cnlSZXF1ZXN0XCI7XHJcbmltcG9ydCB7IFNlcnZlclRlbGVtZXRyeUVudGl0eSB9IGZyb20gXCIuLi8uLi9jYWNoZS9lbnRpdGllcy9TZXJ2ZXJUZWxlbWV0cnlFbnRpdHlcIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvU3RyaW5nVXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIHtcclxuICAgIHByaXZhdGUgY2FjaGVNYW5hZ2VyOiBDYWNoZU1hbmFnZXI7XHJcbiAgICBwcml2YXRlIGFwaUlkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGNvcnJlbGF0aW9uSWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgZm9yY2VSZWZyZXNoOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSB0ZWxlbWV0cnlDYWNoZUtleTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRlbGVtZXRyeVJlcXVlc3Q6IFNlcnZlclRlbGVtZXRyeVJlcXVlc3QsIGNhY2hlTWFuYWdlcjogQ2FjaGVNYW5hZ2VyKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIgPSBjYWNoZU1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5hcGlJZCA9IHRlbGVtZXRyeVJlcXVlc3QuYXBpSWQ7XHJcbiAgICAgICAgdGhpcy5jb3JyZWxhdGlvbklkID0gdGVsZW1ldHJ5UmVxdWVzdC5jb3JyZWxhdGlvbklkO1xyXG4gICAgICAgIHRoaXMuZm9yY2VSZWZyZXNoID0gdGVsZW1ldHJ5UmVxdWVzdC5mb3JjZVJlZnJlc2ggfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMudGVsZW1ldHJ5Q2FjaGVLZXkgPSBTRVJWRVJfVEVMRU1fQ09OU1RBTlRTLkNBQ0hFX0tFWSArIFNlcGFyYXRvcnMuQ0FDSEVfS0VZX1NFUEFSQVRPUiArIHRlbGVtZXRyeVJlcXVlc3QuY2xpZW50SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBUEkgdG8gYWRkIE1TRVIgVGVsZW1ldHJ5IHRvIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVDdXJyZW50UmVxdWVzdEhlYWRlclZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgZm9yY2VSZWZyZXNoSW50ID0gdGhpcy5mb3JjZVJlZnJlc2ggPyAxIDogMDtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYCR7dGhpcy5hcGlJZH0ke1NFUlZFUl9URUxFTV9DT05TVEFOVFMuVkFMVUVfU0VQQVJBVE9SfSR7Zm9yY2VSZWZyZXNoSW50fWA7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1GaWVsZHMgPSBcIlwiOyAvLyBUT0RPOiBEZXRlcm1pbmUgd2hhdCB3ZSB3YW50IHRvIGluY2x1ZGVcclxuXHJcbiAgICAgICAgcmV0dXJuIFtTRVJWRVJfVEVMRU1fQ09OU1RBTlRTLlNDSEVNQV9WRVJTSU9OLCByZXF1ZXN0LCBwbGF0Zm9ybUZpZWxkc10uam9pbihTRVJWRVJfVEVMRU1fQ09OU1RBTlRTLkNBVEVHT1JZX1NFUEFSQVRPUik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBUEkgdG8gYWRkIE1TRVIgVGVsZW1ldHJ5IGZvciB0aGUgbGFzdCBmYWlsZWQgcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUxhc3RSZXF1ZXN0SGVhZGVyVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBsYXN0UmVxdWVzdHMgPSB0aGlzLmdldExhc3RSZXF1ZXN0cygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG1heEVycm9ycyA9IFNlcnZlclRlbGVtZXRyeU1hbmFnZXIubWF4RXJyb3JzVG9TZW5kKGxhc3RSZXF1ZXN0cyk7XHJcbiAgICAgICAgY29uc3QgZmFpbGVkUmVxdWVzdHMgPSBsYXN0UmVxdWVzdHMuZmFpbGVkUmVxdWVzdHMuc2xpY2UoMCwgMiptYXhFcnJvcnMpLmpvaW4oU0VSVkVSX1RFTEVNX0NPTlNUQU5UUy5WQUxVRV9TRVBBUkFUT1IpO1xyXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IGxhc3RSZXF1ZXN0cy5lcnJvcnMuc2xpY2UoMCwgbWF4RXJyb3JzKS5qb2luKFNFUlZFUl9URUxFTV9DT05TVEFOVFMuVkFMVUVfU0VQQVJBVE9SKTtcclxuICAgICAgICBjb25zdCBlcnJvckNvdW50ID0gbGFzdFJlcXVlc3RzLmVycm9ycy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIEluZGljYXRlIHdoZXRoZXIgdGhpcyBoZWFkZXIgY29udGFpbnMgYWxsIGRhdGEgb3IgcGFydGlhbCBkYXRhXHJcbiAgICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBtYXhFcnJvcnMgPCBlcnJvckNvdW50ID8gU0VSVkVSX1RFTEVNX0NPTlNUQU5UUy5PVkVSRkxPV19UUlVFIDogU0VSVkVSX1RFTEVNX0NPTlNUQU5UUy5PVkVSRkxPV19GQUxTRTtcclxuICAgICAgICBjb25zdCBwbGF0Zm9ybUZpZWxkcyA9IFtlcnJvckNvdW50LCBvdmVyZmxvd10uam9pbihTRVJWRVJfVEVMRU1fQ09OU1RBTlRTLlZBTFVFX1NFUEFSQVRPUik7XHJcblxyXG4gICAgICAgIHJldHVybiBbU0VSVkVSX1RFTEVNX0NPTlNUQU5UUy5TQ0hFTUFfVkVSU0lPTiwgbGFzdFJlcXVlc3RzLmNhY2hlSGl0cywgZmFpbGVkUmVxdWVzdHMsIGVycm9ycywgcGxhdGZvcm1GaWVsZHNdLmpvaW4oU0VSVkVSX1RFTEVNX0NPTlNUQU5UUy5DQVRFR09SWV9TRVBBUkFUT1IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQVBJIHRvIGNhY2hlIHRva2VuIGZhaWx1cmVzIGZvciBNU0VSIGRhdGEgY2FwdHVyZVxyXG4gICAgICogQHBhcmFtIGVycm9yIFxyXG4gICAgICovXHJcbiAgICBjYWNoZUZhaWxlZFJlcXVlc3QoZXJyb3I6IEF1dGhFcnJvcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGxhc3RSZXF1ZXN0cyA9IHRoaXMuZ2V0TGFzdFJlcXVlc3RzKCk7XHJcbiAgICAgICAgbGFzdFJlcXVlc3RzLmZhaWxlZFJlcXVlc3RzLnB1c2godGhpcy5hcGlJZCwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBsYXN0UmVxdWVzdHMuZXJyb3JzLnB1c2goU3RyaW5nVXRpbHMuaXNFbXB0eShlcnJvci5zdWJlcnJvcik/IGVycm9yLmVycm9yQ29kZTogZXJyb3Iuc3ViZXJyb3IpO1xyXG5cclxuICAgICAgICB0aGlzLmNhY2hlTWFuYWdlci5zZXRJdGVtKHRoaXMudGVsZW1ldHJ5Q2FjaGVLZXksIGxhc3RSZXF1ZXN0cywgQ2FjaGVTY2hlbWFUeXBlLlRFTEVNRVRSWSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBzZXJ2ZXIgdGVsZW1ldHJ5IGNhY2hlIGVudHJ5IGJ5IGluY3JlbWVudGluZyBjYWNoZSBoaXQgY291bnRlclxyXG4gICAgICovXHJcbiAgICBpbmNyZW1lbnRDYWNoZUhpdHMoKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBsYXN0UmVxdWVzdHMgPSB0aGlzLmdldExhc3RSZXF1ZXN0cygpO1xyXG4gICAgICAgIGxhc3RSZXF1ZXN0cy5jYWNoZUhpdHMgKz0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIuc2V0SXRlbSh0aGlzLnRlbGVtZXRyeUNhY2hlS2V5LCBsYXN0UmVxdWVzdHMsIENhY2hlU2NoZW1hVHlwZS5URUxFTUVUUlkpO1xyXG4gICAgICAgIHJldHVybiBsYXN0UmVxdWVzdHMuY2FjaGVIaXRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBzZXJ2ZXIgdGVsZW1ldHJ5IGVudGl0eSBmcm9tIGNhY2hlIG9yIGluaXRpYWxpemUgYSBuZXcgb25lXHJcbiAgICAgKi9cclxuICAgIGdldExhc3RSZXF1ZXN0cygpOiBTZXJ2ZXJUZWxlbWV0cnlFbnRpdHkgeyBcclxuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWU6IFNlcnZlclRlbGVtZXRyeUVudGl0eSA9IG5ldyBTZXJ2ZXJUZWxlbWV0cnlFbnRpdHkoKTtcclxuICAgICAgICBjb25zdCBsYXN0UmVxdWVzdHMgPSB0aGlzLmNhY2hlTWFuYWdlci5nZXRJdGVtKHRoaXMudGVsZW1ldHJ5Q2FjaGVLZXksIENhY2hlU2NoZW1hVHlwZS5URUxFTUVUUlkpIGFzIFNlcnZlclRlbGVtZXRyeUVudGl0eTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbGFzdFJlcXVlc3RzIHx8IGluaXRpYWxWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBzZXJ2ZXIgdGVsZW1ldHJ5IGNhY2hlIGVudHJ5XHJcbiAgICAgKi9cclxuICAgIGNsZWFyVGVsZW1ldHJ5Q2FjaGUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgbGFzdFJlcXVlc3RzID0gdGhpcy5nZXRMYXN0UmVxdWVzdHMoKTtcclxuICAgICAgICBjb25zdCBudW1FcnJvcnNGbHVzaGVkID0gU2VydmVyVGVsZW1ldHJ5TWFuYWdlci5tYXhFcnJvcnNUb1NlbmQobGFzdFJlcXVlc3RzKTtcclxuICAgICAgICBjb25zdCBlcnJvckNvdW50ID0gbGFzdFJlcXVlc3RzLmVycm9ycy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKG51bUVycm9yc0ZsdXNoZWQgPT09IGVycm9yQ291bnQpIHtcclxuICAgICAgICAgICAgLy8gQWxsIGVycm9ycyB3ZXJlIHNlbnQgb24gbGFzdCByZXF1ZXN0LCBjbGVhciBUZWxlbWV0cnkgY2FjaGVcclxuICAgICAgICAgICAgdGhpcy5jYWNoZU1hbmFnZXIucmVtb3ZlSXRlbSh0aGlzLnRlbGVtZXRyeUNhY2hlS2V5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBQYXJ0aWFsIGRhdGEgd2FzIGZsdXNoZWQgdG8gc2VydmVyLCBjb25zdHJ1Y3QgYSBuZXcgdGVsZW1ldHJ5IGNhY2hlIGl0ZW0gd2l0aCBlcnJvcnMgdGhhdCB3ZXJlIG5vdCBmbHVzaGVkXHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlclRlbGVtRW50aXR5ID0gbmV3IFNlcnZlclRlbGVtZXRyeUVudGl0eSgpO1xyXG4gICAgICAgICAgICBzZXJ2ZXJUZWxlbUVudGl0eS5mYWlsZWRSZXF1ZXN0cyA9IGxhc3RSZXF1ZXN0cy5mYWlsZWRSZXF1ZXN0cy5zbGljZShudW1FcnJvcnNGbHVzaGVkKjIpOyAvLyBmYWlsZWRSZXF1ZXN0cyBjb250YWlucyAyIGl0ZW1zIGZvciBlYWNoIGVycm9yXHJcbiAgICAgICAgICAgIHNlcnZlclRlbGVtRW50aXR5LmVycm9ycyA9IGxhc3RSZXF1ZXN0cy5lcnJvcnMuc2xpY2UobnVtRXJyb3JzRmx1c2hlZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFuYWdlci5zZXRJdGVtKHRoaXMudGVsZW1ldHJ5Q2FjaGVLZXksIHNlcnZlclRlbGVtRW50aXR5LCBDYWNoZVNjaGVtYVR5cGUuVEVMRU1FVFJZKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG51bWJlciBvZiBlcnJvcnMgdGhhdCBjYW4gYmUgZmx1c2hlZCB0byB0aGUgc2VydmVyIGluIHRoZSBuZXh0IG5ldHdvcmsgcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHNlcnZlclRlbGVtZXRyeUVudGl0eSBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG1heEVycm9yc1RvU2VuZChzZXJ2ZXJUZWxlbWV0cnlFbnRpdHk6IFNlcnZlclRlbGVtZXRyeUVudGl0eSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgbGV0IG1heEVycm9ycyA9IDA7XHJcbiAgICAgICAgbGV0IGRhdGFTaXplID0gMDtcclxuICAgICAgICBjb25zdCBlcnJvckNvdW50ID0gc2VydmVyVGVsZW1ldHJ5RW50aXR5LmVycm9ycy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVycm9yQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBmYWlsZWRSZXF1ZXN0cyBwYXJhbWV0ZXIgY29udGFpbnMgcGFpcnMgb2YgYXBpSWQgYW5kIGNvcnJlbGF0aW9uSWQsIG11bHRpcGx5IGluZGV4IGJ5IDIgdG8gcHJlc2VydmUgcGFpcnNcclxuICAgICAgICAgICAgY29uc3QgYXBpSWQgPSBzZXJ2ZXJUZWxlbWV0cnlFbnRpdHkuZmFpbGVkUmVxdWVzdHNbMippXTtcclxuICAgICAgICAgICAgY29uc3QgY29ycmVsYXRpb25JZCA9IHNlcnZlclRlbGVtZXRyeUVudGl0eS5mYWlsZWRSZXF1ZXN0c1syKmkgKyAxXTtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gc2VydmVyVGVsZW1ldHJ5RW50aXR5LmVycm9yc1tpXTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvdW50IG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd291bGQgYmUgYWRkZWQgdG8gaGVhZGVyLCBlYWNoIGNoYXJhY3RlciBpcyAxIGJ5dGUuIEFkZCAzIGF0IHRoZSBlbmQgdG8gYWNjb3VudCBmb3Igc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICBkYXRhU2l6ZSArPSBhcGlJZC50b1N0cmluZygpLmxlbmd0aCArIGNvcnJlbGF0aW9uSWQudG9TdHJpbmcoKS5sZW5ndGggKyBlcnJvckNvZGUubGVuZ3RoICsgMztcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhU2l6ZSA8IFNFUlZFUl9URUxFTV9DT05TVEFOVFMuTUFYX0hFQURFUl9CWVRFUykge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkaW5nIHRoaXMgZW50cnkgdG8gdGhlIGhlYWRlciB3b3VsZCBzdGlsbCBrZWVwIGhlYWRlciBzaXplIGJlbG93IHRoZSBsaW1pdFxyXG4gICAgICAgICAgICAgICAgbWF4RXJyb3JzICs9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1heEVycm9ycztcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJQZXJzaXN0ZW50Q2FjaGVLZXlzIiwiUmVzcG9uc2VNb2RlIiwiQ3JlZGVudGlhbFR5cGUiLCJDYWNoZVNjaGVtYVR5cGUiLCJDYWNoZVR5cGUiLCJBdXRoZW50aWNhdGlvblNjaGVtZSIsIkF1dGhvcml0eVR5cGUiLCJQcm90b2NvbE1vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUtBOzs7SUFHYSxnQkFBZ0IsR0FBRztJQUM1QixlQUFlLEVBQUU7UUFDYixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLElBQUksRUFBRSxxQ0FBcUM7S0FDOUM7RUFDSDtBQUVGOzs7O0lBRytCLDZCQUFLO0lBUWhDLG1CQUFZLFNBQWlCLEVBQUUsWUFBcUIsRUFBRSxRQUFpQjtRQUF2RSxpQkFTQztRQVJHLElBQU0sV0FBVyxHQUFHLFlBQVksR0FBTSxTQUFTLFVBQUssWUFBYyxHQUFHLFNBQVMsQ0FBQztRQUMvRSxRQUFBLGtCQUFNLFdBQVcsQ0FBQyxTQUFDO1FBQ25CLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVqRCxLQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixLQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxLQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixLQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQzs7S0FDM0I7Ozs7O0lBTU0sK0JBQXFCLEdBQTVCLFVBQTZCLE9BQWU7UUFDeEMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFLLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQUssT0FBUyxDQUFDLENBQUM7S0FDdkg7SUFDTCxnQkFBQztBQUFELENBMUJBLENBQStCLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQnBDOzs7O0FBUUE7OztBQUdBLElBQWEsc0JBQXNCLEdBQUc7SUFDbEMsdUJBQXVCLEVBQUU7UUFDckIsSUFBSSxFQUFFLDRCQUE0QjtRQUNsQyxJQUFJLEVBQUUsNkdBQTZHO0tBQ3RIO0lBQ0Qsb0JBQW9CLEVBQUU7UUFDbEIsSUFBSSxFQUFFLHlCQUF5QjtRQUMvQixJQUFJLEVBQUUsaUZBQWlGO0tBQzFGO0lBQ0QsaUJBQWlCLEVBQUU7UUFDZixJQUFJLEVBQUUscUJBQXFCO1FBQzNCLElBQUksRUFBRSw0RUFBNEU7S0FDckY7SUFDRCxnQkFBZ0IsRUFBRTtRQUNkLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsSUFBSSxFQUFFLGtGQUFrRjtLQUMzRjtJQUNELHVCQUF1QixFQUFFO1FBQ3JCLElBQUksRUFBRSw0QkFBNEI7UUFDbEMsSUFBSSxFQUFFLHlFQUF5RTtLQUNsRjtJQUNELG1CQUFtQixFQUFFO1FBQ2pCLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsSUFBSSxFQUFFLHFHQUFxRztLQUM5RztJQUNELGtCQUFrQixFQUFFO1FBQ2hCLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsSUFBSSxFQUFFLG9GQUFvRjtLQUM3RjtJQUNELGlCQUFpQixFQUFFO1FBQ2YsSUFBSSxFQUFFLGVBQWU7UUFDckIsSUFBSSxFQUFFLDJJQUEySTtLQUNwSjtJQUNELGtCQUFrQixFQUFFO1FBQ2hCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsSUFBSSxFQUFFLCtGQUErRjtLQUN4RztJQUNELGtCQUFrQixFQUFFO1FBQ2hCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsSUFBSSxFQUFFLHNGQUFzRjtLQUMvRjtJQUNELGtCQUFrQixFQUFFO1FBQ2hCLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsSUFBSSxFQUFFLGtMQUFrTDtLQUMzTDtJQUNELHNCQUFzQixFQUFFO1FBQ3BCLElBQUksRUFBRSwwQkFBMEI7UUFDaEMsSUFBSSxFQUFFLGtFQUFrRTtZQUNwRSxtRkFBbUY7S0FDMUY7SUFDRCx3QkFBd0IsRUFBRTtRQUN0QixJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLElBQUksRUFBRSwySEFBMkg7S0FDcEk7SUFDRCx3QkFBd0IsRUFBRTtRQUN0QixJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLElBQUksRUFBRSwyRUFBMkU7S0FDcEY7SUFDRCxxQkFBcUIsRUFBRTtRQUNuQixJQUFJLEVBQUUsMkJBQTJCO1FBQ2pDLElBQUksRUFBRSw0RkFBNEY7S0FDckc7SUFDRCxxQkFBcUIsRUFBRTtRQUNuQixJQUFJLEVBQUUsMkJBQTJCO1FBQ2pDLElBQUksRUFBRSw4RkFBOEY7S0FDdkc7SUFDRCxtQkFBbUIsRUFBRTtRQUNqQixJQUFJLEVBQUUsd0JBQXdCO1FBQzlCLElBQUksRUFBRSxzQ0FBc0M7S0FDL0M7SUFDRCx1QkFBdUIsRUFBRTtRQUNyQixJQUFJLEVBQUUsc0JBQXNCO1FBQzVCLElBQUksRUFBRSwyQ0FBMkM7S0FDcEQ7SUFDRCwwQkFBMEIsRUFBRTtRQUN4QixJQUFJLEVBQUUsK0JBQStCO1FBQ3JDLElBQUksRUFBRSxpSEFBaUg7S0FDMUg7SUFDRCxpQkFBaUIsRUFBRTtRQUNmLElBQUksRUFBRSxxQkFBcUI7UUFDM0IsSUFBSSxFQUFFLHlCQUF5QjtLQUNsQztJQUNELHdCQUF3QixFQUFFO1FBQ3RCLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsSUFBSSxFQUFFLHlGQUF5RjtLQUNsRztJQUNELGtCQUFrQixFQUFFO1FBQ2hCLElBQUksRUFBRSxzQkFBc0I7UUFDNUIsSUFBSSxFQUFFLDRDQUE0QztLQUNyRDtJQUNELHVCQUF1QixFQUFFO1FBQ3JCLElBQUksRUFBRSwyQkFBMkI7UUFDakMsSUFBSSxFQUFFLDJEQUEyRDtLQUNwRTtJQUNELGNBQWMsRUFBRTtRQUNaLElBQUksRUFBRSxrQkFBa0I7UUFDeEIsSUFBSSxFQUFFLDBDQUEwQztLQUNuRDtJQUNELGdCQUFnQixFQUFFO1FBQ2QsSUFBSSxFQUFFLHFDQUFxQztRQUMzQyxJQUFJLEVBQUUsK0VBQStFO0tBQ3hGO0lBQ0QsV0FBVyxFQUFFO1FBQ1QsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixJQUFJLEVBQUUsMkVBQTJFO0tBQ3BGO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDZCxJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLElBQUksRUFBRSxvQkFBb0I7S0FDN0I7SUFDRCxxQkFBcUIsRUFBRTtRQUNuQixJQUFJLEVBQUUseUJBQXlCO1FBQy9CLElBQUksRUFBRSwwQkFBMEI7S0FDbkM7SUFDRCx3QkFBd0IsRUFBRTtRQUN0QixJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLElBQUksRUFBRSw2QkFBNkI7S0FDdEM7SUFDRCxnQkFBZ0IsRUFBRTtRQUNkLElBQUksRUFBRSxtQkFBbUI7UUFDekIsSUFBSSxFQUFFLDBGQUEwRjtLQUNuRztJQUNELHVCQUF1QixFQUFFO1FBQ3JCLElBQUksRUFBRSwyQkFBMkI7UUFDakMsSUFBSSxFQUFFLGdLQUFnSztLQUN6SztJQUNELG9CQUFvQixFQUFFO1FBQ2xCLElBQUksRUFBRSx3QkFBd0I7UUFDOUIsSUFBSSxFQUFFLG9PQUFvTztLQUM3TztDQUNKLENBQUM7QUFFRjs7O0FBR0E7SUFBcUMsbUNBQVM7SUFFMUMseUJBQVksU0FBaUIsRUFBRSxZQUFxQjtRQUFwRCxZQUNJLGtCQUFNLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FJakM7UUFIRyxLQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRTlCLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSSxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7S0FDMUQ7Ozs7O0lBTU0sNkNBQTZCLEdBQXBDLFVBQXFDLFdBQW1CO1FBQ3BELE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUN2RSxzQkFBc0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLDRCQUF1QixXQUFhLENBQUMsQ0FBQztLQUNuRzs7Ozs7SUFNTSwwQ0FBMEIsR0FBakMsVUFBa0MsYUFBcUI7UUFDbkQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQ3BFLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDLElBQUksdUJBQWtCLGFBQWUsQ0FBQyxDQUFDO0tBQzdGOzs7OztJQU1NLHVDQUF1QixHQUE5QixVQUErQixxQkFBNkI7UUFDeEQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQ2pFLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLElBQUksNEJBQXVCLHFCQUF1QixDQUFDLENBQUM7S0FDdkc7Ozs7O0lBTU0sMkNBQTJCLEdBQWxDLFVBQW1DLHFCQUE2QjtRQUM1RCxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFDaEUsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSwwQkFBcUIscUJBQXVCLENBQUMsQ0FBQztLQUNwRzs7OztJQUtNLHNEQUFzQyxHQUE3QyxVQUE4QyxTQUFpQjtRQUMzRCxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFDdkUsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxpQkFBWSxTQUFXLENBQUMsQ0FBQztLQUN0Rjs7Ozs7SUFNTSw4Q0FBOEIsR0FBckMsVUFBc0MsWUFBb0I7UUFDdEQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQ25FLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLElBQUksdUJBQWtCLFlBQWMsQ0FBQyxDQUFDO0tBQzNGOzs7OztJQU1NLHVDQUF1QixHQUE5QixVQUErQixZQUFvQixFQUFFLFdBQW9CO1FBQ3JFLE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUNqRSxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLHdCQUFtQixZQUFZLG9CQUFlLFdBQWEsQ0FBQyxDQUFDO0tBQ3BIOzs7O0lBS00sd0NBQXdCLEdBQS9CO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQ3JFLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZEOzs7O0lBS00sd0NBQXdCLEdBQS9CO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQ3JFLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZEOzs7O0lBS00sd0NBQXdCLEdBQS9CO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUg7Ozs7O0lBTU0sd0RBQXdDLEdBQS9DO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQ3RFLHNCQUFzQixDQUFDLHNCQUFzQixDQUFDLElBQUksTUFBRyxDQUFDLENBQUM7S0FDakU7Ozs7O0lBTU0sMERBQTBDLEdBQWpEO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQzNFLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdEOzs7O0lBS00sbURBQW1DLEdBQTFDO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUk7Ozs7O0lBTU0sZ0RBQWdDLEdBQXZDLFVBQXdDLFVBQWtCO1FBQ3RELE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFLLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLElBQUksc0JBQWlCLFVBQVksQ0FBQyxDQUFDO0tBQ3BLOzs7OztJQU1NLGtEQUFrQyxHQUF6QyxVQUEwQyxVQUFrQjtRQUN4RCxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBSyxzQkFBc0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLHNCQUFpQixVQUFZLENBQUMsQ0FBQztLQUNwSzs7Ozs7SUFNTSx5Q0FBeUIsR0FBaEMsVUFBaUMsV0FBbUI7UUFDaEQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUssc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsSUFBSSx1QkFBa0IsV0FBYSxDQUFDLENBQUM7S0FDbEs7Ozs7O0lBTU0sNkNBQTZCLEdBQXBDLFVBQXFDLGFBQXVCO1FBQ3hELE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFLLHNCQUFzQixDQUFDLHVCQUF1QixDQUFDLElBQUkseUJBQW9CLGFBQWUsQ0FBQyxDQUFDO0tBQzlLOzs7O0lBS00sOENBQThCLEdBQXJDO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsS0FBRyxzQkFBc0IsQ0FBQywwQkFBMEIsQ0FBQyxJQUFNLENBQUMsQ0FBQztLQUNuSjs7OztJQUtNLDRDQUE0QixHQUFuQztRQUNJLE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEtBQUcsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBTSxDQUFDLENBQUM7S0FDakk7Ozs7SUFLTSxtREFBbUMsR0FBMUM7UUFDSSxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxLQUFHLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQU0sQ0FBQyxDQUFDO0tBQy9JOzs7O0lBS00sZ0RBQWdDLEdBQXZDO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUg7Ozs7SUFLTSxrREFBa0MsR0FBekM7UUFDSSxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4STs7OztJQUtNLHlDQUF5QixHQUFoQztRQUNJLE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdEg7Ozs7SUFLTSxzQ0FBc0IsR0FBN0I7UUFDSSxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFHLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLElBQU0sQ0FBQyxDQUFDO0tBQy9IOzs7OztJQU1NLHlDQUF5QixHQUFoQyxVQUFpQyxhQUFxQjtRQUNsRCxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBRyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLGFBQWUsQ0FBQyxDQUFDO0tBQ3JJOzs7O0lBS00sMkNBQTJCLEdBQWxDO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFNLENBQUMsQ0FBQztLQUMvSDs7OztJQUtNLGdEQUFnQyxHQUF2QztRQUNJLE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLEtBQUcsc0JBQXNCLENBQUMscUJBQXFCLENBQUMsSUFBTSxDQUFDLENBQUM7S0FDekk7Ozs7SUFLTSxtREFBbUMsR0FBMUM7UUFDSSxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxLQUFHLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQU0sQ0FBQyxDQUFDO0tBQy9JOzs7O0lBS00sMkNBQTJCLEdBQWxDO1FBQ0ksT0FBTyxJQUFJLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFNLENBQUMsQ0FBQztLQUMvSDs7OztJQUtNLDRDQUE0QixHQUFuQztRQUNJLE9BQU8sSUFBSSxlQUFlLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLEtBQUcsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsSUFBTSxDQUFDLENBQUM7S0FDN0k7Ozs7SUFLTSwwQ0FBMEIsR0FBakM7UUFDSSxPQUFPLElBQUksZUFBZSxDQUFDLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsSTtJQUNMLHNCQUFDO0FBQUQsQ0F6UEEsQ0FBcUMsU0FBUzs7QUNsSjlDOzs7O0FBTUEsQUFFQTs7O0FBR0E7SUFBQTtLQTBGQzs7Ozs7O0lBbkZVLDJCQUFlLEdBQXRCLFVBQXVCLFNBQWlCO1FBQ3BDLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxNQUFNLGVBQWUsQ0FBQywyQkFBMkIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQU0sZUFBZSxHQUFHLHNDQUFzQyxDQUFDO1FBQy9ELElBQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoQyxNQUFNLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQywrQkFBNkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUcsQ0FBQyxDQUFDO1NBQzNHO1FBQ0QsSUFBTSxZQUFZLEdBQXFCO1lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JCLENBQUM7UUFDRixPQUFPLFlBQVksQ0FBQztLQUN2Qjs7Ozs7O0lBT00sbUJBQU8sR0FBZCxVQUFlLEdBQVc7UUFDdEIsUUFBUSxPQUFPLEdBQUcsS0FBSyxXQUFXLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxNQUFNLEVBQUU7S0FDbkU7SUFFTSxzQkFBVSxHQUFqQixVQUFrQixHQUFXLEVBQUUsTUFBYztRQUN6QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BDO0lBRU0sb0JBQVEsR0FBZixVQUFnQixHQUFXLEVBQUUsTUFBYztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN0Rzs7Ozs7O0lBT00sK0JBQW1CLEdBQTFCLFVBQThCLEtBQWE7UUFDdkMsSUFBSSxLQUFvQixDQUFDO1FBQ3pCLElBQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNqQixJQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztRQUNuQyxJQUFNLE1BQU0sR0FBRyxVQUFDLENBQVMsSUFBYSxPQUFBLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQSxDQUFDO1FBQ2pHLElBQU0sR0FBRyxHQUFPLEVBQUUsQ0FBQztRQUNuQixLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixPQUFPLEtBQUssRUFBRTtZQUNWLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLEdBQVEsQ0FBQztLQUNuQjs7Ozs7O0lBT00sNEJBQWdCLEdBQXZCLFVBQXdCLEdBQWtCO1FBQ3RDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBQSxDQUFDLENBQUM7S0FDekM7Ozs7O0lBTU0sdUNBQTJCLEdBQWxDLFVBQW1DLEdBQWtCO1FBQ2pELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUs7WUFDbkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEMsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBTU0sMkJBQWUsR0FBdEIsVUFBMEIsR0FBVztRQUNqQyxJQUFJO1lBQ0EsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBTSxDQUFDO1NBQy9CO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQztTQUNmO0tBQ0o7SUFDTCxrQkFBQztBQUFELENBQUM7O0FDckdEOzs7O0FBS0EsQUFpQkEsV0FBWSxRQUFRO0lBQ2hCLHlDQUFLLENBQUE7SUFDTCw2Q0FBTyxDQUFBO0lBQ1AsdUNBQUksQ0FBQTtJQUNKLDZDQUFPLENBQUE7QUFDWCxDQUFDLEVBTFdBLGdCQUFRLEtBQVJBLGdCQUFRLFFBS25CO0FBU0Q7OztBQUdBO0lBY0ksZ0JBQVksYUFBNEI7O1FBUmhDLFVBQUssR0FBYUEsZ0JBQVEsQ0FBQyxJQUFJLENBQUM7UUFTcEMsSUFBSSxhQUFhLEVBQUU7WUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7WUFDbEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztZQUN6RCxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDdkM7S0FDSjs7OztJQUtPLDJCQUFVLEdBQWxCLFVBQW1CLFVBQWtCLEVBQUUsT0FBNkI7UUFDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDckYsT0FBTztTQUNWO1FBQ0QsSUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQyxJQUFNLFNBQVMsR0FBVyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxNQUFJLFNBQVMsU0FBTSxHQUFHLE1BQUksU0FBUyxhQUFRLElBQUksQ0FBQyxhQUFhLE1BQUcsQ0FBQztRQUNySSxJQUFNLEdBQUcsR0FBTSxTQUFTLFdBQU0sR0FBRyxDQUFDLE9BQU8sV0FBTUEsZ0JBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQU0sVUFBWSxDQUFDOztRQUU1RixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNwRTs7OztJQUtELGdDQUFlLEdBQWYsVUFBZ0IsS0FBZSxFQUFFLE9BQWUsRUFBRSxXQUFvQjtRQUNsRSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO0tBQ0o7Ozs7SUFLRCxzQkFBSyxHQUFMLFVBQU0sT0FBZSxFQUFFLGFBQXNCO1FBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3JCLFFBQVEsRUFBRUEsZ0JBQVEsQ0FBQyxLQUFLO1lBQ3hCLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLGFBQWEsRUFBRSxhQUFhLElBQUksRUFBRTtTQUNyQyxDQUFDLENBQUM7S0FDTjs7OztJQUtELHlCQUFRLEdBQVIsVUFBUyxPQUFlLEVBQUUsYUFBc0I7UUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDckIsUUFBUSxFQUFFQSxnQkFBUSxDQUFDLEtBQUs7WUFDeEIsV0FBVyxFQUFFLElBQUk7WUFDakIsYUFBYSxFQUFFLGFBQWEsSUFBSSxFQUFFO1NBQ3JDLENBQUMsQ0FBQztLQUNOOzs7O0lBS0Qsd0JBQU8sR0FBUCxVQUFRLE9BQWUsRUFBRSxhQUFzQjtRQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUNyQixRQUFRLEVBQUVBLGdCQUFRLENBQUMsT0FBTztZQUMxQixXQUFXLEVBQUUsS0FBSztZQUNsQixhQUFhLEVBQUUsYUFBYSxJQUFJLEVBQUU7U0FDckMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFLRCwyQkFBVSxHQUFWLFVBQVcsT0FBZSxFQUFFLGFBQXNCO1FBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3JCLFFBQVEsRUFBRUEsZ0JBQVEsQ0FBQyxPQUFPO1lBQzFCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLGFBQWEsRUFBRSxhQUFhLElBQUksRUFBRTtTQUNyQyxDQUFDLENBQUM7S0FDTjs7OztJQUtELHFCQUFJLEdBQUosVUFBSyxPQUFlLEVBQUUsYUFBc0I7UUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDckIsUUFBUSxFQUFFQSxnQkFBUSxDQUFDLElBQUk7WUFDdkIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsYUFBYSxFQUFFLGFBQWEsSUFBSSxFQUFFO1NBQ3JDLENBQUMsQ0FBQztLQUNOOzs7O0lBS0Qsd0JBQU8sR0FBUCxVQUFRLE9BQWUsRUFBRSxhQUFzQjtRQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUNyQixRQUFRLEVBQUVBLGdCQUFRLENBQUMsSUFBSTtZQUN2QixXQUFXLEVBQUUsSUFBSTtZQUNqQixhQUFhLEVBQUUsYUFBYSxJQUFJLEVBQUU7U0FDckMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFLRCx3QkFBTyxHQUFQLFVBQVEsT0FBZSxFQUFFLGFBQXNCO1FBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3JCLFFBQVEsRUFBRUEsZ0JBQVEsQ0FBQyxPQUFPO1lBQzFCLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLGFBQWEsRUFBRSxhQUFhLElBQUksRUFBRTtTQUNyQyxDQUFDLENBQUM7S0FDTjs7OztJQUtELDJCQUFVLEdBQVYsVUFBVyxPQUFlLEVBQUUsYUFBc0I7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDckIsUUFBUSxFQUFFQSxnQkFBUSxDQUFDLE9BQU87WUFDMUIsV0FBVyxFQUFFLElBQUk7WUFDakIsYUFBYSxFQUFFLGFBQWEsSUFBSSxFQUFFO1NBQ3JDLENBQUMsQ0FBQztLQUNOOzs7O0lBS0Qsb0NBQW1CLEdBQW5CO1FBQ0ksT0FBTyxJQUFJLENBQUMsaUJBQWlCLElBQUksS0FBSyxDQUFDO0tBQzFDO0lBQ0wsYUFBQztBQUFELENBQUM7O0FDbExEOzs7O0FBS0EsSUFBYSxTQUFTLEdBQUc7SUFDckIsWUFBWSxFQUFFLFNBQVM7SUFDdkIsR0FBRyxFQUFFLGdCQUFnQjs7SUFFckIsWUFBWSxFQUFFLE1BQU07O0lBRXBCLGlCQUFpQixFQUFFLDJDQUEyQztJQUM5RCxzQkFBc0IsRUFBRSwyQkFBMkI7O0lBRW5ELElBQUksRUFBRSxNQUFNOztJQUVaLDRCQUE0QixFQUFFLHFHQUFxRzs7SUFFbkksY0FBYyxFQUFFLEdBQUc7O0lBRW5CLFVBQVUsRUFBRSxZQUFZOztJQUV4QixNQUFNLEVBQUUsUUFBUTs7SUFFaEIsYUFBYSxFQUFFLHNDQUFzQzs7SUFFckQsWUFBWSxFQUFFLFFBQVE7SUFDdEIsYUFBYSxFQUFFLFNBQVM7SUFDeEIsb0JBQW9CLEVBQUUsZ0JBQWdCOztJQUV0QyxrQkFBa0IsRUFBRSxNQUFNO0lBQzFCLGVBQWUsRUFBRSxvQkFBb0I7SUFDckMsYUFBYSxFQUFFLGVBQWU7SUFDOUIsc0JBQXNCLEVBQUUsVUFBVTtJQUNsQywwQkFBMEIsRUFBRSxNQUFNO0lBQ2xDLHFCQUFxQixFQUFFLGlEQUFpRDtJQUN4RSxxQkFBcUIsRUFBRSx1QkFBdUI7SUFDOUMsV0FBVyxFQUFFLGFBQWE7Q0FDN0IsQ0FBQztBQUVGOzs7QUFHQSxBQUFBLElBQVksV0FPWDtBQVBELFdBQVksV0FBVztJQUNuQiw0Q0FBNkIsQ0FBQTtJQUM3QixpRUFBa0QsQ0FBQTtJQUNsRCw4REFBK0MsQ0FBQTtJQUMvQywwQ0FBMkIsQ0FBQTtJQUMzQiwwREFBMkMsQ0FBQTtJQUMzQyw4REFBK0MsQ0FBQTtBQUNuRCxDQUFDLEVBUFcsV0FBVyxLQUFYLFdBQVcsUUFPdEI7QUFFRCxBQUdBLFdBQVksbUJBQW1CO0lBQzNCLDJDQUFvQixDQUFBO0lBQ3BCLGtEQUEyQixDQUFBO0lBQzNCLHFEQUE4QixDQUFBO0lBQzlCLHNDQUFlLENBQUE7SUFDZix1REFBZ0MsQ0FBQTtBQUNwQyxDQUFDLEVBTldDLDJCQUFtQixLQUFuQkEsMkJBQW1CLFFBTTlCO0FBRUQ7OztBQUdBLEFBQUEsSUFBWSxxQkFJWDtBQUpELFdBQVkscUJBQXFCO0lBQzdCLDBDQUFpQixDQUFBO0lBQ2pCLHdEQUErQixDQUFBO0lBQy9CLGdEQUF1QixDQUFBO0FBQzNCLENBQUMsRUFKVyxxQkFBcUIsS0FBckIscUJBQXFCLFFBSWhDO0FBRUQ7OztBQUdBLEFBQUEsSUFBWSxrQkF1Q1g7QUF2Q0QsV0FBWSxrQkFBa0I7SUFDMUIsNkNBQXVCLENBQUE7SUFDdkIsbURBQTZCLENBQUE7SUFDN0IscURBQStCLENBQUE7SUFDL0IscURBQStCLENBQUE7SUFDL0IsK0NBQXlCLENBQUE7SUFDekIsdUNBQWlCLENBQUE7SUFDakIscUNBQWUsQ0FBQTtJQUNmLHFDQUFlLENBQUE7SUFDZiw2REFBdUMsQ0FBQTtJQUN2QyxtREFBNkIsQ0FBQTtJQUM3QiwyQ0FBcUIsQ0FBQTtJQUNyQixxREFBK0IsQ0FBQTtJQUMvQiwrQ0FBeUIsQ0FBQTtJQUN6QixxQ0FBZSxDQUFBO0lBQ2YscUNBQWUsQ0FBQTtJQUNmLHVDQUFpQixDQUFBO0lBQ2pCLHFEQUErQixDQUFBO0lBQy9CLGlEQUEyQixDQUFBO0lBQzNCLG1DQUFhLENBQUE7SUFDYix1REFBaUMsQ0FBQTtJQUNqQyxxRUFBK0MsQ0FBQTtJQUMvQyxxREFBK0IsQ0FBQTtJQUMvQiw2REFBdUMsQ0FBQTtJQUN2QyxtREFBNkIsQ0FBQTtJQUM3QixtREFBNkIsQ0FBQTtJQUM3QixpREFBMkIsQ0FBQTtJQUMzQixtREFBNkIsQ0FBQTtJQUM3QixrRUFBNEMsQ0FBQTtJQUM1QyxpREFBMkIsQ0FBQTtJQUMzQixxREFBK0IsQ0FBQTtJQUMvQiwyREFBcUMsQ0FBQTtJQUNyQyxxRUFBK0MsQ0FBQTtJQUMvQywrQ0FBeUIsQ0FBQTtJQUN6Qix5Q0FBbUIsQ0FBQTtJQUNuQixpREFBMkIsQ0FBQTtJQUMzQixpRUFBMkMsQ0FBQTtJQUMzQyxtREFBNkIsQ0FBQTtJQUM3QixtQ0FBYSxDQUFBO0FBQ2pCLENBQUMsRUF2Q1csa0JBQWtCLEtBQWxCLGtCQUFrQixRQXVDN0I7QUFFRDs7O0FBR0EsQUFBQSxJQUFZLGlCQUdYO0FBSEQsV0FBWSxpQkFBaUI7SUFDekIsa0RBQTZCLENBQUE7SUFDN0Isc0NBQWlCLENBQUE7QUFDckIsQ0FBQyxFQUhXLGlCQUFpQixLQUFqQixpQkFBaUIsUUFHNUI7QUFFRDs7Ozs7QUFLQSxJQUFhLFdBQVcsR0FBRztJQUN2QixLQUFLLEVBQUUsT0FBTztJQUNkLGNBQWMsRUFBRSxnQkFBZ0I7SUFDaEMsT0FBTyxFQUFFLFNBQVM7SUFDbEIsSUFBSSxFQUFFLE1BQU07Q0FDZixDQUFDO0FBRUY7OztBQUdBLEFBQUEsSUFBWSxRQVVYO0FBVkQsV0FBWSxRQUFRO0lBQ2hCLCtCQUFtQixDQUFBO0lBQ25CLHVCQUFXLENBQUE7SUFDWCxxQ0FBeUIsQ0FBQTtJQUN6QixpQ0FBcUIsQ0FBQTtJQUNyQix1Q0FBMkIsQ0FBQTtJQUMzQiwyQ0FBK0IsQ0FBQTtJQUMvQixtQ0FBdUIsQ0FBQTtJQUN2Qiw0Q0FBZ0MsQ0FBQTtJQUNoQyxvREFBd0MsQ0FBQTtBQUM1QyxDQUFDLEVBVlcsUUFBUSxLQUFSLFFBQVEsUUFVbkI7QUFFRDs7O0FBR0EsQUFBTyxJQUFNLG1CQUFtQixHQUFHO0lBQy9CLFFBQVEsQ0FBQyxHQUFHO0lBQ1osUUFBUSxDQUFDLFVBQVU7Q0FDdEIsQ0FBQztBQUVGOzs7QUFHQSxBQUFPLElBQU0seUJBQXlCLEdBQUc7SUFDckMsS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsTUFBTTtDQUNmLENBQUM7QUFFRixBQWFBLFdBQVksWUFBWTtJQUNwQiwrQkFBZSxDQUFBO0lBQ2YscUNBQXFCLENBQUE7SUFDckIsdUNBQXVCLENBQUE7QUFDM0IsQ0FBQyxFQUpXQyxvQkFBWSxLQUFaQSxvQkFBWSxRQUl2QjtBQUVEOzs7QUFHQSxBQUFBLElBQVksU0FRWDtBQVJELFdBQVksU0FBUztJQUNqQix3Q0FBMkIsQ0FBQTtJQUMzQiw0REFBK0MsQ0FBQTtJQUMvQyw0REFBK0MsQ0FBQTtJQUMvQyx1REFBMEMsQ0FBQTtJQUMxQyxrREFBcUMsQ0FBQTtJQUNyQyw4Q0FBaUMsQ0FBQTtJQUNqQyx1RUFBMEQsQ0FBQTtBQUM5RCxDQUFDLEVBUlcsU0FBUyxLQUFULFNBQVMsUUFRcEI7QUFFRDs7O0FBR0EsQUFBQSxJQUFZLGdCQUtYO0FBTEQsV0FBWSxnQkFBZ0I7SUFDeEIsZ0RBQTRCLENBQUE7SUFDNUIsOENBQTBCLENBQUE7SUFDMUIsOENBQTBCLENBQUE7SUFDMUIsb0RBQWdDLENBQUE7QUFDcEMsQ0FBQyxFQUxXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFLM0I7QUFFRDs7O0FBR0EsQUFBQSxJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDbEIsdUNBQXlCLENBQUE7SUFDekIseUNBQTJCLENBQUE7QUFDL0IsQ0FBQyxFQUhXLFVBQVUsS0FBVixVQUFVLFFBR3JCO0FBRUQsQUFHQSxXQUFZLGNBQWM7SUFDdEIsc0NBQW9CLENBQUE7SUFDcEIsOENBQTRCLENBQUE7SUFDNUIsZ0RBQThCLENBQUE7QUFDbEMsQ0FBQyxFQUpXQyxzQkFBYyxLQUFkQSxzQkFBYyxRQUl6QjtBQUVELEFBR0EsV0FBWSxlQUFlO0lBQ3ZCLHNDQUFtQixDQUFBO0lBQ25CLDRDQUF5QixDQUFBO0lBQ3pCLHVDQUFvQixDQUFBO0lBQ3BCLCtDQUE0QixDQUFBO0lBQzVCLGlEQUE4QixDQUFBO0lBQzlCLCtDQUE0QixDQUFBO0lBQzVCLDBDQUF1QixDQUFBO0lBQ3ZCLDBDQUF1QixDQUFBO0lBQ3ZCLDBDQUF1QixDQUFBO0lBQ3ZCLDRDQUF5QixDQUFBO0FBQzdCLENBQUMsRUFYV0MsdUJBQWUsS0FBZkEsdUJBQWUsUUFXMUI7QUFFRCxBQUdBLFdBQVksU0FBUztJQUNqQiw0Q0FBVyxDQUFBO0lBQ1gsMENBQVUsQ0FBQTtJQUNWLDhDQUFZLENBQUE7SUFDWixrREFBYyxDQUFBO0lBQ2QsNERBQW1CLENBQUE7SUFDbkIsOERBQW9CLENBQUE7SUFDcEIsb0RBQWUsQ0FBQTtJQUNmLDREQUFtQixDQUFBO0lBQ25CLHNEQUFnQixDQUFBO0FBQ3BCLENBQUMsRUFWV0MsaUJBQVMsS0FBVEEsaUJBQVMsUUFVcEI7QUFFRDs7O0FBR0EsQUFBTyxJQUFNLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDMUMsQUFBTyxJQUFNLFVBQVUsR0FBRyxhQUFhLENBQUM7QUFDeEMsQUFBTyxJQUFNLGFBQWEsR0FBRyxHQUFHLENBQUM7QUFFakMsQUFBTyxJQUFNLHNCQUFzQixHQUFHO0lBQ2xDLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsU0FBUyxFQUFFLGtCQUFrQjtJQUM3QixrQkFBa0IsRUFBRSxHQUFHO0lBQ3ZCLGVBQWUsRUFBRSxHQUFHO0lBQ3BCLGFBQWEsRUFBRSxHQUFHO0lBQ2xCLGNBQWMsRUFBRSxHQUFHO0NBQ3RCLENBQUM7QUFFRixBQUdBLFdBQVksb0JBQW9CO0lBQzVCLG1DQUFXLENBQUE7SUFDWCx5Q0FBaUIsQ0FBQTtBQUNyQixDQUFDLEVBSFdDLDRCQUFvQixLQUFwQkEsNEJBQW9CLFFBRy9CO0FBRUQ7OztBQUdBLEFBQU8sSUFBTSxtQkFBbUIsR0FBRzs7SUFFL0IsNkJBQTZCLEVBQUUsRUFBRTs7SUFFakMsaUNBQWlDLEVBQUUsSUFBSTs7SUFFdkMsaUJBQWlCLEVBQUUsWUFBWTtDQUNsQyxDQUFDO0FBRUYsQUFBTyxJQUFNLE1BQU0sR0FBRztJQUNsQixtQkFBbUIsRUFBRSxlQUFlO0lBQ3BDLHFCQUFxQixFQUFFLGlCQUFpQjtDQUMzQyxDQUFDOztBQ3pTRjs7OztBQUtBLEFBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBO0lBQUE7S0F1SkM7Ozs7SUF6SUcsNENBQWlCLEdBQWpCO1FBQ0ksT0FBTyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUM5Rjs7OztJQUtELCtDQUFvQixHQUFwQjtRQUNJLE9BQU8sZ0JBQWdCLENBQUMsK0JBQStCLENBQ25ELElBQUksQ0FBQyxjQUFjLEVBQ25CLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO0tBQ0w7Ozs7SUFLRCx5Q0FBYyxHQUFkO1FBQ0ksT0FBTyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEU7Ozs7SUFLRCxnREFBcUIsR0FBckI7UUFDSSxPQUFPLGdCQUFnQixDQUFDLDBCQUEwQixDQUM5QyxJQUFJLENBQUMsYUFBYSxFQUNsQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO0tBQ0w7Ozs7SUFLRCx1Q0FBWSxHQUFaO1FBQ0ksUUFBUSxJQUFJLENBQUMsY0FBYztZQUN2QixLQUFLSCxzQkFBYyxDQUFDLFFBQVE7Z0JBQ3hCLE9BQU9FLGlCQUFTLENBQUMsUUFBUSxDQUFDO1lBQzlCLEtBQUtGLHNCQUFjLENBQUMsWUFBWTtnQkFDNUIsT0FBT0UsaUJBQVMsQ0FBQyxZQUFZLENBQUM7WUFDbEMsS0FBS0Ysc0JBQWMsQ0FBQyxhQUFhO2dCQUM3QixPQUFPRSxpQkFBUyxDQUFDLGFBQWEsQ0FBQztZQUNuQyxTQUFTO2dCQUNMLE1BQU0sZUFBZSxDQUFDLG1DQUFtQyxFQUFFLENBQUM7YUFDL0Q7U0FDSjtLQUNKOzs7OztJQU1NLGtDQUFpQixHQUF4QixVQUF5QixHQUFXO1FBQ2hDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQ0Ysc0JBQWMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMvRCxPQUFPQSxzQkFBYyxDQUFDLFlBQVksQ0FBQztTQUN0QzthQUFNLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQ0Esc0JBQWMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNsRSxPQUFPQSxzQkFBYyxDQUFDLFFBQVEsQ0FBQztTQUNsQzthQUFNLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQ0Esc0JBQWMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUN2RSxPQUFPQSxzQkFBYyxDQUFDLGFBQWEsQ0FBQztTQUN2QztRQUVELE9BQU8sU0FBUyxDQUFDLFdBQVcsQ0FBQztLQUNoQzs7OztJQUtNLDJDQUEwQixHQUFqQyxVQUNJLGFBQXFCLEVBQ3JCLFdBQW1CLEVBQ25CLGNBQThCLEVBQzlCLFFBQWdCLEVBQ2hCLEtBQWMsRUFDZCxNQUFlLEVBQ2YsUUFBaUI7UUFFakIsSUFBTSxhQUFhLEdBQUc7WUFDbEIsSUFBSSxDQUFDLDRCQUE0QixDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUM7WUFDN0QsSUFBSSxDQUFDLCtCQUErQixDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQztZQUMvRSxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDO1NBQ3pDLENBQUM7UUFFRixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDM0U7Ozs7OztJQU9jLDZDQUE0QixHQUEzQyxVQUNJLGFBQXFCLEVBQ3JCLFdBQW1CO1FBRW5CLElBQU0sU0FBUyxHQUFrQixDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdkU7Ozs7Ozs7O0lBU2MsZ0RBQStCLEdBQTlDLFVBQ0ksY0FBOEIsRUFDOUIsUUFBZ0IsRUFDaEIsS0FBYyxFQUNkLFFBQWlCO1FBRWpCLElBQU0sZ0JBQWdCLEdBQ2xCLGNBQWMsS0FBS0Esc0JBQWMsQ0FBQyxhQUFhO2NBQ3pDLFFBQVEsSUFBSSxRQUFRO2NBQ3BCLFFBQVEsQ0FBQztRQUNuQixJQUFNLFlBQVksR0FBa0I7WUFDaEMsY0FBYztZQUNkLGdCQUFnQjtZQUNoQixLQUFLLElBQUksRUFBRTtTQUNkLENBQUM7UUFFRixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDMUU7Ozs7SUFLYywwQ0FBeUIsR0FBeEMsVUFBeUMsTUFBYztRQUNuRCxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQztLQUN2QztJQUNMLHVCQUFDO0FBQUQsQ0FBQzs7QUNuTEQ7Ozs7QUFPQTs7O0FBR0EsSUFBYSwrQkFBK0IsR0FBRztJQUMzQyxpQkFBaUIsRUFBRTtRQUNmLElBQUksRUFBRSxvQkFBb0I7UUFDMUIsSUFBSSxFQUFFLGtFQUFrRTtLQUMzRTtJQUNELG1CQUFtQixFQUFFO1FBQ2pCLElBQUksRUFBRSx1QkFBdUI7UUFDN0IsSUFBSSxFQUFFLDBDQUEwQztLQUNuRDtJQUNELHlCQUF5QixFQUFFO1FBQ3ZCLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsSUFBSSxFQUFFLGtEQUFrRDtLQUMzRDtJQUNELG9CQUFvQixFQUFFO1FBQ2xCLElBQUksRUFBRSx3QkFBd0I7UUFDOUIsSUFBSSxFQUFFLDJOQUEyTjtLQUNwTztJQUNELGFBQWEsRUFBRTtRQUNYLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsSUFBSSxFQUFFLG9EQUFvRDtLQUM3RDtJQUNELGFBQWEsRUFBRTtRQUNYLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsSUFBSSxFQUFFLHdCQUF3QjtLQUNqQztJQUNELGdCQUFnQixFQUFFO1FBQ2QsSUFBSSxFQUFFLDBCQUEwQjtRQUNoQyxJQUFJLEVBQUUsZ0hBQWdIO0tBQ3pIO0lBQ0QsbUJBQW1CLEVBQUU7UUFDakIsSUFBSSxFQUFFLDZCQUE2QjtRQUNuQyxJQUFJLEVBQUUsdUNBQXVDO0tBQ2hEO0lBQ0Qsd0JBQXdCLEVBQUU7UUFDdEIsSUFBSSxFQUFFLDZCQUE2QjtRQUNuQyxJQUFJLEVBQUUsbURBQW1EO0tBQzVEO0lBQ0QsYUFBYSxFQUFFO1FBQ1gsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixJQUFJLEVBQUUsK1BBQStQO0tBQ3hRO0lBQ0Qsb0JBQW9CLEVBQUU7UUFDbEIsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixJQUFJLEVBQUUsMkRBQTJEO0tBQ3BFO0lBQ0Qsc0JBQXNCLEVBQUU7UUFDcEIsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixJQUFJLEVBQUUsaURBQWlEO0tBQzFEO0lBQ0QsdUJBQXVCLEVBQUU7UUFDckIsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixJQUFJLEVBQUUsMkNBQTJDO0tBQ3BEO0lBQ0QsMEJBQTBCLEVBQUU7UUFDeEIsSUFBSSxFQUFFLCtCQUErQjtRQUNyQyxJQUFJLEVBQUUsbUZBQW1GO0tBQzVGO0lBQ0QsMEJBQTBCLEVBQUU7UUFDeEIsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixJQUFJLEVBQUUscUdBQXFHO0tBQzlHO0lBQ0QseUNBQXlDLEVBQUU7UUFDdkMsSUFBSSxFQUFFLDJCQUEyQjtRQUNqQyxJQUFJLEVBQUUsd0pBQXdKO0tBQ2pLO0lBQ0QsNkJBQTZCLEVBQUU7UUFDM0IsSUFBSSxFQUFFLGtDQUFrQztRQUN4QyxJQUFJLEVBQUUseUhBQXlIO0tBQ2xJO0lBQ0Qsa0JBQWtCLEVBQUU7UUFDaEIsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixJQUFJLEVBQUUsNEhBQTRIO0tBQ3JJO0NBQ0osQ0FBQztBQUVGOzs7QUFHQTtJQUE4Qyw0Q0FBZTtJQUV6RCxrQ0FBWSxTQUFpQixFQUFFLFlBQXFCO1FBQXBELFlBQ0ksa0JBQU0sU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUdqQztRQUZHLEtBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLENBQUM7UUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFJLEVBQUUsd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7O0tBQ25FOzs7O0lBS00sb0RBQTJCLEdBQWxDO1FBQ0ksT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLGlCQUFpQixDQUFDLElBQUksRUFDdEYsK0JBQStCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0Q7Ozs7SUFLTSw4REFBcUMsR0FBNUM7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQUMsK0JBQStCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUN4RiwrQkFBK0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqRTs7OztJQUtNLHdEQUErQixHQUF0QyxVQUF1Qyx1QkFBK0I7UUFDbEUsT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLHlCQUF5QixDQUFDLElBQUksRUFDM0YsK0JBQStCLENBQUMseUJBQXlCLENBQUMsSUFBSSxzQkFBaUIsdUJBQXlCLENBQUMsQ0FBQztLQUNwSDs7Ozs7SUFNTSx3REFBK0IsR0FBdEMsVUFBdUMsU0FBaUI7UUFDcEQsT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLG9CQUFvQixDQUFDLElBQUksRUFDdEYsK0JBQStCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxvQkFBZSxTQUFXLENBQUMsQ0FBQztLQUMvRjs7Ozs7SUFNTSw0Q0FBbUIsR0FBMUIsVUFBMkIsYUFBcUI7UUFDNUMsT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQy9FLCtCQUErQixDQUFDLGFBQWEsQ0FBQyxJQUFJLHNCQUFpQixhQUFlLENBQUMsQ0FBQztLQUM5Rjs7Ozs7SUFNTSw0Q0FBbUIsR0FBMUI7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQUMsK0JBQStCLENBQUMsYUFBYSxDQUFDLElBQUksRUFDbEYsK0JBQStCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNEOzs7OztJQU1NLGtEQUF5QixHQUFoQyxVQUFpQyxXQUEwQjtRQUN2RCxPQUFPLElBQUksd0JBQXdCLENBQUMsK0JBQStCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUNyRiwrQkFBK0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLHVCQUFrQixXQUFhLENBQUMsQ0FBQztLQUNuRzs7Ozs7SUFNTSxvREFBMkIsR0FBbEMsVUFBbUMsV0FBMEI7UUFDekQsT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFDbEYsK0JBQStCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSx1QkFBa0IsV0FBYSxDQUFDLENBQUM7S0FDaEc7Ozs7O0lBTU0sdURBQThCLEdBQXJDLFVBQXNDLFdBQTBCO1FBQzVELE9BQU8sSUFBSSx3QkFBd0IsQ0FBQywrQkFBK0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQzFGLCtCQUErQixDQUFDLHdCQUF3QixDQUFDLElBQUksdUJBQWtCLFdBQWEsQ0FBQyxDQUFDO0tBQ3hHOzs7OztJQU1NLGlEQUF3QixHQUEvQixVQUFnQyxXQUFtQjtRQUMvQyxPQUFPLElBQUksd0JBQXdCLENBQUMsK0JBQStCLENBQUMsYUFBYSxDQUFDLElBQUksRUFDL0UsK0JBQStCLENBQUMsYUFBYSxDQUFDLElBQUksc0JBQWlCLFdBQWEsQ0FBQyxDQUFDO0tBQzVGOzs7O0lBS00sd0RBQStCLEdBQXRDO1FBQ0ksT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLG9CQUFvQixDQUFDLElBQUksRUFDekYsK0JBQStCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbEU7Ozs7SUFLTSxzREFBNkIsR0FBcEM7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQy9CLCtCQUErQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFDNUQsK0JBQStCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUMvRCxDQUFDO0tBQ0w7Ozs7SUFLTSxxREFBNEIsR0FBbkM7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQy9CLCtCQUErQixDQUFDLHNCQUFzQixDQUFDLElBQUksRUFDM0QsK0JBQStCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUM5RCxDQUFDO0tBQ0w7Ozs7SUFLTSw4REFBcUMsR0FBNUM7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQy9CLCtCQUErQixDQUFDLDBCQUEwQixDQUFDLElBQUksRUFDL0QsK0JBQStCLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUNsRSxDQUFDO0tBQ0w7Ozs7SUFLTSw4REFBcUMsR0FBNUM7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQy9CLCtCQUErQixDQUFDLDBCQUEwQixDQUFDLElBQUksRUFDL0QsK0JBQStCLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUNsRSxDQUFDO0tBQ0w7Ozs7SUFLTSwwRUFBaUQsR0FBeEQ7UUFDSSxPQUFPLElBQUksd0JBQXdCLENBQUMsK0JBQStCLENBQUMseUNBQXlDLENBQUMsSUFBSSxFQUM5RywrQkFBK0IsQ0FBQyx5Q0FBeUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2Rjs7OztJQUtNLGlFQUF3QyxHQUEvQztRQUNJLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQywrQkFBK0IsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLEVBQ2xHLCtCQUErQixDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNFOzs7O0lBS00sc0RBQTZCLEdBQXBDO1FBQ0ksT0FBTyxJQUFJLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLGtCQUFrQixDQUFDLElBQUksRUFDdkYsK0JBQStCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEU7SUFDTCwrQkFBQztBQUFELENBdEtBLENBQThDLGVBQWU7O0FDeEY3RDs7OztBQVVBOzs7OztBQUtBO0lBSUksa0JBQVksV0FBMEI7UUFBdEMsaUJBVUM7O1FBUkcsSUFBTSxRQUFRLEdBQUcsV0FBVyxHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsZ0JBQUssV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ25GLElBQU0sYUFBYSxHQUFHLFFBQVEsR0FBRyxXQUFXLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDOztRQUd4RixJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBQ2hDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBQSxDQUFDLENBQUM7S0FDMUQ7Ozs7Ozs7SUFRTSxtQkFBVSxHQUFqQixVQUFrQixnQkFBd0I7UUFDdEMsZ0JBQWdCLEdBQUcsZ0JBQWdCLElBQUksRUFBRSxDQUFDO1FBQzFDLElBQU0sV0FBVyxHQUFrQixnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsT0FBTyxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNwQzs7Ozs7O0lBT08sc0NBQW1CLEdBQTNCLFVBQTRCLFdBQTBCOztRQUVsRCxJQUFJLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sd0JBQXdCLENBQUMsMkJBQTJCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0U7S0FDSjs7Ozs7SUFNRCxnQ0FBYSxHQUFiLFVBQWMsS0FBYTtRQUN2QixJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7UUFFekQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDbkc7Ozs7O0lBTUQsbUNBQWdCLEdBQWhCLFVBQWlCLFFBQWtCO1FBQW5DLGlCQU1DO1FBTEcsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFBLENBQUMsRUFBRTtLQUNySDs7OztJQUtELDRDQUF5QixHQUF6QjtRQUNJLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDNUMsaUJBQWlCLElBQUksQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUM3QyxpQkFBaUIsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDcEQsaUJBQWlCLElBQUksQ0FBQyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxpQkFBaUIsQ0FBQztLQUNqRDs7Ozs7SUFNRCw4QkFBVyxHQUFYLFVBQVksUUFBZ0I7UUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDcEM7S0FDSjs7Ozs7SUFNRCwrQkFBWSxHQUFaLFVBQWEsU0FBd0I7UUFBckMsaUJBTUM7UUFMRyxJQUFJO1lBQ0EsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUEsQ0FBQyxDQUFDO1NBQzdEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixNQUFNLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RDtLQUNKOzs7OztJQU1ELDhCQUFXLEdBQVgsVUFBWSxLQUFhO1FBQ3JCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixNQUFNLGVBQWUsQ0FBQyxrQ0FBa0MsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ3BDOzs7OztJQU1ELHNDQUFtQixHQUFuQjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDL0M7Ozs7O0lBTUQsaUNBQWMsR0FBZCxVQUFlLFdBQXFCO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCxNQUFNLGVBQWUsQ0FBQyw2QkFBNkIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRTtRQUNELElBQU0sV0FBVyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFDdEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFBLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUEsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sV0FBVyxDQUFDO0tBQ3RCOzs7OztJQU1ELHdDQUFxQixHQUFyQixVQUFzQixXQUFxQjtRQUN2QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2QsTUFBTSxlQUFlLENBQUMsNkJBQTZCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDOztRQUdyRCxJQUFJLENBQUMsV0FBVyxDQUFDLHlCQUF5QixFQUFFLEVBQUU7WUFDMUMsV0FBVyxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDckM7UUFDRCxJQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDcEQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzVDLElBQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDekMsT0FBTyxlQUFlLElBQUksY0FBYyxHQUFHLGVBQWUsQ0FBQyxDQUFDO0tBQy9EOzs7O0lBS0QsZ0NBQWEsR0FBYjtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDM0I7Ozs7SUFLRCwwQkFBTyxHQUFQO1FBQ0ksSUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUEsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sS0FBSyxDQUFDO0tBQ2hCOzs7O0lBS0QsOEJBQVcsR0FBWDtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0I7UUFDRCxPQUFPLEVBQUUsQ0FBQztLQUNiOzs7O0lBS0QsdUNBQW9CLEdBQXBCO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDM0M7SUFDTCxlQUFDO0FBQUQsQ0FBQyxJQUFBOztBQy9NRDs7OztBQUtBLEFBR0EsV0FBWSxhQUFhO0lBQ3JCLHVEQUFPLENBQUE7SUFDUCxpREFBSSxDQUFBO0FBQ1IsQ0FBQyxFQUhXSSxxQkFBYSxLQUFiQSxxQkFBYSxRQUd4Qjs7QUNYRDs7OztBQU1BLEFBTUE7OztBQUdBO0lBUUksbUJBQVksR0FBVztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUN0QixJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFOztZQUV0QyxNQUFNLHdCQUF3QixDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDeEQ7UUFFRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BEO0tBQ0o7SUFkRCxzQkFBVyxnQ0FBUzthQUFwQjtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUMxQjs7O09BQUE7Ozs7O0lBa0JNLHlCQUFlLEdBQXRCLFVBQXVCLEdBQVc7UUFDOUIsSUFBSSxHQUFHLEVBQUU7WUFDTCxHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzNCO1FBRUQsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUN4QyxHQUFHLElBQUksR0FBRyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLEdBQUcsQ0FBQztLQUNkOzs7O0lBS0QsaUNBQWEsR0FBYjs7UUFFSSxJQUFJLFVBQVUsQ0FBQztRQUNmLElBQUk7WUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDeEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE1BQU0sd0JBQXdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekQ7O1FBR0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFO1lBQ3pELE1BQU0sd0JBQXdCLENBQUMsbUJBQW1CLENBQUMsdUJBQXFCLElBQUksQ0FBQyxTQUFXLENBQUMsQ0FBQztTQUM3Rjs7UUFHRCxJQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUN2RSxNQUFNLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNsRjtLQUNKOzs7Ozs7SUFPRCxpREFBNkIsR0FBN0IsVUFBOEIsSUFBWTtRQUN0QyxJQUFJLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDOztRQUVwRCxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQzs7UUFFcEQsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ3pCO0lBRU0sMkJBQWlCLEdBQXhCLFVBQXlCLEdBQVc7UUFDaEMsT0FBTyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2RDs7Ozs7O0lBT0QscUNBQWlCLEdBQWpCLFVBQWtCLFFBQWdCO1FBQzlCLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFDLElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDekMsSUFBSSxRQUFRLEtBQUssU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLHFCQUFxQixDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUsscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUNqSixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxTQUFTLENBQUMsK0JBQStCLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDL0Q7Ozs7SUFLRCwyQkFBTyxHQUFQO1FBQ0ksT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM5Qzs7Ozs7SUFNRCxvQ0FBZ0IsR0FBaEI7O1FBRUksSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLDREQUE0RCxDQUFDLENBQUM7O1FBR25GLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixNQUFNLHdCQUF3QixDQUFDLG1CQUFtQixDQUFDLHVCQUFxQixJQUFJLENBQUMsU0FBVyxDQUFDLENBQUM7U0FDN0Y7O1FBR0QsSUFBTSxhQUFhLEdBQUc7WUFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDekIsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDaEIsQ0FBQztRQUVWLElBQUksWUFBWSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFBLENBQUMsQ0FBQztRQUNuRSxhQUFhLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUUxQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDNUYsYUFBYSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUc7UUFDRCxPQUFPLGFBQWEsQ0FBQztLQUN4QjtJQUVNLDBCQUFnQixHQUF2QixVQUF3QixHQUFXO1FBQy9CLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRWpELElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE1BQU0sd0JBQXdCLENBQUMsbUJBQW1CLENBQUMsdUJBQXFCLEdBQUssQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7Ozs7O0lBTU0sbUJBQVMsR0FBaEIsVUFBaUIsVUFBa0I7UUFDL0IsSUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxJQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDL0M7YUFBTSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN4QixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUVNLHlDQUErQixHQUF0QyxVQUF1QyxTQUFlO1FBQ2xELE9BQU8sSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN4SDs7OztJQUtNLDZCQUFtQixHQUExQixVQUEyQixJQUFZOztRQUVuQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxFQUFFLENBQUM7U0FDYjs7UUFFRCxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDOztRQUU3QyxJQUFNLGdCQUFnQixHQUFvQyxXQUFXLENBQUMsbUJBQW1CLENBQWtDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDOztRQUVoTCxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDbkIsTUFBTSxlQUFlLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDMUY7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0tBQzNCOzs7O0lBS00scUNBQTJCLEdBQWxDLFVBQW1DLElBQVk7UUFDM0MsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBTSxVQUFVLEdBQW9DLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RixPQUFPLENBQUMsRUFDSixVQUFVLENBQUMsSUFBSTtZQUNmLFVBQVUsQ0FBQyxpQkFBaUI7WUFDNUIsVUFBVSxDQUFDLEtBQUs7WUFDaEIsVUFBVSxDQUFDLEtBQUssQ0FDbkIsQ0FBQztLQUNMO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDOztBQ3RORDs7Ozs7SUFjQTtLQWdHQzs7Ozs7O0lBeEZVLGdEQUErQixHQUF0QyxVQUF1QyxnQkFBK0IsRUFBRSxzQkFBOEI7UUFDbEcsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLE1BQU0sRUFBQztZQUNsQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7Z0JBQzdFLE1BQU0sd0JBQXdCLENBQUMsaURBQWlELEVBQUUsQ0FBQzthQUN0RjtZQUVELElBQUksQ0FBQyxnREFBZ0QsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRXhFLElBQUk7Z0JBQ0EsSUFBSSxzQkFBc0IsRUFBRTtvQkFDeEIsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBbUMsQ0FBQztvQkFDNUYsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDNUQ7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLE1BQU0sd0JBQXdCLENBQUMsd0NBQXdDLEVBQUUsQ0FBQzthQUM3RTtTQUNKO0tBQ0o7Ozs7O0lBTW1CLGlEQUFnQyxHQUFwRCxVQUFxRCxpQkFBNEIsRUFBRSxnQkFBZ0M7Ozs7Ozt3QkFDekcseUJBQXlCLEdBQUcsS0FBRyxTQUFTLENBQUMsNEJBQTRCLEdBQUcsaUJBQWlCLENBQUMsU0FBUywwQkFBdUIsQ0FBQzs7Ozt3QkFFNUcscUJBQU0sZ0JBQWdCLENBQUMsbUJBQW1CLENBQWlDLHlCQUF5QixDQUFDLEVBQUE7O3dCQUFoSCxRQUFRLEdBQUcsU0FBcUc7d0JBQ2hILFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzt3QkFDeEMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7O3dCQUUxQyxzQkFBTzs7d0JBR0wsSUFBSSxHQUFHLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLENBQUMsZUFBZSxDQUFDO3dCQUNsRSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUU7OzRCQUV6RSxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3lCQUNqRTs7Ozs7S0FDSjs7Ozs7SUFNYSwyQ0FBMEIsR0FBeEMsVUFBeUMsUUFBdUM7UUFDNUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFTLEtBQTZCO1lBQ25ELElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDbEMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFTLFNBQVM7Z0JBQ2xDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDckUsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ047Ozs7OztJQU9hLGlFQUFnRCxHQUE5RCxVQUErRCxnQkFBK0I7UUFBOUYsaUJBU0M7UUFSRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO1lBQzlCLElBQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM1RSxLQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxHQUFHO2dCQUNwQyxlQUFlLEVBQUUsZUFBZTtnQkFDaEMsaUJBQWlCLEVBQUUsZUFBZTtnQkFDbEMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO2FBQzdCLENBQUM7U0FDTCxDQUFDLENBQUM7S0FDTjtJQUVhLG1DQUFrQixHQUFoQztRQUNJLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDNUM7Ozs7O0lBTWEsMENBQXlCLEdBQXZDLFVBQXdDLElBQVk7UUFDaEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQztLQUMzRDs7Ozs7SUFNYSxvQ0FBbUIsR0FBakMsVUFBa0MsSUFBWTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUM3RTtJQTlGYyxnQ0FBZSxHQUF3QixFQUFFLENBQUM7SUErRjdELHVCQUFDO0NBaEdEOztBQ2RBOzs7O0FBS0EsQUFHQSxXQUFZLFlBQVk7SUFDcEIsMkJBQVcsQ0FBQTtJQUNYLDZCQUFhLENBQUE7QUFDakIsQ0FBQyxFQUhXQyxvQkFBWSxLQUFaQSxvQkFBWSxRQUd2Qjs7QUNYRDs7OztBQWlCQTs7OztBQUlBO0lBYUksbUJBQVksU0FBaUIsRUFBRSxnQkFBZ0MsRUFBRSxZQUEwQjtRQUN2RixJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFlBQVksQ0FBQztLQUM3QztJQUdELHNCQUFXLG9DQUFhOzthQUF4QjtZQUNJLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxZQUFZLENBQUM7WUFFdkUsSUFBSSxZQUFZLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUN6RSxPQUFPRCxxQkFBYSxDQUFDLElBQUksQ0FBQzthQUM3QjtZQUVELE9BQU9BLHFCQUFhLENBQUMsT0FBTyxDQUFDO1NBQ2hDOzs7T0FBQTtJQUtELHNCQUFXLG1DQUFZOzs7O2FBQXZCO1lBQ0ksT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7U0FDckM7OztPQUFBO0lBS0Qsc0JBQVcseUNBQWtCOzs7O2FBQTdCO1lBQ0ksT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDO1NBQzdDOzs7O2FBS0QsVUFBOEIsR0FBVztZQUNyQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxJQUFJLENBQUM7U0FDaEQ7OztPQVRBO0lBY0Qsc0JBQVcsc0RBQStCOzs7O2FBQTFDO1lBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3ZGO1lBRUQsT0FBTyxJQUFJLENBQUMsZ0NBQWdDLENBQUM7U0FDaEQ7OztPQUFBO0lBS0Qsc0JBQVcsNkJBQU07Ozs7YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7OztPQUFBO0lBS0Qsc0JBQVcsNENBQXFCOzs7O2FBQWhDO1lBQ0ksSUFBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtnQkFDekIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2FBQ2xGO2lCQUFNO2dCQUNILE1BQU0sZUFBZSxDQUFDLHNDQUFzQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7YUFDekY7U0FDSjs7O09BQUE7SUFLRCxzQkFBVyxvQ0FBYTs7OzthQUF4QjtZQUNJLElBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDMUU7aUJBQU07Z0JBQ0gsTUFBTSxlQUFlLENBQUMsc0NBQXNDLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUN6RjtTQUNKOzs7T0FBQTtJQUVELHNCQUFXLHlDQUFrQjthQUE3QjtZQUNJLElBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3ZGO2lCQUFNO2dCQUNILE1BQU0sZUFBZSxDQUFDLHNDQUFzQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7YUFDekY7U0FDSjs7O09BQUE7SUFLRCxzQkFBVyx5Q0FBa0I7Ozs7YUFBN0I7WUFDSSxJQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO2dCQUN6QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDaEY7aUJBQU07Z0JBQ0gsTUFBTSxlQUFlLENBQUMsc0NBQXNDLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUN6RjtTQUNKOzs7T0FBQTtJQUtELHNCQUFXLDRDQUFxQjs7OzthQUFoQztZQUNJLElBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbEU7aUJBQU07Z0JBQ0gsTUFBTSxlQUFlLENBQUMsc0NBQXNDLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUN6RjtTQUNKOzs7T0FBQTs7Ozs7SUFNTyxpQ0FBYSxHQUFyQixVQUFzQixTQUFpQjtRQUNuQyxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2pFO0lBS0Qsc0JBQWMseURBQWtDOzs7O2FBQWhEO1lBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLQSxxQkFBYSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLQyxvQkFBWSxDQUFDLElBQUksRUFBRTtnQkFDdEYsT0FBVSxJQUFJLENBQUMsa0JBQWtCLHFDQUFrQyxDQUFDO2FBQ3ZFO1lBQ0QsT0FBVSxJQUFJLENBQUMsa0JBQWtCLDBDQUF1QyxDQUFDO1NBQzVFOzs7T0FBQTs7OztJQUtELHFDQUFpQixHQUFqQjtRQUNJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztLQUN6Qzs7Ozs7SUFNYSxxQ0FBaUIsR0FBL0IsVUFBZ0MsMkJBQW1DOzs7Z0JBQy9ELHNCQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBdUIsMkJBQTJCLENBQUMsRUFBQzs7O0tBQ3ZHO0lBR0Qsc0JBQVksc0RBQStCOzthQUEzQztZQUNJLE9BQU8sS0FBRyxTQUFTLENBQUMsNEJBQTRCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQiwwQkFBdUIsQ0FBQztTQUNyRzs7O09BQUE7SUFFYSxrREFBOEIsR0FBNUM7Ozs7Ozt3QkFDVSxJQUFJLEdBQUcsSUFBSSxDQUFDLCtCQUErQixDQUFDLGVBQWUsQ0FBQzs4QkFDOUQsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFBLEVBQWxELHdCQUFrRDt3QkFDbEQscUJBQU0sZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFBOzt3QkFBeEcsU0FBd0csQ0FBQzs7O3dCQUc3RyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUU7NEJBQzdDLE1BQU0sd0JBQXdCLENBQUMsNkJBQTZCLEVBQUUsQ0FBQzt5QkFDbEU7d0JBRUssZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQWlCLENBQUM7d0JBQzVGLElBQUksSUFBSSxLQUFLLGdCQUFnQixFQUFFOzRCQUMzQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzt5QkFDckY7Ozs7O0tBQ0o7Ozs7SUFLWSx5Q0FBcUIsR0FBbEM7Ozs7OzRCQUNJLHFCQUFNLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxFQUFBOzt3QkFBM0MsU0FBMkMsQ0FBQzt3QkFDdEMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGtDQUFrQyxDQUFDO3dCQUNwRCxxQkFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsRUFBQTs7d0JBQTdELFFBQVEsR0FBRyxTQUFrRDt3QkFDbkUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7Ozs7O0tBQ2hEOzs7OztJQU1NLDBDQUFnQyxHQUF2QyxVQUF3QyxTQUFvQjtRQUN4RCxJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsK0JBQStCLENBQUMsZUFBZSxDQUFDO1FBQ2pGLE9BQU8sZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztLQUN2SjtJQUNMLGdCQUFDO0FBQUQsQ0FBQzs7QUN6TkQ7Ozs7QUFLQSxBQVlBOzs7OztBQUtBLFNBQWdCLGVBQWUsQ0FBQyxhQUFxQixFQUFFLE1BQWU7SUFDbEUsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sZUFBZSxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ25FO0lBRUQsSUFBSTtRQUNBLElBQU0saUJBQWlCLEdBQVcsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQWUsQ0FBQztLQUN0RDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxlQUFlLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUQ7QUFDTCxDQUFDOztBQ2pDRDs7OztBQUtBLEFBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7SUFBQTtLQWlMQzs7OztJQWpLRyx5Q0FBaUIsR0FBakI7UUFDSSxJQUFNLFNBQVMsR0FBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdkU7Ozs7SUFLRCwwQ0FBa0IsR0FBbEI7UUFDSSxPQUFPLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQztZQUN6QyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSztZQUNwQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDMUIsQ0FBQyxDQUFDO0tBQ047Ozs7SUFLRCxvQ0FBWSxHQUFaO1FBQ0ksUUFBUSxJQUFJLENBQUMsYUFBYTtZQUN0QixLQUFLLGdCQUFnQixDQUFDLGlCQUFpQjtnQkFDbkMsT0FBT0gsaUJBQVMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxnQkFBZ0IsQ0FBQyxrQkFBa0I7Z0JBQ3BDLE9BQU9BLGlCQUFTLENBQUMsR0FBRyxDQUFDO1lBQ3pCLEtBQUssZ0JBQWdCLENBQUMsa0JBQWtCO2dCQUNwQyxPQUFPQSxpQkFBUyxDQUFDLEtBQUssQ0FBQztZQUMzQixLQUFLLGdCQUFnQixDQUFDLG9CQUFvQjtnQkFDdEMsT0FBT0EsaUJBQVMsQ0FBQyxPQUFPLENBQUM7WUFDN0IsU0FBUztnQkFDTCxNQUFNLGVBQWUsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO2FBQzVEO1NBQ0o7S0FDSjs7OztJQUtELHNDQUFjLEdBQWQ7UUFDSSxPQUFPO1lBQ0gsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNsQixDQUFDO0tBQ0w7Ozs7O0lBTU0scUNBQXVCLEdBQTlCLFVBQStCLGdCQUE2QjtRQUN4RCxJQUFNLFVBQVUsR0FBRztZQUNmLGdCQUFnQixDQUFDLGFBQWE7WUFDOUIsZ0JBQWdCLENBQUMsV0FBVyxJQUFJLEVBQUU7WUFDbEMsZ0JBQWdCLENBQUMsUUFBUSxJQUFJLEVBQUU7U0FDbEMsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUN4RTs7Ozs7Ozs7SUFTTSwyQkFBYSxHQUFwQixVQUNJLFVBQWtCLEVBQ2xCLFNBQW9CLEVBQ3BCLE9BQWtCLEVBQ2xCLE1BQWUsRUFDZixZQUFxQjtRQUVyQixJQUFNLE9BQU8sR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUVuRCxPQUFPLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDO1FBQzVELE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQ2hDLElBQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUQsT0FBTyxDQUFDLGFBQWEsR0FBRyxLQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxJQUFNLENBQUM7UUFFdkcsSUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQixNQUFNLGVBQWUsQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDO1NBQzlEO1FBRUQsT0FBTyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7O1FBRTFCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLElBQUksT0FBTyxFQUFFOztZQUVULElBQU0sY0FBYyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztrQkFDekQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO2tCQUNsQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUN6QixPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQzs7Ozs7WUFNeEMsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFrQixLQUFLLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDdEM7UUFFRCxPQUFPLE9BQU8sQ0FBQztLQUNsQjs7Ozs7O0lBT00sa0NBQW9CLEdBQTNCLFVBQ0ksU0FBb0IsRUFDcEIsT0FBa0IsRUFDbEIsWUFBcUI7UUFFckIsSUFBTSxPQUFPLEdBQWtCLElBQUksYUFBYSxFQUFFLENBQUM7UUFFbkQsT0FBTyxDQUFDLGFBQWEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEtBQUtFLHFCQUFhLENBQUMsSUFBSSxJQUFJLGdCQUFnQixDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDO1FBQ3RKLE9BQU8sQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7O1FBRTNDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLElBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVsRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxlQUFlLENBQUMsa0NBQWtDLEVBQUUsQ0FBQztTQUM5RDtRQUVELE9BQU8sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7Ozs7O1FBTXRDLE9BQU8sT0FBTyxDQUFDO0tBQ2xCOzs7OztJQU1NLDZCQUFlLEdBQXRCLFVBQXVCLE1BQWM7UUFFakMsUUFDSSxNQUFNLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQztZQUN0QyxNQUFNLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQztZQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztZQUM5QixNQUFNLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQ3hDO0tBQ0w7SUFDTCxvQkFBQztBQUFELENBQUM7O0FDMU5EOzs7O0FBS0EsQUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTtJQUFBO0tBcURDOzs7O0lBN0NHLGtEQUFzQixHQUF0QjtRQUNJLE9BQU8saUJBQWlCLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekY7Ozs7SUFLTSw2Q0FBMkIsR0FBbEMsVUFBbUMsV0FBbUIsRUFBRSxRQUFnQjtRQUNwRSxJQUFNLG1CQUFtQixHQUFrQjtZQUN2QyxZQUFZO1lBQ1osV0FBVztZQUNYLFFBQVE7U0FDWCxDQUFDO1FBQ0YsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDakY7Ozs7Ozs7SUFRTSx5Q0FBdUIsR0FBOUIsVUFBK0IsUUFBZ0IsRUFBRSxXQUFtQixFQUFFLFFBQWlCO1FBQ25GLElBQU0sV0FBVyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUU1QyxXQUFXLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNoQyxXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUN0QyxJQUFJLFFBQVEsRUFBRTtZQUNWLFdBQVcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQ25DO1FBRUQsT0FBTyxXQUFXLENBQUM7S0FDdEI7Ozs7O0lBTU0scUNBQW1CLEdBQTFCLFVBQTJCLEdBQVcsRUFBRSxNQUFjO1FBQ2xELFFBQ0ksR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQ3RDO0tBQ0w7SUFDTCx3QkFBQztBQUFELENBQUM7O0FDMUVEOzs7O0FBc0JBOzs7QUFHQTtJQUFBO0tBbW9CQzs7OztJQTVsQkcscUNBQWMsR0FBZDtRQUNJLElBQU0sZUFBZSxHQUFpQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNuRSxJQUFNLGFBQWEsR0FBb0IsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxVQUFVLElBQUksT0FBQSxlQUFlLENBQUMsVUFBVSxDQUFDLEdBQUEsQ0FBQyxDQUFDO1FBQ25ILElBQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFDekMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNILElBQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQWMsVUFBQyxLQUFLO2dCQUNyRCxJQUFJLFVBQVUsR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztnQkFDcEQsVUFBVSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBa0IsQ0FBQztnQkFDdkUsT0FBTyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdEMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxXQUFXLENBQUM7U0FDdEI7S0FDSjs7Ozs7SUFNRCxzQ0FBZSxHQUFmLFVBQWdCLFdBQXdCO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCxNQUFNLGVBQWUsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1NBQzVEO1FBRUQsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRTtZQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqRDtLQUNKOzs7OztJQU1PLGtDQUFXLEdBQW5CLFVBQW9CLE9BQXNCO1FBQ3RDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRUgsdUJBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN2RDs7Ozs7SUFNTyxxQ0FBYyxHQUF0QixVQUF1QixVQUE0QjtRQUMvQyxJQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUVBLHVCQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDN0Q7Ozs7O0lBTU8sc0NBQWUsR0FBdkIsVUFBd0IsVUFBNkI7UUFBckQsaUJBbUJDO1FBbEJHLElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1lBQ3BELFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtZQUM3QixjQUFjLEVBQUVELHNCQUFjLENBQUMsWUFBWTtZQUMzQyxXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7WUFDbkMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxhQUFhO1lBQ3ZDLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSztTQUMxQixDQUFDLENBQUM7UUFDSCxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFNLG1CQUFtQixHQUF3QixNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBQSxDQUFDLENBQUM7UUFDN0ksSUFBSSxtQkFBbUIsRUFBRTtZQUNyQixtQkFBbUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxXQUFXO2dCQUNwQyxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxhQUFhLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3BELEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDdEM7YUFDSixDQUFDLENBQUM7U0FDTjtRQUNELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDbkM7Ozs7O0lBTUQsaUNBQVUsR0FBVixVQUFXLEdBQVc7O1FBRWxCLElBQUksZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlGLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1FBR0QsSUFBSSxNQUFxQixDQUFDO1FBQzFCLElBQUk7WUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUVDLHVCQUFlLENBQUMsT0FBTyxDQUFrQixDQUFDO1NBQ3hFO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQztTQUNmOztRQUdELElBQUksQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDdEQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCOzs7OztJQU1ELG9DQUFhLEdBQWIsVUFBYyxHQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUVBLHVCQUFlLENBQUMsVUFBVSxDQUFxQixDQUFDO0tBQzVFOzs7OztJQU1ELHFDQUFjLEdBQWQsVUFBZSxHQUFXO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUVBLHVCQUFlLENBQUMsWUFBWSxDQUFzQixDQUFDO0tBQy9FOzs7Ozs7OztJQVNELDRDQUFxQixHQUFyQixVQUFzQixhQUE2QjtRQUMvQyxPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FDckMsYUFBYSxHQUFHLGFBQWEsQ0FBQyxhQUFhLEdBQUcsRUFBRSxFQUNoRCxhQUFhLEdBQUcsYUFBYSxDQUFDLFdBQVcsR0FBRyxFQUFFLEVBQzlDLGFBQWEsR0FBRyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FDM0MsQ0FBQztLQUNMOzs7Ozs7OztJQVNPLG9EQUE2QixHQUFyQyxVQUNJLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLEtBQWM7UUFIbEIsaUJBK0JDO1FBMUJHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxJQUFNLGdCQUFnQixHQUFpQixFQUFFLENBQUM7UUFFMUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVE7WUFDMUIsSUFBTSxNQUFNLEdBQXlCLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFL0QsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDVCxPQUFPLElBQUksQ0FBQzthQUNmO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUFFO2dCQUN4RixPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEVBQUU7Z0JBQ2xGLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hFLE9BQU87YUFDVjtZQUVELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUN2QyxDQUFDLENBQUM7UUFFSCxPQUFPLGdCQUFnQixDQUFDO0tBQzNCOzs7Ozs7Ozs7O0lBV0QsK0NBQXdCLEdBQXhCLFVBQXlCLE1BQXdCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGdDQUFnQyxDQUN4QyxNQUFNLENBQUMsYUFBYSxFQUNwQixNQUFNLENBQUMsV0FBVyxFQUNsQixNQUFNLENBQUMsY0FBYyxFQUNyQixNQUFNLENBQUMsUUFBUSxFQUNmLE1BQU0sQ0FBQyxRQUFRLEVBQ2YsTUFBTSxDQUFDLEtBQUssRUFDWixNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxZQUFZLENBQ3RCLENBQUM7S0FDTDs7Ozs7Ozs7OztJQVdPLHVEQUFnQyxHQUF4QyxVQUNJLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLGNBQXVCLEVBQ3ZCLFFBQWlCLEVBQ2pCLFFBQWlCLEVBQ2pCLEtBQWMsRUFDZCxNQUFlLEVBQ2YsWUFBcUI7UUFSekIsaUJBa0ZDO1FBeEVHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxJQUFNLG1CQUFtQixHQUFvQjtZQUN6QyxRQUFRLEVBQUUsRUFBRTtZQUNaLFlBQVksRUFBRSxFQUFFO1lBQ2hCLGFBQWEsRUFBRSxFQUFFO1NBQ3BCLENBQUM7UUFFRixZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTtZQUMxQixJQUFJLE1BQXdCLENBQUM7O1lBRTdCLElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlELElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BDLE9BQU87YUFDVjs7WUFHRCxJQUFJO2dCQUNBLE1BQU0sR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRUEsdUJBQWUsQ0FBQyxVQUFVLENBQXFCLENBQUM7YUFDbkY7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQUU7Z0JBQ3JGLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsRUFBRTtnQkFDeEYsT0FBTzthQUNWO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFO2dCQUNsRixPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNoRSxPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEVBQUU7Z0JBQzNGLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pFLE9BQU87YUFDVjtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQ3pFLE9BQU87YUFDVjs7Ozs7WUFNRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUNuRSxPQUFPO2FBQ1Y7WUFFRCxRQUFRLFFBQVE7Z0JBQ1osS0FBS0Qsc0JBQWMsQ0FBQyxRQUFRO29CQUN4QixtQkFBbUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBdUIsQ0FBQztvQkFDakUsTUFBTTtnQkFDVixLQUFLQSxzQkFBYyxDQUFDLFlBQVk7b0JBQzVCLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUEyQixDQUFDO29CQUN6RSxNQUFNO2dCQUNWLEtBQUtBLHNCQUFjLENBQUMsYUFBYTtvQkFDN0IsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQTRCLENBQUM7b0JBQzNFLE1BQU07YUFDYjtTQUNKLENBQUMsQ0FBQztRQUVILE9BQU8sbUJBQW1CLENBQUM7S0FDOUI7Ozs7SUFLRCx3Q0FBaUIsR0FBakI7UUFBQSxpQkFXQztRQVZHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTtZQUMxQixJQUFNLE1BQU0sR0FBeUIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULE9BQU87YUFDVjtZQUNELEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7S0FDZjs7Ozs7SUFNRCxvQ0FBYSxHQUFiLFVBQWMsVUFBa0I7UUFDNUIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQWtCLENBQUM7UUFDN0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE1BQU0sZUFBZSxDQUFDLHlCQUF5QixFQUFFLENBQUM7U0FDckQ7UUFDRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRUMsdUJBQWUsQ0FBQyxPQUFPLENBQUMsRUFBRTtLQUN2Rzs7Ozs7SUFNRCwyQ0FBb0IsR0FBcEIsVUFBcUIsT0FBc0I7UUFBM0MsaUJBa0JDO1FBakJHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUU5QyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTs7WUFFMUIsSUFBSSxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUMsV0FBVyxFQUFFO2dCQUN4RSxPQUFPO2FBQ1Y7WUFFRCxJQUFNLFdBQVcsR0FBcUIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUVBLHVCQUFlLENBQUMsVUFBVSxDQUFxQixDQUFDO1lBRTdHLElBQUksQ0FBQyxDQUFDLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ2hFLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN0QztTQUNKLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0tBQ2Y7Ozs7O0lBTUQsdUNBQWdCLEdBQWhCLFVBQWlCLFVBQTRCO1FBQ3pDLElBQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUVBLHVCQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0Q7Ozs7SUFLRCx3Q0FBaUIsR0FBakI7UUFBQSxpQkFTQztRQVJHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTtZQUMxQixJQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzlCLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFQSx1QkFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzNEO1NBQ0osQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7S0FDZjs7Ozs7Ozs7SUFTRCxzQ0FBZSxHQUFmLFVBQWdCLE9BQW9CLEVBQUUsUUFBZ0IsRUFBRSxNQUFnQixFQUFFLFdBQW1CO1FBQ3pGLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkYsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwRixJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFL0UsT0FBTztZQUNILE9BQU8sRUFBRSxhQUFhO1lBQ3RCLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFdBQVcsRUFBRSxpQkFBaUI7WUFDOUIsWUFBWSxFQUFFLGtCQUFrQjtZQUNoQyxXQUFXLEVBQUUsaUJBQWlCO1NBQ2pDLENBQUM7S0FDTDs7Ozs7SUFNRCwyQ0FBb0IsR0FBcEIsVUFBcUIsT0FBb0I7UUFDckMsSUFBTSxVQUFVLEdBQVcsYUFBYSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN0Qzs7Ozs7OztJQVFELDJDQUFvQixHQUFwQixVQUFxQixRQUFnQixFQUFFLE9BQW9CO1FBQ3ZELElBQU0sVUFBVSxHQUFXLGdCQUFnQixDQUFDLDBCQUEwQixDQUNsRSxPQUFPLENBQUMsYUFBYSxFQUNyQixPQUFPLENBQUMsV0FBVyxFQUNuQkQsc0JBQWMsQ0FBQyxRQUFRLEVBQ3ZCLFFBQVEsRUFDUixPQUFPLENBQUMsUUFBUSxDQUNuQixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBa0IsQ0FBQztLQUMxRDs7Ozs7Ozs7SUFTRCwrQ0FBd0IsR0FBeEIsVUFBeUIsUUFBZ0IsRUFBRSxPQUFvQixFQUFFLE1BQWdCO1FBQzdFLElBQU0saUJBQWlCLEdBQXFCO1lBQ3hDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtZQUNwQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDaEMsY0FBYyxFQUFFQSxzQkFBYyxDQUFDLFlBQVk7WUFDM0MsUUFBUSxVQUFBO1lBQ1IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRO1lBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsb0JBQW9CLEVBQUU7U0FDeEMsQ0FBQztRQUVGLElBQU0sZUFBZSxHQUFvQixJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRixJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxlQUFlLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFBLENBQUMsQ0FBQztRQUUvRyxJQUFNLGVBQWUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzVDLElBQUksZUFBZSxHQUFHLENBQUMsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQztTQUNmO2FBQU0sSUFBSSxlQUFlLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sZUFBZSxDQUFDLHdDQUF3QyxFQUFFLENBQUM7U0FDcEU7UUFFRCxPQUFPLFlBQVksQ0FBQyxDQUFDLENBQXNCLENBQUM7S0FDL0M7Ozs7Ozs7SUFRRCxnREFBeUIsR0FBekIsVUFBMEIsUUFBZ0IsRUFBRSxPQUFvQixFQUFFLFFBQWlCO1FBQy9FLElBQU0sRUFBRSxHQUFHLFFBQVEsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzNDLElBQU0sa0JBQWtCLEdBQXFCO1lBQ3pDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtZQUNwQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDaEMsY0FBYyxFQUFFQSxzQkFBYyxDQUFDLGFBQWE7WUFDNUMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsUUFBUSxFQUFFLEVBQUU7U0FDZixDQUFDO1FBRUYsSUFBTSxlQUFlLEdBQW9CLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNGLElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLGVBQWUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUEsQ0FBQyxDQUFDO1FBRWxILElBQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUM5QyxJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmOztRQUdELE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBdUIsQ0FBQztLQUNqRDs7OztJQUtELCtDQUF3QixHQUF4QixVQUF5QixXQUFtQixFQUFFLFFBQWdCO1FBQzFELElBQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0RixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDeEM7Ozs7OztJQU9ELHdDQUFpQixHQUFqQixVQUFrQixXQUFtQixFQUFFLFFBQWdCO1FBQ25ELElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekUsT0FBTyxXQUFXLElBQUksV0FBVyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUM7S0FDaEU7Ozs7OztJQU9PLHlDQUFrQixHQUExQixVQUEyQixNQUF3QyxFQUFFLGFBQXFCO1FBQ3RGLE9BQU8sTUFBTSxDQUFDLGFBQWEsSUFBSSxhQUFhLEtBQUssTUFBTSxDQUFDLGFBQWEsQ0FBQztLQUN6RTs7Ozs7O0lBT08sd0NBQWlCLEdBQXpCLFVBQTBCLE1BQXdDLEVBQUUsWUFBb0I7UUFDcEYsT0FBTyxNQUFNLENBQUMsWUFBWSxJQUFJLFlBQVksS0FBSyxNQUFNLENBQUMsWUFBWSxDQUFDO0tBQ3RFOzs7Ozs7SUFPTyx1Q0FBZ0IsR0FBeEIsVUFBeUIsTUFBNEQsRUFBRSxXQUFtQjtRQUN0RyxJQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5RSxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDekUsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sS0FBSyxDQUFDO0tBQ2hCOzs7Ozs7SUFPTywwQ0FBbUIsR0FBM0IsVUFBNEIsTUFBd0IsRUFBRSxjQUFzQjtRQUN4RSxRQUFRLE1BQU0sQ0FBQyxjQUFjLElBQUksY0FBYyxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLEVBQUU7S0FDMUc7Ozs7OztJQU9PLG9DQUFhLEdBQXJCLFVBQXNCLE1BQTRDLEVBQUUsUUFBZ0I7UUFDaEYsT0FBTyxNQUFNLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDO0tBQzFEOzs7Ozs7SUFPTyxvQ0FBYSxHQUFyQixVQUFzQixNQUE0QyxFQUFFLFFBQWdCO1FBQ2hGLE9BQU8sTUFBTSxDQUFDLFFBQVEsSUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUMxRDs7Ozs7O0lBT08saUNBQVUsR0FBbEIsVUFBbUIsTUFBd0MsRUFBRSxLQUFhO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNqRDs7Ozs7O0lBT08sa0NBQVcsR0FBbkIsVUFBb0IsTUFBd0IsRUFBRSxNQUFjO1FBQ3hELElBQUksTUFBTSxDQUFDLGNBQWMsS0FBS0Esc0JBQWMsQ0FBQyxZQUFZLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0YsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFNLGNBQWMsR0FBYSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRSxJQUFNLHFCQUFxQixHQUFhLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLHlCQUF5QixFQUFFLEVBQUU7WUFDcEQscUJBQXFCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUMvQztRQUNELE9BQU8sY0FBYyxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUM7S0FDakU7Ozs7O0lBTU8sb0NBQWEsR0FBckIsVUFBc0IsR0FBVztRQUM3QixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDM0M7Ozs7OztJQU9NLHFCQUFRLEdBQWYsVUFBbUIsR0FBTSxFQUFFLElBQVk7UUFDbkMsS0FBSyxJQUFNLFlBQVksSUFBSSxJQUFJLEVBQUU7WUFDN0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sR0FBRyxDQUFDO0tBQ2Q7SUFDTCxtQkFBQztBQUFELENBQUMsSUFBQTtBQUVEO0lBQXlDLHVDQUFZO0lBQXJEOztLQXlCQztJQXhCRyxxQ0FBTyxHQUFQO1FBQ0ksSUFBTSxVQUFVLEdBQUcsd0ZBQXdGLENBQUM7UUFDNUcsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCxxQ0FBTyxHQUFQO1FBQ0ksSUFBTSxVQUFVLEdBQUcsd0ZBQXdGLENBQUM7UUFDNUcsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCx3Q0FBVSxHQUFWO1FBQ0ksSUFBTSxVQUFVLEdBQUcsMkZBQTJGLENBQUM7UUFDL0csTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCx5Q0FBVyxHQUFYO1FBQ0ksSUFBTSxVQUFVLEdBQUcsNEZBQTRGLENBQUM7UUFDaEgsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCxxQ0FBTyxHQUFQO1FBQ0ksSUFBTSxVQUFVLEdBQUcsd0ZBQXdGLENBQUM7UUFDNUcsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCxtQ0FBSyxHQUFMO1FBQ0ksSUFBTSxVQUFVLEdBQUcsc0ZBQXNGLENBQUM7UUFDMUcsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDTCwwQkFBQztBQUFELENBekJBLENBQXlDLFlBQVksR0F5QnBEOztBQ3ZyQkQ7Ozs7QUFrQkE7QUFDQSxJQUFNLGdDQUFnQyxHQUFHLEdBQUcsQ0FBQztBQTJGN0MsSUFBTSxvQkFBb0IsR0FBZ0I7SUFDdEMsUUFBUSxFQUFFLEVBQUU7SUFDWixTQUFTLEVBQUUsSUFBSTtJQUNmLGdCQUFnQixFQUFFLEVBQUU7SUFDcEIsc0JBQXNCLEVBQUUsRUFBRTtJQUMxQixrQkFBa0IsRUFBRSxFQUFFO0lBQ3RCLFlBQVksRUFBRUssb0JBQVksQ0FBQyxHQUFHO0NBQ2pDLENBQUM7QUFFRixJQUFhLHNCQUFzQixHQUFrQjtJQUNqRCx5QkFBeUIsRUFBRSxnQ0FBZ0M7Q0FDOUQsQ0FBQztBQUVGLElBQU0sNkJBQTZCLEdBQWtCO0lBQ2pELGNBQWMsRUFBRTs7S0FFZjtJQUNELGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsUUFBUSxFQUFFUixnQkFBUSxDQUFDLElBQUk7Q0FDMUIsQ0FBQztBQUVGLElBQU0sOEJBQThCLEdBQW1CO0lBQzdDLG1CQUFtQixFQUF6Qjs7OztnQkFDVSxVQUFVLEdBQUcsb0VBQW9FLENBQUM7Z0JBQ3hGLE1BQU0sU0FBUyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7S0FDckQ7SUFDSyxvQkFBb0IsRUFBMUI7Ozs7Z0JBQ1UsVUFBVSxHQUFHLHFFQUFxRSxDQUFDO2dCQUN6RixNQUFNLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQzs7O0tBQ3JEO0NBQ0osQ0FBQztBQUVGLElBQU0sNkJBQTZCLEdBQVk7SUFDM0MsYUFBYSxFQUFFO1FBQ1gsSUFBTSxVQUFVLEdBQUcsNkRBQTZELENBQUM7UUFDakYsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFDRCxZQUFZLEVBQUU7UUFDVixJQUFNLFVBQVUsR0FBRyw0REFBNEQsQ0FBQztRQUNoRixNQUFNLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNyRDtJQUNELFlBQVksRUFBRTtRQUNWLElBQU0sVUFBVSxHQUFHLDREQUE0RCxDQUFDO1FBQ2hGLE1BQU0sU0FBUyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JEO0lBQ0ssaUJBQWlCLEVBQXZCOzs7O2dCQUNVLFVBQVUsR0FBRyxpRUFBaUUsQ0FBQztnQkFDckYsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7OztLQUNyRDtJQUNLLHNCQUFzQixFQUE1Qjs7OztnQkFDVSxVQUFVLEdBQUcsc0VBQXNFLENBQUM7Z0JBQzFGLE1BQU0sU0FBUyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7S0FDckQ7SUFDSyxPQUFPLEVBQWI7Ozs7Z0JBQ1UsVUFBVSxHQUFHLHVEQUF1RCxDQUFDO2dCQUMzRSxNQUFNLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQzs7O0tBQ3JEO0NBQ0osQ0FBQztBQUVGLElBQU0sb0JBQW9CLEdBQWdCO0lBQ3RDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRztJQUNsQixPQUFPLEVBQUUsT0FBTztJQUNoQixHQUFHLEVBQUUsRUFBRTtJQUNQLEVBQUUsRUFBRSxFQUFFO0NBQ1QsQ0FBQztBQUVGLElBQU0sMEJBQTBCLEdBQXNCO0lBQ2xELFlBQVksRUFBRSxFQUFFO0lBQ2hCLGVBQWUsRUFBRSxJQUFJO0NBQ3hCLENBQUM7QUFFRjs7Ozs7OztBQU9BLFNBQWdCLHdCQUF3QixDQUNwQyxFQVl1QjtRQVhuQixnQ0FBNEIsRUFDNUIsb0NBQWdDLEVBQ2hDLG1DQUErQixFQUMvQiwyQ0FBdUMsRUFDdkMsMkNBQXVDLEVBQ3ZDLHlDQUFxQyxFQUNyQyx3Q0FBb0MsRUFDcEMsNEJBQXdCLEVBQ3hCLGtEQUE4QyxFQUM5Qyx3Q0FBb0MsRUFDcEMsd0NBQW9DO0lBRXhDLE9BQU87UUFDSCxXQUFXLHdCQUFPLG9CQUFvQixHQUFLLGVBQWUsQ0FBRTtRQUM1RCxhQUFhLHdCQUFPLHNCQUFzQixHQUFLLGlCQUFpQixDQUFFO1FBQ2xFLGFBQWEsd0JBQU8sNkJBQTZCLEdBQUssZ0JBQWdCLENBQUU7UUFDeEUsZ0JBQWdCLEVBQUUscUJBQXFCLElBQUksSUFBSSxtQkFBbUIsRUFBRTtRQUNwRSxnQkFBZ0IsRUFBRSxxQkFBcUIsSUFBSSw4QkFBOEI7UUFDekUsZUFBZSxFQUFFLG9CQUFvQixJQUFJLDZCQUE2QjtRQUN0RSxpQkFBaUIsRUFBRSxpQkFBaUIsSUFBSSwwQkFBMEI7UUFDbEUsV0FBVyx3QkFBTyxvQkFBb0IsR0FBSyxXQUFXLENBQUU7UUFDeEQsc0JBQXNCLEVBQUUsc0JBQXNCLElBQUksSUFBSTtRQUN0RCxpQkFBaUIsRUFBRSxpQkFBaUIsSUFBSSxJQUFJO1FBQzVDLGlCQUFpQixFQUFFLGlCQUFpQixJQUFJLElBQUk7S0FDL0MsQ0FBQztBQUNOLENBQUM7O0FDdk5EOzs7O0FBT0E7OztBQUdBO0lBQWlDLCtCQUFTO0lBSXRDLHFCQUFZLFNBQWlCLEVBQUUsWUFBcUIsRUFBRSxRQUFpQjtRQUF2RSxZQUNJLGtCQUFNLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FLakM7UUFKRyxLQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztRQUMxQixLQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUV6QixNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUksRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7O0tBQ3REO0lBQ0wsa0JBQUM7QUFBRCxDQVhBLENBQWlDLFNBQVM7O0FDVjFDOzs7O0FBT0E7SUFNQTtLQWdHQzs7Ozs7SUExRlUsNENBQTRCLEdBQW5DLFVBQW9DLFVBQTZCO1FBQzdELE9BQVUsbUJBQW1CLENBQUMsaUJBQWlCLFNBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUcsQ0FBQztLQUNuRjs7Ozs7O0lBT00sMEJBQVUsR0FBakIsVUFBa0IsWUFBMEIsRUFBRSxVQUE2QjtRQUN2RSxJQUFNLEdBQUcsR0FBRyxlQUFlLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckUsSUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUVJLHVCQUFlLENBQUMsVUFBVSxDQUFxQixDQUFDO1FBRXhGLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDakMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUVBLHVCQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3pELE9BQU87YUFDVjtZQUNELE1BQU0sSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekY7S0FDSjs7Ozs7OztJQVFNLDJCQUFXLEdBQWxCLFVBQW1CLFlBQTBCLEVBQUUsVUFBNkIsRUFBRSxRQUEyRDtRQUNySSxJQUFJLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxlQUFlLENBQUMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdkcsSUFBTSxlQUFlLEdBQXFCO2dCQUN0QyxZQUFZLEVBQUUsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUN4RyxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLO2dCQUMxQixVQUFVLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXO2dCQUNyQyxZQUFZLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUI7Z0JBQzdDLFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVE7YUFDbkMsQ0FBQztZQUNGLFlBQVksQ0FBQyxPQUFPLENBQ2hCLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsRUFDeEQsZUFBZSxFQUNmQSx1QkFBZSxDQUFDLFVBQVUsQ0FDN0IsQ0FBQztTQUNMO0tBQ0o7Ozs7O0lBTU0sbUNBQW1CLEdBQTFCLFVBQTJCLFFBQTJEO1FBQ2xGLE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7S0FDcEY7Ozs7O0lBTU0sMENBQTBCLEdBQWpDLFVBQWtDLFFBQTJEO1FBQ3pGLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUNsQixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ3hIO1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDaEI7Ozs7O0lBTU0scUNBQXFCLEdBQTVCLFVBQTZCLFlBQW9CO1FBQzdDLElBQUcsWUFBWSxJQUFJLENBQUMsRUFBRTtZQUNsQixZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDdEIsY0FBYyxJQUFJLFlBQVksSUFBSSxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FBQyxFQUNwRixjQUFjLEdBQUcsbUJBQW1CLENBQUMsaUNBQWlDLENBQ3pFLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDYjtJQUVNLDhCQUFjLEdBQXJCLFVBQXNCLFlBQTBCLEVBQUUsUUFBZ0IsRUFBRSxTQUFpQixFQUFFLE1BQXFCLEVBQUUscUJBQThCO1FBQ3hJLElBQU0sVUFBVSxHQUFzQjtZQUNsQyxRQUFRLFVBQUE7WUFDUixTQUFTLFdBQUE7WUFDVCxNQUFNLFFBQUE7WUFDTixxQkFBcUIsdUJBQUE7U0FDeEIsQ0FBQztRQUVGLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRCxPQUFPLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFQSx1QkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ25FO0lBQ0wsc0JBQUM7QUFBRCxDQUFDOztBQzdHRDs7Ozs7SUFvQkksd0JBQVksYUFBNkIsRUFBRSxZQUEwQjtRQUNqRSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztLQUNwQzs7Ozs7OztJQVFLLHdDQUFlLEdBQXJCLFVBQXlCLFVBQTZCLEVBQUUsYUFBcUIsRUFBRSxPQUE4Qjs7Ozs7O3dCQUN6RyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7d0JBQ3pDLHFCQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUksYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFBOzt3QkFBbkYsUUFBUSxHQUFHLFNBQXdFO3dCQUN6RixlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDOzt3QkFJckUsc0JBQU8sUUFBUSxFQUFDOzs7O0tBQ25CO0lBQ0wscUJBQUM7QUFBRCxDQUFDOztBQ3hDRDs7OztBQWtCQTs7O0FBR0E7SUF5Qkksb0JBQXNCLGFBQWtDOztRQUVwRCxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDOztRQUd0RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7O1FBR3BELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7O1FBRy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQzs7UUFHakQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDOztRQUdsRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDOztRQUdoRixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztRQUVqRSxnQkFBZ0IsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRTNJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO0tBQ3REOzs7O0lBS1MscURBQWdDLEdBQTFDO1FBQ0ksSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7UUFDbkQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxTQUFTLENBQUMscUJBQXFCLENBQUM7UUFDcEUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztRQUVqRixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUM3QixPQUFPLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlDQUFpQyxFQUFFLENBQUM7WUFDM0csT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1NBQzNHO1FBRUQsT0FBTyxPQUFPLENBQUM7S0FDbEI7Ozs7SUFLUyxnREFBMkIsR0FBckM7UUFDSSxJQUFNLE9BQU8sR0FBMkIsRUFBRSxDQUFDOztRQUczQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO1FBQ3ZFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDM0UsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUNyRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO1FBRXZFLE9BQU8sT0FBTyxDQUFDO0tBQ2xCOzs7Ozs7OztJQVNlLCtDQUEwQixHQUExQyxVQUEyQyxhQUFxQixFQUFFLFdBQW1CLEVBQUUsT0FBK0IsRUFBRSxVQUE2Qjs7Ozs7NEJBQ2hJLHFCQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUN0RCxVQUFVLEVBQ1YsYUFBYSxFQUNiLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQzFDLEVBQUE7O3dCQUpLLFFBQVEsR0FBRyxTQUloQjt3QkFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7OzRCQUV4RixJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixFQUFFLENBQUM7eUJBQzVEO3dCQUVELHNCQUFPLFFBQVEsRUFBQzs7OztLQUNuQjtJQUNMLGlCQUFDO0FBQUQsQ0FBQyxJQUFBOztBQzdIRDs7OztBQUtBLEFBS0E7OztBQUdBO0lBQUE7S0FtRkM7Ozs7O0lBN0VVLG9DQUFtQixHQUExQixVQUEyQixXQUFtQjtRQUMxQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEMsTUFBTSx3QkFBd0IsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1NBQ2hFO0tBQ0o7Ozs7O0lBTU0sK0JBQWMsR0FBckIsVUFBc0IsTUFBYztRQUNoQyxJQUNJO1lBQ0ksV0FBVyxDQUFDLEtBQUs7WUFDakIsV0FBVyxDQUFDLGNBQWM7WUFDMUIsV0FBVyxDQUFDLE9BQU87WUFDbkIsV0FBVyxDQUFDLElBQUk7U0FDbkIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUN2QjtZQUNFLE1BQU0sd0JBQXdCLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkU7S0FDSjtJQUVNLCtCQUFjLEdBQXJCLFVBQXNCLE1BQWM7UUFDaEMsSUFBSTtZQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7UUFBQyxPQUFNLENBQUMsRUFBRTtZQUNQLE1BQU0sd0JBQXdCLENBQUMsK0JBQStCLEVBQUUsQ0FBQztTQUNwRTtLQUNKOzs7Ozs7SUFPTSw0Q0FBMkIsR0FBbEMsVUFBbUMsYUFBcUIsRUFBRSxtQkFBMkI7UUFDakYsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUNoRixNQUFNLHdCQUF3QixDQUFDLHFDQUFxQyxFQUFFLENBQUM7U0FDMUU7YUFBTTtZQUNILElBQUksQ0FBQywyQkFBMkIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3pEO0tBQ0o7Ozs7O0lBTU0sNENBQTJCLEdBQWxDLFVBQW1DLG1CQUEyQjtRQUMxRCxJQUNJO1lBQ0kseUJBQXlCLENBQUMsS0FBSztZQUMvQix5QkFBeUIsQ0FBQyxJQUFJO1NBQ2pDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUNwQztZQUNFLE1BQU0sd0JBQXdCLENBQUMscUNBQXFDLEVBQUUsQ0FBQztTQUMxRTtLQUNKOzs7OztJQU1NLGlDQUFnQixHQUF2QixVQUF3QixRQUFvQixFQUFFLFdBQWdDO1FBQzFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQztTQUNmOztRQUdELFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUUsR0FBRztZQUMzQixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDZixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QjtTQUNKLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0tBQ25CO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLElBQUE7O0FDaEdEOzs7O0FBYUE7SUFJSTtRQUNJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7S0FDL0M7Ozs7SUFLRCxxREFBbUIsR0FBbkI7UUFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FDZixrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQ3JGLENBQUM7S0FDTDs7Ozs7SUFNRCxpREFBZSxHQUFmLFVBQWdCLFlBQTJCO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUNmLGtCQUFrQixDQUFDLGFBQWEsRUFDaEMsa0JBQWtCLENBQUMsQ0FBQyxZQUFZLElBQUksWUFBWSxHQUFHRixvQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUN6RSxDQUFDO0tBQ0w7Ozs7OztJQU9ELDJDQUFTLEdBQVQsVUFBVSxNQUFnQixFQUFFLGFBQTZCO1FBQTdCLDhCQUFBLEVBQUEsb0JBQTZCO1FBQ3JELElBQU0sYUFBYSxHQUFHLGFBQWEsa0JBQU8sTUFBTSxJQUFJLEVBQUUsR0FBRSxTQUFTLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxhQUFhLEtBQUksTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUN4SCxJQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM3Rjs7Ozs7SUFNRCw2Q0FBVyxHQUFYLFVBQVksUUFBZ0I7UUFDeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDbkY7Ozs7O0lBTUQsZ0RBQWMsR0FBZCxVQUFlLFdBQW1CO1FBQzlCLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0tBQ3pGOzs7OztJQU1ELCtDQUFhLEdBQWIsVUFBYyxVQUFrQjtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FDN0U7Ozs7O0lBTUQsOENBQVksR0FBWixVQUFhLFNBQWlCO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztLQUMzRTs7Ozs7SUFNRCx3Q0FBTSxHQUFOLFVBQU8sR0FBVztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUM5RDs7Ozs7SUFNRCwyQ0FBUyxHQUFULFVBQVUsTUFBYyxFQUFFLGtCQUFpQztRQUN2RCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDcEYsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0tBQ3BGOzs7OztJQU1ELGtEQUFnQixHQUFoQixVQUFpQixhQUFxQjtRQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0tBQ2hHOzs7OztJQU1ELGdEQUFjLEdBQWQsVUFBZSxXQUF3Qjs7UUFFbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN6RTs7Ozs7SUFNRCwyQ0FBUyxHQUFULFVBQVUsTUFBYztRQUNwQixnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBRyxrQkFBa0IsQ0FBQyxNQUFRLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNuRjs7Ozs7SUFNRCwwQ0FBUSxHQUFSLFVBQVMsS0FBYTtRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUM1RTtLQUNKOzs7OztJQU1ELDBDQUFRLEdBQVIsVUFBUyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQzVFOzs7Ozs7O0lBUUQsd0RBQXNCLEdBQXRCLFVBQ0ksYUFBcUIsRUFDckIsbUJBQTJCO1FBRTNCLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLGFBQWEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2pGLElBQUksYUFBYSxJQUFJLG1CQUFtQixFQUFFO1lBQ3RDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQzFGLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztTQUMxRzthQUFNO1lBQ0gsTUFBTSx3QkFBd0IsQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO1NBQzFFO0tBQ0o7Ozs7O0lBTUQsc0RBQW9CLEdBQXBCLFVBQXFCLElBQVk7UUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDMUU7Ozs7O0lBTUQsK0NBQWEsR0FBYixVQUFjLElBQVk7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDakY7Ozs7O0lBTUQsaURBQWUsR0FBZixVQUFnQixZQUFvQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUMzRjs7Ozs7SUFNRCxpREFBZSxHQUFmLFVBQWdCLFlBQW9CO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0tBQzNGOzs7OztJQU1ELGlEQUFlLEdBQWYsVUFBZ0IsWUFBb0I7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7S0FDM0Y7Ozs7O0lBTUQsb0RBQWtCLEdBQWxCLFVBQW1CLGVBQXVCO1FBQ3RDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7S0FDakc7Ozs7O0lBTUQsd0RBQXNCLEdBQXRCLFVBQXVCLG1CQUEyQjtRQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxxQkFBcUIsRUFBRSxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7S0FDMUc7Ozs7O0lBTUQsaURBQWUsR0FBZixVQUFnQixZQUFvQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUMzRjs7Ozs7SUFNRCxvREFBa0IsR0FBbEIsVUFBbUIsUUFBZ0I7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUM3Rjs7Ozs7SUFNRCw4Q0FBWSxHQUFaLFVBQWEsU0FBaUI7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDckY7Ozs7O0lBTUQsK0NBQWEsR0FBYjtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN4Qzs7Ozs7SUFNRCx5REFBdUIsR0FBdkIsVUFBd0IsUUFBb0I7UUFBNUMsaUJBS0M7UUFKRyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztZQUM5QixLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDM0MsQ0FBQyxDQUFDO0tBQ047SUFFRCwrREFBNkIsR0FBN0IsVUFBOEIsTUFBYyxFQUFFLGtCQUFpQztRQUMzRSxJQUFJLFlBQW9CLENBQUM7O1FBR3pCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM3QixZQUFZLEdBQUcsRUFBRSxDQUFDO1NBQ3JCO2FBQU07WUFDSCxJQUFJO2dCQUNBLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3JDO1lBQUMsT0FBTSxDQUFDLEVBQUU7Z0JBQ1AsTUFBTSx3QkFBd0IsQ0FBQywrQkFBK0IsRUFBRSxDQUFDO2FBQ3BFO1NBQ0o7UUFFRCxJQUFJLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEVBQUM7O2dCQUU3RCxZQUFZLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQ3JEOztZQUdELFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRztnQkFDckUsTUFBTSxFQUFFLGtCQUFrQjthQUM3QixDQUFDO1NBQ0w7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDdkM7Ozs7O0lBTUQsNkNBQVcsR0FBWCxVQUFZLFNBQWlCO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRUksNEJBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDbEY7S0FDSjs7OztJQUtELG1EQUFpQixHQUFqQjtRQUNJLElBQU0sbUJBQW1CLEdBQWtCLElBQUksS0FBSyxFQUFVLENBQUM7UUFFL0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLLEVBQUUsR0FBRztZQUMvQixtQkFBbUIsQ0FBQyxJQUFJLENBQUksR0FBRyxTQUFJLEtBQU8sQ0FBQyxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE9BQU8sbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3hDO0lBQ0wsOEJBQUM7QUFBRCxDQUFDLElBQUE7O0FDaFVEOzs7O0FBT0EsQUFJQTs7O0FBR0E7SUFNSSxtQkFBWSxRQUFnQixFQUFFLE1BQWU7UUFDekMsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sZUFBZSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9EO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2hFOzs7Ozs7SUFPTSw0QkFBa0IsR0FBekIsVUFBMEIsWUFBb0IsRUFBRSxNQUFlOztRQUUzRCxJQUFNLFlBQVksR0FBcUIsV0FBVyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELElBQUk7WUFDQSxJQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUM7O1lBRW5ELElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUM5RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFnQixDQUFDO1NBQ25EO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0RDtLQUNKO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDOztBQ2pERDs7OztBQUtBOzs7QUFHQTtJQUFBO0tBc0JDOzs7O0lBakJVLG9CQUFVLEdBQWpCOztRQUVJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0tBQ3BEOzs7OztJQU1NLHdCQUFjLEdBQXJCLFVBQXNCLFNBQWlCLEVBQUUsTUFBYzs7UUFFbkQsSUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFNLG9CQUFvQixHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUM7O1FBRzdELFFBQVEsb0JBQW9CLEdBQUcsYUFBYSxFQUFFO0tBQ2pEO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDOztBQzlCRDs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTtJQUFtQyxpQ0FBZ0I7SUFBbkQ7O0tBK0NDOzs7Ozs7OztJQXJDVSxpQ0FBbUIsR0FBMUIsVUFDSSxhQUFxQixFQUNyQixXQUFtQixFQUNuQixPQUFlLEVBQ2YsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsWUFBcUI7UUFFckIsSUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUUxQyxhQUFhLENBQUMsY0FBYyxHQUFHSCxzQkFBYyxDQUFDLFFBQVEsQ0FBQztRQUN2RCxhQUFhLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUM1QyxhQUFhLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUN4QyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNsQyxhQUFhLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUMvQixhQUFhLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUMvQixhQUFhLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUUxQyxPQUFPLGFBQWEsQ0FBQztLQUN4Qjs7Ozs7SUFNTSw2QkFBZSxHQUF0QixVQUF1QixNQUFjO1FBRWpDLFFBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUM7WUFDdEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7WUFDcEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztZQUN2QyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztZQUM5QixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQztZQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztZQUMvQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBS0Esc0JBQWMsQ0FBQyxRQUFRLEVBQ3REO0tBQ0w7SUFDTCxvQkFBQztBQUFELENBL0NBLENBQW1DLGdCQUFnQjs7QUN6Qm5EOzs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTtJQUF1QyxxQ0FBZ0I7SUFBdkQ7O0tBNEVDOzs7Ozs7Ozs7Ozs7SUF2RFUseUNBQXVCLEdBQTlCLFVBQ0ksYUFBcUIsRUFDckIsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLFlBQW9CLEVBQ3BCLFNBQWtCLEVBQ2xCLFlBQXFCO1FBRXJCLElBQU0sUUFBUSxHQUFzQixJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFFNUQsUUFBUSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDdkMsUUFBUSxDQUFDLGNBQWMsR0FBR0Esc0JBQWMsQ0FBQyxZQUFZLENBQUM7UUFDdEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUM7UUFFOUIsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzNDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDOzs7OztRQU0zQyxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQyxRQUFRLENBQUMsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXJELFFBQVEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQ25DLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzdCLFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQzFCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLFFBQVEsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXJDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBR0csNEJBQW9CLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUM5RixPQUFPLFFBQVEsQ0FBQztLQUNuQjs7Ozs7SUFNTSxxQ0FBbUIsR0FBMUIsVUFBMkIsTUFBYztRQUVyQyxRQUNJLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7WUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDOUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFDakMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUtILHNCQUFjLENBQUMsWUFBWSxFQUMxRDtLQUNMO0lBQ0wsd0JBQUM7QUFBRCxDQTVFQSxDQUF1QyxnQkFBZ0I7O0FDbEN2RDs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBO0lBQXdDLHNDQUFnQjtJQUF4RDs7S0FnREM7Ozs7Ozs7O0lBdENVLDJDQUF3QixHQUEvQixVQUNJLGFBQXFCLEVBQ3JCLFdBQW1CLEVBQ25CLFlBQW9CLEVBQ3BCLFFBQWdCLEVBQ2hCLFFBQWlCLEVBQ2pCLFlBQXFCO1FBRXJCLElBQU0sUUFBUSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQUUxQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUM3QixRQUFRLENBQUMsY0FBYyxHQUFHQSxzQkFBYyxDQUFDLGFBQWEsQ0FBQztRQUN2RCxRQUFRLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNuQyxRQUFRLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUN2QyxRQUFRLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztRQUMvQixRQUFRLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUVyQyxJQUFJLFFBQVE7WUFDUixRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUVqQyxPQUFPLFFBQVEsQ0FBQztLQUNuQjs7Ozs7SUFNTSx1Q0FBb0IsR0FBM0IsVUFBNEIsTUFBYztRQUV0QyxRQUNJLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7WUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFDakMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUtBLHNCQUFjLENBQUMsYUFBYSxFQUMzRDtLQUNMO0lBQ0wseUJBQUM7QUFBRCxDQWhEQSxDQUF3QyxnQkFBZ0I7O0FDM0J4RDs7OztBQVFBOzs7QUFHQSxBQUFPLElBQU0sbUNBQW1DLEdBQUc7SUFDL0Msc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixnQkFBZ0I7Q0FDbkIsQ0FBQztBQUVGLEFBQU8sSUFBTSxzQ0FBc0MsR0FBRztJQUNsRCxjQUFjO0lBQ2QsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsa0JBQWtCO0NBQ3JCLENBQUM7QUFFRjs7O0FBR0E7SUFBa0QsZ0RBQVc7SUFFekQsc0NBQVksU0FBaUIsRUFBRSxZQUFxQixFQUFFLFFBQWlCO1FBQXZFLFlBQ0ksa0JBQU0sU0FBUyxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsU0FJM0M7UUFIRyxLQUFJLENBQUMsSUFBSSxHQUFHLDhCQUE4QixDQUFDO1FBRTNDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSSxFQUFFLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxDQUFDOztLQUN2RTtJQUVNLHVEQUEwQixHQUFqQyxVQUFrQyxTQUFpQixFQUFFLFdBQW1CLEVBQUUsUUFBaUI7UUFDdkYsSUFBTSw4QkFBOEIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksbUNBQW1DLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RJLElBQU0sNkJBQTZCLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLHNDQUFzQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0SSxJQUFNLDhCQUE4QixHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxXQUFXO1lBQzdILE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRCxDQUFDLENBQUM7UUFFSCxPQUFPLDhCQUE4QixJQUFJLDhCQUE4QixJQUFJLDZCQUE2QixDQUFDO0tBQzVHO0lBQ0wsbUNBQUM7QUFBRCxDQWxCQSxDQUFrRCxXQUFXOztBQzVCN0Q7Ozs7QUFXQTtJQU9JLHFCQUFZLGFBQTZCLEVBQUUsYUFBNkIsRUFBRSxpQkFBcUMsRUFBRSxrQkFBdUMsRUFBRSxpQkFBcUM7UUFDM0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLGtCQUFrQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsaUJBQWlCLENBQUM7S0FDeEM7SUFDTCxrQkFBQztBQUFELENBQUMsSUFBQTs7QUN6QkQ7Ozs7QUFLQSxBQTJCQTs7O0FBR0E7SUFBQTtLQWtFQzs7Ozs7O0lBM0RVLDZCQUFlLEdBQXRCLFVBQXVCLFNBQWtCLEVBQUUsU0FBa0IsRUFBRSxJQUE2QjtRQUN4RixJQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUcsWUFBWSxHQUFHLFNBQVMsQ0FBQyxjQUFjLEdBQUcsU0FBVyxHQUFHLFlBQVksQ0FBQztLQUNwSDs7Ozs7O0lBT00sa0NBQW9CLEdBQTNCLFVBQTRCLFNBQWtCLEVBQUUsSUFBNkI7UUFDekUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE1BQU0sZUFBZSxDQUFDLHlCQUF5QixDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDM0U7O1FBR0QsSUFBTSxRQUFRLEdBQXVCO1lBQ2pDLEVBQUUsRUFBRSxTQUFTLENBQUMsYUFBYSxFQUFFO1lBQzdCLEVBQUUsRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFO1NBQzdCLENBQUM7UUFFRixJQUFJLElBQUksRUFBRTtZQUNOLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO1FBRUQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3QyxPQUFPLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUM7Ozs7OztJQU9NLCtCQUFpQixHQUF4QixVQUF5QixTQUFrQixFQUFFLEtBQWE7UUFDdEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE1BQU0sZUFBZSxDQUFDLHlCQUF5QixDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDeEU7UUFFRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxlQUFlLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLGdDQUFnQyxDQUFDLENBQUM7U0FDMUY7UUFFRCxJQUFJOztZQUVBLElBQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0UsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbEcsSUFBTSxrQkFBa0IsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2hFLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQXVCLENBQUM7WUFDN0UsT0FBTztnQkFDSCxnQkFBZ0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLEVBQUU7Z0JBQ2xFLFlBQVksRUFBRSxlQUFlO2FBQ2hDLENBQUM7U0FDTDtRQUFDLE9BQU0sQ0FBQyxFQUFFO1lBQ1AsTUFBTSxlQUFlLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzNEO0tBQ0o7SUFDTCxvQkFBQztBQUFELENBQUM7O0FDckdEOzs7O0FBd0JBLElBQUssV0FHSjtBQUhELFdBQUssV0FBVztJQUNaLHdCQUFTLENBQUE7SUFDVCwwQkFBVyxDQUFBO0FBQ2YsQ0FBQyxFQUhJLFdBQVcsS0FBWCxXQUFXLFFBR2Y7QUFFRDtJQUlJLDJCQUFZLFdBQW9CO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0tBQ2xDO0lBRUssdUNBQVcsR0FBakIsVUFBa0IscUJBQTZCLEVBQUUsa0JBQTBCOzs7Ozs0QkFDakQscUJBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsRUFBRSxrQkFBa0IsQ0FBQyxFQUFBOzt3QkFBeEcsYUFBYSxHQUFHLFNBQXdGO3dCQUN4RyxNQUFNLEdBQVc7NEJBQ25CLEdBQUcsRUFBRSxhQUFhOzRCQUNsQixPQUFPLEVBQUUsV0FBVyxDQUFDLEVBQUU7eUJBQzFCLENBQUM7d0JBQ0Ysc0JBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDOzs7O0tBQ2hFO0lBRUssd0NBQVksR0FBbEIsVUFBbUIsV0FBbUIsRUFBRSxxQkFBNkIsRUFBRSxrQkFBMEI7Ozs7Ozt3QkFDdkYsV0FBVyxHQUFnQixTQUFTLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDdkYsaUJBQWlCLEdBQWMsSUFBSSxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQzt3QkFDakUscUJBQXFCLEdBQVMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzt3QkFDbEUscUJBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Z0NBQ2xDLEVBQUUsRUFBRSxXQUFXO2dDQUNmLEVBQUUsRUFBRSxLQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUk7Z0NBQy9CLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7Z0NBQ3RDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxlQUFlLElBQUksRUFBRTtnQ0FDOUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFO2dDQUN2QyxDQUFDLEVBQUUscUJBQXFCLENBQUMsWUFBWTtnQ0FDckMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLHFCQUFxQixDQUFDLFdBQVcsQ0FBQzs2QkFDN0MsRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFBOzRCQVJ2QixzQkFBTyxTQVFnQixFQUFDOzs7O0tBQzNCO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLElBQUE7O0FDNUREOzs7O0FBT0E7SUFJSSwyQkFBWSxVQUFtQyxFQUFFLFVBQW1CO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0tBQ2hDO0lBRUQsc0JBQUksOENBQWU7YUFBbkI7WUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDMUI7OztPQUFBO0lBRUQsc0JBQUkseUNBQVU7YUFBZDtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjs7O09BQUE7SUFDTCx3QkFBQztBQUFELENBQUM7O0FDdkJEOzs7O0FBa0NBOzs7QUFHQTtJQVVJLHlCQUFZLFFBQWdCLEVBQUUsWUFBMEIsRUFBRSxTQUFrQixFQUFFLE1BQWMsRUFBRSxpQkFBMkMsRUFBRSxpQkFBZ0M7UUFDdkssSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztLQUM5Qzs7Ozs7OztJQVFELGlFQUF1QyxHQUF2QyxVQUF3QyxrQkFBbUQsRUFBRSxXQUFtQixFQUFFLFNBQWtCO1FBQ2hJLElBQUksa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssa0JBQWtCLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEYsTUFBTSxlQUFlLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztTQUNwRDs7UUFHRCxJQUFJLGtCQUFrQixDQUFDLEtBQUssSUFBSSxrQkFBa0IsQ0FBQyxpQkFBaUIsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUU7WUFDakcsSUFBSSw0QkFBNEIsQ0FBQywwQkFBMEIsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3RKLE1BQU0sSUFBSSw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdkk7WUFFRCxNQUFNLElBQUksV0FBVyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN0SDtRQUVELElBQUksa0JBQWtCLENBQUMsV0FBVyxFQUFFO1lBQ2hDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDOUQ7S0FDSjs7Ozs7SUFNRCwrQ0FBcUIsR0FBckIsVUFBc0IsY0FBZ0Q7O1FBRWxFLElBQUksY0FBYyxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsaUJBQWlCLElBQUksY0FBYyxDQUFDLFFBQVEsRUFBRTtZQUNyRixJQUFJLDRCQUE0QixDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDMUksTUFBTSxJQUFJLDRCQUE0QixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzSDtZQUVELElBQU0sU0FBUyxHQUFNLGNBQWMsQ0FBQyxXQUFXLFlBQU8sY0FBYyxDQUFDLFNBQVMsV0FBTSxjQUFjLENBQUMsaUJBQWlCLDJCQUFzQixjQUFjLENBQUMsY0FBYyxxQkFBZ0IsY0FBYyxDQUFDLFFBQVUsQ0FBQztZQUNqTixNQUFNLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDMUQ7S0FDSjs7Ozs7O0lBT0ssbURBQXlCLEdBQS9CLFVBQ0ksbUJBQXFELEVBQ3JELFNBQW9CLEVBQ3BCLHFCQUE4QixFQUM5QixrQkFBMkIsRUFDM0IsV0FBb0IsRUFDcEIsV0FBb0IsRUFDcEIsYUFBd0IsRUFDeEIsWUFBcUIsRUFDckIsNEJBQXNDOzs7Ozs7O3dCQUd0QyxJQUFJLG1CQUFtQixDQUFDLFdBQVcsRUFBRTs0QkFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs0QkFDbkYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQ0FDekYsSUFBSSxDQUFDLHFCQUFxQixHQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBTSxDQUFDOzZCQUNqRjt5QkFDSjs2QkFBTTs0QkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOzRCQUNsRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsRUFBRSxDQUFDO3lCQUNuQzt3QkFFRyxVQUFVLEdBQWMsSUFBSSxDQUFDO3dCQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsRUFBRTs7NEJBRXBELFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs0QkFHekUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0NBQ25DLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssV0FBVyxFQUFFO29DQUN6QyxNQUFNLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2lDQUNwRDs2QkFDSjt5QkFDSjt3QkFHRyxlQUFlLEdBQXVCLElBQUksQ0FBQzt3QkFDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7NEJBQ25DLGVBQWUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQzt5QkFDbEY7d0JBRUssV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsSUFBSSxlQUFlLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQzs7Ozs4QkFHL0osSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQSxFQUFoRCx3QkFBZ0Q7d0JBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7d0JBQ3RFLFlBQVksR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQzt3QkFDbkUscUJBQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxFQUFBOzt3QkFBNUQsU0FBNEQsQ0FBQzs7Ozs7Ozs7d0JBT2pFLElBQUksNEJBQTRCLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRTs0QkFDL0MsR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzs0QkFDL0MsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzRCQUNsRCxJQUFJLENBQUMsT0FBTyxFQUFFO2dDQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLHFHQUFxRyxDQUFDLENBQUM7Z0NBQzNILHNCQUFPLElBQUksRUFBQzs2QkFDZjt5QkFDSjt3QkFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7OzhCQUUzQyxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLFlBQVksQ0FBQSxFQUFoRSx3QkFBZ0U7d0JBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLCtDQUErQyxDQUFDLENBQUM7d0JBQ3JFLHFCQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsRUFBQTs7d0JBQTNELFNBQTJELENBQUM7Ozs0QkFHcEUsc0JBQU8sZUFBZSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixDQUFDLEVBQUM7Ozs7S0FDbks7Ozs7Ozs7SUFRTyw2Q0FBbUIsR0FBM0IsVUFBNEIsbUJBQXFELEVBQUUsVUFBcUIsRUFBRSxTQUFvQixFQUFFLFlBQWlDLEVBQUUsYUFBd0IsRUFBRSxZQUFxQjtRQUU5TSxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFbEUsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sZUFBZSxDQUFDLGtDQUFrQyxFQUFFLENBQUM7U0FDOUQ7O1FBR0QsSUFBSSxhQUFhLEdBQWtCLElBQUksQ0FBQztRQUN4QyxJQUFJLGFBQWEsR0FBa0IsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3BELGFBQWEsR0FBRyxhQUFhLENBQUMsbUJBQW1CLENBQzdDLElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsR0FBRyxFQUNILG1CQUFtQixDQUFDLFFBQVEsRUFDNUIsSUFBSSxDQUFDLFFBQVEsRUFDYixVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQzNCLFlBQVksQ0FDZixDQUFDO1lBRUYsYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FDdEMsbUJBQW1CLEVBQ25CLFVBQVUsRUFDVixTQUFTLEVBQ1QsWUFBWSxDQUNmLENBQUM7U0FDTDs7UUFHRCxJQUFJLGlCQUFpQixHQUFzQixJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLEVBQUU7O1lBR3hELElBQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQzs7WUFHdEksSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDOztZQUczQyxJQUFNLFNBQVMsR0FBRyxZQUFZLEdBQUcsWUFBWSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUM7WUFDL0QsSUFBTSxzQkFBc0IsR0FBRyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsVUFBVSxDQUFDO1lBQzFFLElBQU0sOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CLENBQUMsY0FBYyxDQUFDOztZQUduRyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FDekQsSUFBSSxDQUFDLHFCQUFxQixFQUMxQixHQUFHLEVBQ0gsbUJBQW1CLENBQUMsWUFBWSxFQUNoQyxJQUFJLENBQUMsUUFBUSxFQUNiLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFDM0QsY0FBYyxDQUFDLFdBQVcsRUFBRSxFQUM1QixzQkFBc0IsRUFDdEIsOEJBQThCLEVBQzlCLG1CQUFtQixDQUFDLFVBQVUsRUFDOUIsWUFBWSxDQUNmLENBQUM7U0FDTDs7UUFHRCxJQUFJLGtCQUFrQixHQUF1QixJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDekQsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsd0JBQXdCLENBQzVELElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsR0FBRyxFQUNILG1CQUFtQixDQUFDLGFBQWEsRUFDakMsSUFBSSxDQUFDLFFBQVEsRUFDYixtQkFBbUIsQ0FBQyxJQUFJLEVBQ3hCLFlBQVksQ0FDZixDQUFDO1NBQ0w7O1FBR0QsSUFBSSxpQkFBaUIsR0FBc0IsSUFBSSxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hELGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9HO1FBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLENBQUM7S0FDbEg7Ozs7Ozs7SUFRTywrQ0FBcUIsR0FBN0IsVUFBOEIsbUJBQXFELEVBQUUsT0FBa0IsRUFBRSxTQUFvQixFQUFFLFlBQXFCO1FBQ2hKLElBQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7O1FBRzlDLElBQUksYUFBYSxLQUFLSSxxQkFBYSxDQUFDLElBQUksRUFBRTtZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sYUFBYSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDL0U7O1FBR0QsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEtBQUssS0FBSyxFQUFFO1lBQzFGLE1BQU0sZUFBZSxDQUFDLDBCQUEwQixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3JGO1FBRUQsT0FBTyxtQkFBbUIsQ0FBQyxXQUFXO1lBQ2xDLGFBQWEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUM7WUFDOUcsYUFBYSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDNUU7Ozs7Ozs7Ozs7O0lBWVksNENBQTRCLEdBQXpDLFVBQTBDLFNBQWtCLEVBQUUsV0FBd0IsRUFBRSxVQUFxQixFQUFFLGNBQXVCLEVBQUUsWUFBaUMsRUFBRSxxQkFBOEIsRUFBRSxrQkFBMkI7Ozs7Ozt3QkFDOU4sV0FBVyxHQUFXLEVBQUUsQ0FBQzt3QkFDekIsY0FBYyxHQUFrQixFQUFFLENBQUM7d0JBQ25DLFNBQVMsR0FBUyxJQUFJLENBQUM7d0JBQ3ZCLFlBQVksR0FBUyxJQUFJLENBQUM7d0JBQzFCLFFBQVEsR0FBVyxJQUFJLENBQUM7NkJBQ3hCLFdBQVcsQ0FBQyxXQUFXLEVBQXZCLHdCQUF1Qjs4QkFDbkIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEtBQUtELDRCQUFvQixDQUFDLEdBQUcsQ0FBQSxFQUE5RCx3QkFBOEQ7d0JBQ3hELGlCQUFpQixHQUFzQixJQUFJLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUNoRSxxQkFBTSxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLENBQUMsRUFBQTs7d0JBQTdILFdBQVcsR0FBRyxTQUErRyxDQUFDOzs7d0JBRTlILFdBQVcsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7O3dCQUVqRCxjQUFjLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUMvRSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7d0JBQ3ZFLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDOzs7d0JBRXRGLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRTs0QkFDekIsUUFBUSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQzt5QkFDdkQ7d0JBQ0ssR0FBRyxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7d0JBQ3ZFLEdBQUcsR0FBRyxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO3dCQUNwRCxzQkFBTztnQ0FDSCxRQUFRLEVBQUUsR0FBRztnQ0FDYixRQUFRLEVBQUUsR0FBRztnQ0FDYixNQUFNLEVBQUUsY0FBYztnQ0FDdEIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxJQUFJO2dDQUMxRSxPQUFPLEVBQUUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBRTtnQ0FDOUMsYUFBYSxFQUFFLFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLElBQUk7Z0NBQ3BELFdBQVcsRUFBRSxXQUFXO2dDQUN4QixTQUFTLEVBQUUsY0FBYztnQ0FDekIsU0FBUyxFQUFFLFNBQVM7Z0NBQ3BCLFlBQVksRUFBRSxZQUFZO2dDQUMxQixRQUFRLEVBQUUsUUFBUTtnQ0FDbEIsU0FBUyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsRUFBRTtnQ0FDM0UsS0FBSyxFQUFFLFlBQVksR0FBRyxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsRUFBRTs2QkFDM0QsRUFBQzs7OztLQUNMO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLElBQUE7O0FDOVVEOzs7O0FBMEJBOzs7QUFHQTtJQUE2QywyQ0FBVTtJQUVuRCxpQ0FBWSxhQUFrQztlQUMxQyxrQkFBTSxhQUFhLENBQUM7S0FDdkI7Ozs7Ozs7Ozs7O0lBWUssZ0RBQWMsR0FBcEIsVUFBcUIsT0FBZ0M7Ozs7Z0JBQzNDLFdBQVcsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQy9ELHNCQUFVLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLFNBQUksV0FBYSxFQUFDOzs7S0FDbkU7Ozs7OztJQU9LLDhDQUFZLEdBQWxCLFVBQW1CLE9BQWlDLEVBQUUsV0FBb0IsRUFBRSxXQUFvQjs7Ozs7O3dCQUM1RixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO3dCQUN6QyxJQUFJLENBQUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFOzRCQUMvQyxNQUFNLGVBQWUsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO3lCQUMvRDt3QkFFZ0IscUJBQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUE7O3dCQUFsRSxRQUFRLEdBQUcsU0FBdUQ7d0JBRWxFLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUNoQyxJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQ2hDLENBQUM7O3dCQUdGLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzlDLHFCQUFNLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLEVBQUE7NEJBQTFLLHNCQUFPLFNBQW1LLEVBQUM7Ozs7S0FDOUs7Ozs7OztJQU9ELHdEQUFzQixHQUF0QixVQUF1QixZQUFvQixFQUFFLFdBQW1COztRQUU1RCxJQUFNLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7UUFHaEksSUFBTSxhQUFhLEdBQUcsSUFBSSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7O1FBRWxELElBQU0sWUFBWSxHQUFvQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7O1FBRzdHLGVBQWUsQ0FBQyx1Q0FBdUMsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRyxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUM7S0FDNUI7Ozs7OztJQU9ELDhDQUFZLEdBQVosVUFBYSxhQUFnQzs7UUFFekMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNoQixNQUFNLHdCQUF3QixDQUFDLDZCQUE2QixFQUFFLENBQUM7U0FDbEU7UUFFRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUU7O1lBRXZCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNqRzthQUFNOztZQUVILElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDN0I7O1FBR0QsSUFBTSxrQkFBa0IsR0FBRyxhQUFhLENBQUMscUJBQXFCO1lBQzFELE1BQUksa0JBQWtCLENBQUMsZUFBZSxTQUFJLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBRyxHQUFHLEVBQUUsQ0FBQztRQUU3RyxJQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxhQUFhO1lBQ2xELE1BQUksa0JBQWtCLENBQUMsaUJBQWlCLFNBQUksa0JBQWtCLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBRyxHQUFHLEVBQUUsQ0FBQzs7UUFHdkcsSUFBTSxTQUFTLEdBQUcsS0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLGtCQUFvQixDQUFDO1FBQ25HLE9BQU8sU0FBUyxDQUFDO0tBQ3BCOzs7Ozs7SUFPYSxxREFBbUIsR0FBakMsVUFBa0MsU0FBb0IsRUFBRSxPQUFpQzs7Ozs7O3dCQUMvRSxVQUFVLEdBQXNCOzRCQUNsQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUTs0QkFDMUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxrQkFBa0I7NEJBQ3ZDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTt5QkFDekIsQ0FBQzt3QkFFa0IscUJBQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxFQUFBOzt3QkFBeEQsV0FBVyxHQUFHLFNBQTBDO3dCQUN4RCxPQUFPLEdBQTJCLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO3dCQUVoRixzQkFBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFDOzs7O0tBQ3JHOzs7OztJQU1hLHdEQUFzQixHQUFwQyxVQUFxQyxPQUFpQzs7Ozs7O3dCQUM1RCxnQkFBZ0IsR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7d0JBRXZELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7d0JBRy9ELGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7O3dCQUdyRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzt3QkFHM0MsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzt3QkFHcEQsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFOzRCQUN0QixnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO3lCQUMxRDt3QkFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFOzRCQUM1QyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQzt5QkFDaEY7d0JBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRTs0QkFDekMsZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDOzRCQUN0RSxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7NEJBQy9ELGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQzt5QkFDMUU7d0JBRUQsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO3dCQUNsRSxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQzs4QkFFN0IsT0FBTyxDQUFDLG9CQUFvQixLQUFLQSw0QkFBb0IsQ0FBQyxHQUFHLENBQUEsRUFBekQsd0JBQXlEO3dCQUNuRCxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDaEQscUJBQU0saUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBQTs7d0JBQTFHLFNBQVMsR0FBRyxTQUE4Rjt3QkFDaEgsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7d0JBR3RDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDO3dCQUMzRixnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFFakQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQzdJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7eUJBQzFGO3dCQUVELHNCQUFPLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLEVBQUM7Ozs7S0FDL0M7Ozs7O0lBTU8sOERBQTRCLEdBQXBDLFVBQXFDLE9BQWdDO1FBQ2pFLElBQU0sZ0JBQWdCLEdBQUcsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBRXZELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvRCxJQUFNLGFBQWEsa0JBQU8sT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUssT0FBTyxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQzs7UUFHMUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzs7UUFHckQsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzRixnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQzs7UUFHakQsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQzs7UUFHdkQsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzs7UUFHdkMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7O1FBR3pELGdCQUFnQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRWpDLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN2QixnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQy9GO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2hCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDcEIsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0RDs7UUFHRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDYixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hDO2FBQU0sSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQzFCLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEQ7YUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDcEQsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDM0Q7UUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDZixnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVDO1FBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2YsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDMUY7UUFFRCxJQUFJLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRTtZQUM5QixnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUMxRTtRQUVELE9BQU8sZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUMvQztJQUNMLDhCQUFDO0FBQUQsQ0E5T0EsQ0FBNkMsVUFBVTs7QUM3QnZEOzs7O0FBbUJBOzs7QUFHQTtJQUFzQyxvQ0FBVTtJQUU1QywwQkFBWSxhQUFrQztlQUMxQyxrQkFBTSxhQUFhLENBQUM7S0FDdkI7Ozs7OztJQU9ZLHVDQUFZLEdBQXpCLFVBQTBCLE9BQTBCOzs7Ozs0QkFFRCxxQkFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFBOzt3QkFBMUUsa0JBQWtCLEdBQXVCLFNBQWlDO3dCQUNoRixPQUFPLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsQ0FBQzt3QkFDSSxxQkFBTSxJQUFJLENBQUMsMEJBQTBCLENBQ3BGLE9BQU8sRUFDUCxrQkFBa0IsQ0FBQyxFQUFBOzt3QkFGakIsUUFBUSxHQUFxQyxTQUU1Qjt3QkFFakIsZUFBZSxHQUFHLElBQUksZUFBZSxDQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQ2hDLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDaEMsQ0FBQzs7d0JBR0YsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN6QyxxQkFBTSxlQUFlLENBQUMseUJBQXlCLENBQ2xELFFBQVEsRUFDUixJQUFJLENBQUMsU0FBUyxFQUNkLE9BQU8sQ0FBQyxxQkFBcUIsRUFDN0IsT0FBTyxDQUFDLGtCQUFrQixDQUM3QixFQUFBOzRCQUxELHNCQUFPLFNBS04sRUFBQzs7OztLQUNMOzs7OztJQU1hLHdDQUFhLEdBQTNCLFVBQTRCLE9BQTBCOzs7O2dCQUM1QyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7Z0JBQzdDLFVBQVUsR0FBc0I7b0JBQ2xDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRO29CQUMxQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7b0JBQzVCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtpQkFDekIsQ0FBQztnQkFFRixzQkFBTyxJQUFJLENBQUMsc0NBQXNDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFDOzs7S0FDM0g7Ozs7Ozs7SUFRYSxpRUFBc0MsR0FBcEQsVUFDSSxrQkFBMEIsRUFDMUIsV0FBbUIsRUFDbkIsT0FBK0IsRUFDL0IsVUFBNkI7Ozs7OzRCQVd6QixxQkFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FDekMsVUFBVSxFQUNWLGtCQUFrQixFQUNsQjs0QkFDSSxJQUFJLEVBQUUsV0FBVzs0QkFDakIsT0FBTyxFQUFFLE9BQU87eUJBQ25CLENBQUMsRUFBQTs7d0JBZEYsS0FRQSxDQUFBLFNBTUUsTUFQRCxFQU5jLFFBQVEsZUFBQSxFQUNOLFVBQVUsaUJBQUEsRUFDTCxlQUFlLHNCQUFBLEVBQ3JCLFNBQVMsZ0JBQUEsRUFDckIsUUFBUSxjQUFBLEVBQ1IsT0FBTyxhQUFBO3dCQVVmLHNCQUFPO2dDQUNILFFBQVEsVUFBQTtnQ0FDUixVQUFVLFlBQUE7Z0NBQ1YsZUFBZSxpQkFBQTtnQ0FDZixTQUFTLFdBQUE7Z0NBQ1QsUUFBUSxVQUFBO2dDQUNSLE9BQU8sU0FBQTs2QkFDVixFQUFDOzs7O0tBQ0w7Ozs7SUFLTyw0Q0FBaUIsR0FBekIsVUFBMEIsT0FBMEI7UUFFaEQsSUFBTSxnQkFBZ0IsR0FBNEIsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBRWhGLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDMUY7UUFFRCxPQUFPLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLENBQUM7S0FDL0M7Ozs7Ozs7SUFRYSxxREFBMEIsR0FBeEMsVUFDSSxPQUEwQixFQUMxQixrQkFBc0M7Ozs7O2dCQUVoQyxXQUFXLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2RSxPQUFPLEdBQTJCLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO2dCQUUxRSx3QkFBd0IsR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsU0FBUyxDQUFDO2dCQUNqRixvQkFBb0IsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDOzs7OztnQkFNaEUsc0JBQU8sSUFBSSxPQUFPLENBQW1DLFVBQUMsT0FBTyxFQUFFLE1BQU07d0JBRWpFLElBQU0sVUFBVSxHQUFrQyxXQUFXLENBQUM7Ozs7Ozs2Q0FFbEQsT0FBTyxDQUFDLE1BQU0sRUFBZCx3QkFBYzt3Q0FFZCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO3dDQUN4RixhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7d0NBQzFCLE1BQU0sQ0FBQyxlQUFlLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxDQUFDOzs7OENBRWxELFNBQVMsQ0FBQyxVQUFVLEVBQUUsR0FBRyx3QkFBd0IsQ0FBQSxFQUFqRCx3QkFBaUQ7d0NBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUEyRCx3QkFBMEIsQ0FBQyxDQUFDO3dDQUN6RyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7d0NBQzFCLE1BQU0sQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDOzs7d0NBR2pELFVBQVUsR0FBc0I7NENBQ2xDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFROzRDQUMxQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7NENBQzVCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTt5Q0FDekIsQ0FBQzt3Q0FDZSxxQkFBTSxJQUFJLENBQUMsMEJBQTBCLENBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUM1QixXQUFXLEVBQ1gsT0FBTyxFQUNQLFVBQVUsQ0FBQyxFQUFBOzt3Q0FKVCxRQUFRLEdBQUcsU0FJRjt3Q0FFZixJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLHFCQUFxQixFQUFFOzs0Q0FFekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3lDQUNyRDs2Q0FBTTs0Q0FDSCxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7NENBQzFCLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7eUNBQzFCOzs7Ozt3Q0FHTCxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7d0NBQzFCLE1BQU0sQ0FBQyxPQUFLLENBQUMsQ0FBQzs7Ozs7NkJBRXJCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztxQkFDNUIsQ0FBQyxFQUFDOzs7S0FDTjs7Ozs7O0lBT08saURBQXNCLEdBQTlCLFVBQStCLE9BQTBCLEVBQUUsa0JBQXNDO1FBRTdGLElBQU0saUJBQWlCLEdBQTRCLElBQUksdUJBQXVCLEVBQUUsQ0FBQztRQUVqRixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRSxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDNUQsaUJBQWlCLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9ELElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0YsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0ksaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUMzRjtRQUNELE9BQU8saUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUNoRDtJQUNMLHVCQUFDO0FBQUQsQ0FuTUEsQ0FBc0MsVUFBVTs7QUN0QmhEOzs7O0FBdUJBOzs7QUFHQTtJQUF3QyxzQ0FBVTtJQUU5Qyw0QkFBWSxhQUFrQztlQUMxQyxrQkFBTSxhQUFhLENBQUM7S0FDdkI7SUFFWSx5Q0FBWSxHQUF6QixVQUEwQixPQUE0Qjs7Ozs7NEJBQ2pDLHFCQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFBOzt3QkFBbEUsUUFBUSxHQUFHLFNBQXVEO3dCQUVsRSxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFDaEMsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUNoQyxDQUFDO3dCQUVGLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3JELHNCQUFPLGVBQWUsQ0FBQyx5QkFBeUIsQ0FDNUMsUUFBUSxDQUFDLElBQUksRUFDYixJQUFJLENBQUMsU0FBUyxFQUNkLE9BQU8sQ0FBQyxxQkFBcUIsRUFDN0IsT0FBTyxDQUFDLGtCQUFrQixFQUMxQixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxDQUNQLEVBQUM7Ozs7S0FDTDs7Ozs7SUFNWSx1REFBMEIsR0FBdkMsVUFBd0MsT0FBMEI7Ozs7O2dCQUU5RCxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNWLE1BQU0sd0JBQXdCLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztpQkFDakU7O2dCQUdELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO29CQUNsQixNQUFNLGVBQWUsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO2lCQUMvRDtnQkFHSyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Z0JBR2xILElBQUksTUFBTSxFQUFFO29CQUNSLElBQUk7d0JBQ0Esc0JBQU8sSUFBSSxDQUFDLGtDQUFrQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBQztxQkFDakU7b0JBQ0QsT0FBTyxDQUFDLEVBQUU7d0JBQ0EsaUJBQWlCLEdBQUcsQ0FBQyxZQUFZLGVBQWUsSUFBSSxDQUFDLENBQUMsU0FBUyxLQUFLLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQzt3QkFDbkgsK0JBQStCLEdBQUcsQ0FBQyxZQUFZLFdBQVcsSUFBSSxDQUFDLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQzs7d0JBRzlKLElBQUksaUJBQWlCLElBQUksK0JBQStCLEVBQUU7NEJBQ3RELHNCQUFPLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUM7O3lCQUVsRTs2QkFBTTs0QkFDSCxNQUFNLENBQUMsQ0FBQzt5QkFDWDtxQkFFSjtpQkFDSjs7Z0JBR0Qsc0JBQU8sSUFBSSxDQUFDLGtDQUFrQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBQzs7O0tBRWxFOzs7OztJQU1hLCtEQUFrQyxHQUFoRCxVQUFpRCxPQUEwQixFQUFFLElBQWE7Ozs7Z0JBRWhGLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDOztnQkFHMUgsSUFBSSxDQUFDLFlBQVksRUFBRTtvQkFDZixNQUFNLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2lCQUNwRDtnQkFFSyxtQkFBbUIseUJBQ2xCLE9BQU8sS0FDVixZQUFZLEVBQUUsWUFBWSxDQUFDLE1BQU0sR0FDcEMsQ0FBQztnQkFFRixzQkFBTyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEVBQUM7OztLQUNqRDs7Ozs7O0lBT2EsZ0RBQW1CLEdBQWpDLFVBQWtDLE9BQTRCLEVBQUUsU0FBb0I7Ozs7OzRCQUc1RCxxQkFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLEVBQUE7O3dCQUF4RCxXQUFXLEdBQUcsU0FBMEM7d0JBQ3hELE9BQU8sR0FBMkIsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7d0JBQzFFLFVBQVUsR0FBc0I7NEJBQ2xDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFROzRCQUMxQyxTQUFTLEVBQUUsU0FBUyxDQUFDLGtCQUFrQjs0QkFDdkMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO3lCQUN6QixDQUFDO3dCQUVGLHNCQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUM7Ozs7S0FDckc7Ozs7O0lBTWEsbURBQXNCLEdBQXBDLFVBQXFDLE9BQTRCOzs7Ozs7d0JBQ3ZELGdCQUFnQixHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQzt3QkFFdkQsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUUvRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUUzQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7d0JBRTdELGdCQUFnQixDQUFDLGFBQWEsRUFBRSxDQUFDO3dCQUUzQixhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQzt3QkFDM0YsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7d0JBRWpELGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7d0JBRXZELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUU7NEJBQzVDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO3lCQUNoRjt3QkFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsZUFBZSxFQUFFOzRCQUN6QyxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUM7NEJBQ3RFLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQzs0QkFDL0QsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO3lCQUMxRTs4QkFFRyxPQUFPLENBQUMsb0JBQW9CLEtBQUtBLDRCQUFvQixDQUFDLEdBQUcsQ0FBQSxFQUF6RCx3QkFBeUQ7d0JBQ25ELGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUNsRSxLQUFBLENBQUEsS0FBQSxnQkFBZ0IsRUFBQyxXQUFXLENBQUE7d0JBQUMscUJBQU0saUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBQTs7d0JBQTNILGNBQTZCLFNBQThGLEVBQUMsQ0FBQzs7O3dCQUdqSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDN0ksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQzt5QkFDMUY7d0JBRUQsc0JBQU8sZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsRUFBQzs7OztLQUMvQztJQUNMLHlCQUFDO0FBQUQsQ0E1SkEsQ0FBd0MsVUFBVTs7QUMxQmxEOzs7O0FBc0JBOzs7QUFHQTtJQUE0QywwQ0FBVTtJQUlsRCxnQ0FBWSxhQUFrQztlQUMxQyxrQkFBTSxhQUFhLENBQUM7S0FDdkI7SUFFWSw2Q0FBWSxHQUF6QixVQUEwQixPQUFnQzs7Ozs7O3dCQUV0RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUM7NkJBRS9DLE9BQU8sQ0FBQyxTQUFTLEVBQWpCLHdCQUFpQjt3QkFDVixxQkFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQTs0QkFBOUQsc0JBQU8sU0FBdUQsRUFBQzs0QkFHaEMscUJBQU0sSUFBSSxDQUFDLDZCQUE2QixFQUFFLEVBQUE7O3dCQUF2RSwwQkFBMEIsR0FBRyxTQUEwQzs4QkFDekUsMEJBQTBCLElBQUksSUFBSSxDQUFBLEVBQWxDLHdCQUFrQzt3QkFDbEMsc0JBQU8sMEJBQTBCLEVBQUM7NEJBRTNCLHFCQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFBOzRCQUE5RCxzQkFBTyxTQUF1RCxFQUFDOzs7O0tBRXRFO0lBRWEsOERBQTZCLEdBQTNDOzs7Ozs7d0JBQ1UsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7d0JBQzFELElBQUksQ0FBQyxpQkFBaUI7NEJBQ2xCLFNBQVMsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLEVBQUU7NEJBQzVHLHNCQUFPLElBQUksRUFBQzt5QkFDZjt3QkFFTSxxQkFBTSxlQUFlLENBQUMsNEJBQTRCLENBQ3JELElBQUksQ0FBQyxXQUFXLEVBQ2hCO2dDQUNJLE9BQU8sRUFBRSxJQUFJO2dDQUNiLFdBQVcsRUFBRSxpQkFBaUI7Z0NBQzlCLE9BQU8sRUFBRSxJQUFJO2dDQUNiLFlBQVksRUFBRSxJQUFJO2dDQUNsQixXQUFXLEVBQUUsSUFBSTs2QkFDcEIsRUFDRCxJQUFJLEVBQ0osSUFBSSxDQUNQLEVBQUE7NEJBWEQsc0JBQU8sU0FXTixFQUFDOzs7O0tBQ0w7SUFFTyx5REFBd0IsR0FBaEM7UUFDSSxJQUFNLGlCQUFpQixHQUFxQjtZQUN4QyxhQUFhLEVBQUUsRUFBRTtZQUNqQixXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxlQUFlO1lBQzNFLGNBQWMsRUFBRUgsc0JBQWMsQ0FBQyxZQUFZO1lBQzNDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07WUFDNUIsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7U0FDL0MsQ0FBQztRQUNGLElBQU0sZUFBZSxHQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdkcsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsZUFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBQSxDQUFDLENBQUM7UUFDN0csSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQztTQUNmO2FBQU0sSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoQyxNQUFNLGVBQWUsQ0FBQyx3Q0FBd0MsRUFBRSxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxZQUFZLENBQUMsQ0FBQyxDQUFzQixDQUFDO0tBQy9DO0lBRWEsb0RBQW1CLEdBQWpDLFVBQWtDLE9BQWdDLEVBQUUsU0FBb0I7Ozs7Ozt3QkFHOUUsV0FBVyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDbkQsT0FBTyxHQUEyQixJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQzt3QkFDMUUsVUFBVSxHQUFzQjs0QkFDbEMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVE7NEJBQzFDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUzs0QkFDNUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO3lCQUN6QixDQUFDO3dCQUVlLHFCQUFNLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUE7O3dCQUEzRyxRQUFRLEdBQUcsU0FBZ0c7d0JBRTNHLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUNoQyxJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQ2hDLENBQUM7d0JBRUYsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDL0IscUJBQU0sZUFBZSxDQUFDLHlCQUF5QixDQUNqRSxRQUFRLENBQUMsSUFBSSxFQUNiLElBQUksQ0FBQyxTQUFTLEVBQ2QsT0FBTyxDQUFDLHFCQUFxQixFQUM3QixPQUFPLENBQUMsa0JBQWtCLEVBQzFCLElBQUksRUFDSixJQUFJLEVBQ0osT0FBTyxDQUFDLE1BQU0sQ0FDakIsRUFBQTs7d0JBUkssYUFBYSxHQUFHLFNBUXJCO3dCQUVELHNCQUFPLGFBQWEsRUFBQzs7OztLQUN4QjtJQUVPLHVEQUFzQixHQUE5QixVQUErQixPQUFnQztRQUMzRCxJQUFNLGdCQUFnQixHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQztRQUV2RCxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0QsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEQsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRWxFLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0YsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFakQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRTtZQUM1QyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNoRjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUU7WUFDL0MsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUM7WUFDdEUsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9ELGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMxRTtRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDMUY7UUFFRCxPQUFPLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLENBQUM7S0FDL0M7SUFDTCw2QkFBQztBQUFELENBaElBLENBQTRDLFVBQVU7O0FDekJ0RDs7OztBQXdCQTs7O0FBR0E7SUFBc0Msb0NBQVU7SUFJNUMsMEJBQVksYUFBa0M7ZUFDMUMsa0JBQU0sYUFBYSxDQUFDO0tBQ3ZCO0lBRVksdUNBQVksR0FBekIsVUFBMEIsT0FBMEI7Ozs7Ozt3QkFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDOzZCQUUvQyxPQUFPLENBQUMsU0FBUyxFQUFqQix3QkFBaUI7d0JBQ1YscUJBQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUE7NEJBQTlELHNCQUFPLFNBQXVELEVBQUM7O3dCQUc3RCwwQkFBMEIsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUM7OEJBQzNFLDBCQUEwQixJQUFJLElBQUksQ0FBQSxFQUFsQyx3QkFBa0M7d0JBQ2xDLHNCQUFPLDBCQUEwQixFQUFDOzRCQUUzQixxQkFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQTs0QkFBOUQsc0JBQU8sU0FBdUQsRUFBQzs7OztLQUV0RTtJQUVhLHdEQUE2QixHQUEzQyxVQUE0QyxPQUEwQjs7Ozs7O3dCQUM1RCxpQkFBaUIsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQ2pFLElBQUksQ0FBQyxpQkFBaUI7NEJBQ2xCLFNBQVMsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLEVBQUU7NEJBQzVHLHNCQUFPLElBQUksRUFBQzt5QkFDZjt3QkFFSyxhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUNyRCxhQUFhLEdBQWMsSUFBSSxDQUFDO3dCQUNoQyxhQUFhLEdBQWtCLElBQUksQ0FBQzt3QkFDeEMsSUFBSSxhQUFhLEVBQUU7NEJBQ2YsYUFBYSxHQUFHLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQzs0QkFDM0UsVUFBVSxHQUFHLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQztnQ0FDckQsYUFBYSxFQUFFLGFBQWEsQ0FBQyxhQUFhO2dDQUMxQyxXQUFXLEVBQUUsYUFBYSxDQUFDLFdBQVc7Z0NBQ3RDLFFBQVEsRUFBRSxhQUFhLENBQUMsS0FBSztnQ0FDN0IsUUFBUSxFQUFFLElBQUk7NkJBQ2pCLENBQUMsQ0FBQzs0QkFFSCxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7eUJBQzVEO3dCQUVNLHFCQUFNLGVBQWUsQ0FBQyw0QkFBNEIsQ0FDckQsSUFBSSxDQUFDLFdBQVcsRUFDaEI7Z0NBQ0ksT0FBTyxFQUFFLGFBQWE7Z0NBQ3RCLFdBQVcsRUFBRSxpQkFBaUI7Z0NBQzlCLE9BQU8sRUFBRSxhQUFhO2dDQUN0QixZQUFZLEVBQUUsSUFBSTtnQ0FDbEIsV0FBVyxFQUFFLElBQUk7NkJBQ3BCLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFBOzRCQVIzQixzQkFBTyxTQVFvQixFQUFDOzs7O0tBQy9CO0lBRU8sbURBQXdCLEdBQWhDLFVBQWlDLE9BQTBCO1FBQ3ZELElBQU0saUJBQWlCLEdBQXFCO1lBQ3hDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLCtCQUErQixDQUFDLGVBQWU7WUFDM0UsY0FBYyxFQUFFQSxzQkFBYyxDQUFDLFlBQVk7WUFDM0MsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVE7WUFDMUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTtZQUM1QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtZQUM1QyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVk7U0FDckMsQ0FBQztRQUVGLElBQU0sZUFBZSxHQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdkcsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsZUFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBQSxDQUFDLENBQUM7UUFFN0csSUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUM1QyxJQUFJLGVBQWUsR0FBRyxDQUFDLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUM7U0FDZjthQUFNLElBQUksZUFBZSxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLGVBQWUsQ0FBQyx3Q0FBd0MsRUFBRSxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxZQUFZLENBQUMsQ0FBQyxDQUFzQixDQUFDO0tBQy9DO0lBRU8sK0NBQW9CLEdBQTVCLFVBQTZCLE9BQTBCO1FBQ25ELElBQU0sYUFBYSxHQUFxQjtZQUNwQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQyxlQUFlO1lBQzNFLGNBQWMsRUFBRUEsc0JBQWMsQ0FBQyxRQUFRO1lBQ3ZDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07WUFDNUIsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZO1NBQ3JDLENBQUM7UUFFRixJQUFNLGVBQWUsR0FBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRyxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFBLENBQUMsQ0FBQzs7UUFFakcsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFrQixDQUFDO0tBQ3ZDO0lBRWEsOENBQW1CLEdBQWpDLFVBQWtDLE9BQTBCLEVBQUUsU0FBb0I7Ozs7Ozt3QkFHeEUsV0FBVyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDbkQsT0FBTyxHQUEyQixJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQzt3QkFDMUUsVUFBVSxHQUFzQjs0QkFDbEMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVE7NEJBQzFDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUzs0QkFDNUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO3lCQUN6QixDQUFDO3dCQUVlLHFCQUFNLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUE7O3dCQUEzRyxRQUFRLEdBQUcsU0FBZ0c7d0JBRTNHLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUNoQyxJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQ2hDLENBQUM7d0JBRUYsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDL0IscUJBQU0sZUFBZSxDQUFDLHlCQUF5QixDQUNqRSxRQUFRLENBQUMsSUFBSSxFQUNiLElBQUksQ0FBQyxTQUFTLEVBQ2QsT0FBTyxDQUFDLHFCQUFxQixFQUM3QixPQUFPLENBQUMsa0JBQWtCLEVBQzFCLElBQUksRUFDSixJQUFJLEVBQ0osT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsWUFBWSxDQUN2QixFQUFBOzt3QkFUSyxhQUFhLEdBQUcsU0FTckI7d0JBRUQsc0JBQU8sYUFBYSxFQUFDOzs7O0tBQ3hCO0lBRU8saURBQXNCLEdBQTlCLFVBQStCLE9BQTBCO1FBQ3JELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBRXZELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEQsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFakMsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzRixnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqRCxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyRSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXZELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUU7WUFDNUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEY7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsZUFBZSxFQUFFO1lBQy9DLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDO1lBQ3RFLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvRCxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDMUU7UUFFRCxPQUFPLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLENBQUM7S0FDL0M7SUFDTCx1QkFBQztBQUFELENBbktBLENBQXNDLFVBQVU7O0FDM0JoRDs7Ozs7SUFvQnNDLG9DQUFVO0lBRTVDLDBCQUFZLGFBQWtDO2VBQzFDLGtCQUFNLGFBQWEsQ0FBQztLQUN2Qjs7Ozs7O0lBT0ssdUNBQVksR0FBbEIsVUFBbUIsT0FBMEI7Ozs7Ozs7d0JBRTlCLHFCQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsRUFBQTs0QkFBN0Msc0JBQU8sU0FBc0MsRUFBQzs7O3dCQUU5QyxJQUFJLEdBQUMsWUFBWSxlQUFlLElBQUksR0FBQyxDQUFDLFNBQVMsS0FBSyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7NEJBQzVGLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzRCQUMvRCxzQkFBTyxrQkFBa0IsQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsRUFBQzt5QkFDakU7NkJBQU07NEJBQ0gsTUFBTSxHQUFDLENBQUM7eUJBQ1g7Ozs7O0tBRVI7Ozs7O0lBTUssNkNBQWtCLEdBQXhCLFVBQXlCLE9BQTBCOzs7Ozs7O3dCQUUvQyxJQUFJLENBQUMsT0FBTyxFQUFFOzRCQUNWLE1BQU0sd0JBQXdCLENBQUMsNEJBQTRCLEVBQUUsQ0FBQzt5QkFDakU7O3dCQUdELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFOzRCQUNsQixNQUFNLGVBQWUsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDO3lCQUMvRDt3QkFFSyxhQUFhLEdBQUcsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFDbkQsV0FBVyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDOUYsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQzs2QkFFakksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQXhELHdCQUF3RDt3QkFDeEQsTUFBTSxlQUFlLENBQUMsMEJBQTBCLEVBQUUsQ0FBQzs7d0JBRW5ELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTs0QkFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO3lCQUMzRDt3QkFDTSxxQkFBTSxJQUFJLENBQUMsNkJBQTZCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBQTs0QkFBdkgsc0JBQU8sU0FBZ0gsRUFBQzs7OztLQUUvSDs7Ozs7SUFNYSx3REFBNkIsR0FBM0MsVUFBNEMsV0FBd0IsRUFBRSxxQkFBOEIsRUFBRSxrQkFBMkI7Ozs7Ozt3QkFDdkgsVUFBVSxHQUFHLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7d0JBQ25GLHFCQUFNLGVBQWUsQ0FBQyw0QkFBNEIsQ0FDckQsSUFBSSxDQUFDLFdBQVcsRUFDaEIsV0FBVyxFQUNYLFVBQVUsRUFDVixJQUFJLEVBQ0osSUFBSSxFQUNKLHFCQUFxQixFQUNyQixrQkFBa0IsQ0FDckIsRUFBQTs0QkFSRCxzQkFBTyxTQVFOLEVBQUM7Ozs7S0FDTDs7Ozs7O0lBT08sNENBQWlCLEdBQXpCLFVBQTBCLE9BQTBCLEVBQUUsaUJBQXlDO1FBQzNGLElBQUksT0FBTyxDQUFDLFlBQVksSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFOztZQUV4QyxPQUFPLElBQUksQ0FBQztTQUNmO2FBQU0sSUFBSSxDQUFDLGlCQUFpQixJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLEVBQUU7O1lBRXpJLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNMLHVCQUFDO0FBQUQsQ0F0RkEsQ0FBc0MsVUFBVTs7QUNwQmhEOzs7OztJQVlBO0tBOENDOzs7Ozs7Ozs7OztJQWxDZ0IseUNBQXdCLEdBQXJDLFVBQXNDLFlBQW9CLEVBQUUsYUFBNkIsRUFBRSxZQUEwQjs7Ozs7O3dCQUUzRyxxQkFBcUIsR0FBYyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQzt3QkFFcEgsSUFBSSxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFOzRCQUMzQyxzQkFBTyxxQkFBcUIsRUFBQzt5QkFDaEM7Ozs7d0JBR0cscUJBQU0scUJBQXFCLENBQUMscUJBQXFCLEVBQUUsRUFBQTs7d0JBQW5ELFNBQW1ELENBQUM7d0JBQ3BELHNCQUFPLHFCQUFxQixFQUFDOzs7d0JBRTdCLE1BQU0sZUFBZSxDQUFDLHNDQUFzQyxDQUFDLEdBQUMsQ0FBQyxDQUFDOzs7OztLQUV2RTs7Ozs7Ozs7Ozs7SUFZTSwrQkFBYyxHQUFyQixVQUFzQixZQUFvQixFQUFFLGdCQUFnQyxFQUFFLFlBQTBCOztRQUVwRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbkMsTUFBTSx3QkFBd0IsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDdEU7SUFDTCx1QkFBQztBQUFELENBQUM7O0FDMUREOzs7O0FBS0E7SUFPSTtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCOzs7Ozs7SUFPTSw2Q0FBdUIsR0FBOUIsVUFBK0IsR0FBVyxFQUFFLE1BQWU7UUFFdkQsSUFBTSxXQUFXLEdBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakYsSUFBSSxjQUFjLEdBQVksSUFBSSxDQUFDO1FBRW5DLElBQUksTUFBTSxFQUFFO1lBQ1IsY0FBYztnQkFDVixNQUFNLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDO29CQUN2QyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztvQkFDL0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUM7b0JBQ25DLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDMUM7UUFFRCxPQUFPLFdBQVcsSUFBSSxjQUFjLENBQUM7S0FDeEM7SUFDTCw0QkFBQztBQUFELENBQUM7O0FDdENEOzs7O0FBS0E7SUFFQTtLQTRCQzs7Ozs7O0lBZFUsbUNBQWtCLEdBQXpCLFVBQTBCLEdBQVcsRUFBRSxNQUFlO1FBRWxELElBQUksV0FBVyxHQUFZLEtBQUssQ0FBQztRQUNqQyxJQUFJLEdBQUcsRUFBRTtZQUNMLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFFO1FBRUQsSUFBSSxjQUFjLEdBQVksSUFBSSxDQUFDO1FBQ25DLElBQUksTUFBTSxFQUFFO1lBQ1IsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxPQUFPLFdBQVcsSUFBSSxjQUFjLENBQUM7S0FDeEM7SUFDTCx1QkFBQztBQUFELENBQUM7O0FDbkNEOzs7O0FBS0E7SUFjSSxnQ0FBWSxnQkFBd0MsRUFBRSxZQUEwQjtRQUM1RSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUNwQyxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDLFlBQVksSUFBSSxLQUFLLENBQUM7UUFFM0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHNCQUFzQixDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0tBQzFIOzs7O0lBS0Qsa0VBQWlDLEdBQWpDO1FBQ0ksSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELElBQU0sT0FBTyxHQUFHLEtBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxlQUFlLEdBQUcsZUFBaUIsQ0FBQztRQUMzRixJQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFMUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDM0g7Ozs7SUFLRCwrREFBOEIsR0FBOUI7UUFDSSxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFNUMsSUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZFLElBQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3RILElBQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDcEcsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7O1FBRzlDLElBQU0sUUFBUSxHQUFHLFNBQVMsR0FBRyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxHQUFHLHNCQUFzQixDQUFDLGNBQWMsQ0FBQztRQUN2SCxJQUFNLGNBQWMsR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFM0YsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDbEs7Ozs7O0lBTUQsbURBQWtCLEdBQWxCLFVBQW1CLEtBQWdCO1FBQy9CLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM1QyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRSxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRSxLQUFLLENBQUMsU0FBUyxHQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvRixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFFQyx1QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNGLE9BQU87S0FDVjs7OztJQUtELG1EQUFrQixHQUFsQjtRQUNJLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM1QyxZQUFZLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFFQSx1QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNGLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQztLQUNqQzs7OztJQUtELGdEQUFlLEdBQWY7UUFDSSxJQUFNLFlBQVksR0FBMEIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ3hFLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRUEsdUJBQWUsQ0FBQyxTQUFTLENBQTBCLENBQUM7UUFFM0gsT0FBTyxZQUFZLElBQUksWUFBWSxDQUFDO0tBQ3ZDOzs7O0lBS0Qsb0RBQW1CLEdBQW5CO1FBQ0ksSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzVDLElBQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlFLElBQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzlDLElBQUksZ0JBQWdCLEtBQUssVUFBVSxFQUFFOztZQUVqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN4RDthQUFNOztZQUVILElBQU0saUJBQWlCLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1lBQ3RELGlCQUFpQixDQUFDLGNBQWMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RixpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUV2RSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUVBLHVCQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkc7S0FDSjs7Ozs7SUFNTSxzQ0FBZSxHQUF0QixVQUF1QixxQkFBNEM7UUFDL0QsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQU0sVUFBVSxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O1lBRTdCLElBQU0sS0FBSyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBTSxhQUFhLEdBQUcscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEUsSUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUdsRCxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBRTdGLElBQUksUUFBUSxHQUFHLHNCQUFzQixDQUFDLGdCQUFnQixFQUFFOztnQkFFcEQsU0FBUyxJQUFJLENBQUMsQ0FBQzthQUNsQjtpQkFBTTtnQkFDSCxNQUFNO2FBQ1Q7U0FDSjtRQUVELE9BQU8sU0FBUyxDQUFDO0tBQ3BCO0lBQ0wsNkJBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
